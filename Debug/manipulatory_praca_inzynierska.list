
manipulatory_praca_inzynierska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800c6c8  0800c6c8  0001c6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb2c  0800cb2c  000204d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb2c  0800cb2c  0001cb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb34  0800cb34  000204d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb34  0800cb34  0001cb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0800cb3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000390  0800cecc  00020390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000430  0800cf6c  00020430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052b4  200004d0  0800d00c  000204d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005784  0800d00c  00025784  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022c8e  00000000  00000000  00020500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004003  00000000  00000000  0004318e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  00047198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001988  00000000  00000000  00048ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056f0  00000000  00000000  0004a630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e582  00000000  00000000  0004fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001078da  00000000  00000000  0006e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00175b7c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000083a8  00000000  00000000  00175bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004d0 	.word	0x200004d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6ac 	.word	0x0800c6ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004d4 	.word	0x200004d4
 800020c:	0800c6ac 	.word	0x0800c6ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <set_position_after_reset>:
int last_state_robot1[] = {120,130,0,35,70,45,grip_open};
int last_state_robot2[] = {69,130,10,45,0,0};

bool reset = false;
void set_position_after_reset(int robot_number)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(robot_number == 1){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d114      	bne.n	8000f24 <set_position_after_reset+0x38>
		last_state_robot1[0] = 119;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <set_position_after_reset+0x70>)
 8000efc:	2277      	movs	r2, #119	; 0x77
 8000efe:	601a      	str	r2, [r3, #0]
		last_state_robot1[1] = 130;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <set_position_after_reset+0x70>)
 8000f02:	2282      	movs	r2, #130	; 0x82
 8000f04:	605a      	str	r2, [r3, #4]
		last_state_robot1[2] = 0;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <set_position_after_reset+0x70>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
		last_state_robot1[3] = 35;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <set_position_after_reset+0x70>)
 8000f0e:	2223      	movs	r2, #35	; 0x23
 8000f10:	60da      	str	r2, [r3, #12]
		last_state_robot1[4] = 100;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <set_position_after_reset+0x70>)
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	611a      	str	r2, [r3, #16]
		last_state_robot1[5] = 45;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <set_position_after_reset+0x70>)
 8000f1a:	222d      	movs	r2, #45	; 0x2d
 8000f1c:	615a      	str	r2, [r3, #20]
		last_state_robot1[6] = 115;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <set_position_after_reset+0x70>)
 8000f20:	2273      	movs	r2, #115	; 0x73
 8000f22:	619a      	str	r2, [r3, #24]
	}
	if(robot_number == 2){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d111      	bne.n	8000f4e <set_position_after_reset+0x62>
		last_state_robot2[0] = 70;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <set_position_after_reset+0x74>)
 8000f2c:	2246      	movs	r2, #70	; 0x46
 8000f2e:	601a      	str	r2, [r3, #0]
		last_state_robot2[1] = 130;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <set_position_after_reset+0x74>)
 8000f32:	2282      	movs	r2, #130	; 0x82
 8000f34:	605a      	str	r2, [r3, #4]
		last_state_robot2[2] = 10;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <set_position_after_reset+0x74>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	609a      	str	r2, [r3, #8]
		last_state_robot2[3] = 35;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <set_position_after_reset+0x74>)
 8000f3e:	2223      	movs	r2, #35	; 0x23
 8000f40:	60da      	str	r2, [r3, #12]
		last_state_robot2[4] = 0;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <set_position_after_reset+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
		last_state_robot2[5] = 0;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <set_position_after_reset+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
	}

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000017c 	.word	0x2000017c
 8000f60:	20000198 	.word	0x20000198

08000f64 <servo_init>:
void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(tim, channel);
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f004 f999 	bl	80052a8 <HAL_TIM_PWM_Start>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <servo_set_angle>:


void servo_set_angle(uint8_t angle,TIM_HandleTypeDef *tim, uint32_t channel)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2bb4      	cmp	r3, #180	; 0xb4
 8000f92:	d901      	bls.n	8000f98 <servo_set_angle+0x18>
		angle = SERVO_MAX_ANGLE;
 8000f94:	23b4      	movs	r3, #180	; 0xb4
 8000f96:	73fb      	strb	r3, [r7, #15]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US))/SERVO_MAX_ANGLE;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <servo_set_angle+0x9c>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	441a      	add	r2, r3
 8000faa:	11d2      	asrs	r2, r2, #7
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fb4:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <servo_set_angle+0x46>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fc4:	e023      	b.n	800100e <servo_set_angle+0x8e>
	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d104      	bne.n	8000fd6 <servo_set_angle+0x56>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fd4:	e01b      	b.n	800100e <servo_set_angle+0x8e>
	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d104      	bne.n	8000fe6 <servo_set_angle+0x66>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000fe4:	e013      	b.n	800100e <servo_set_angle+0x8e>
	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	d104      	bne.n	8000ff6 <servo_set_angle+0x76>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ff4:	e00b      	b.n	800100e <servo_set_angle+0x8e>
	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b10      	cmp	r3, #16
 8000ffa:	d104      	bne.n	8001006 <servo_set_angle+0x86>
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001004:	e003      	b.n	800100e <servo_set_angle+0x8e>
	__HAL_TIM_SET_COMPARE(tim, channel, pwm_duty_us);
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	b60b60b7 	.word	0xb60b60b7

08001020 <biggestDifference>:

int biggestDifference(int last_state[], int angle[], int robotNumber){
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int max = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
	int length;
	if (robotNumber == 1){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <biggestDifference+0x1c>
		length = 7;
 8001036:	2307      	movs	r3, #7
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	e004      	b.n	8001046 <biggestDifference+0x26>
	} else if (robotNumber == 2){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d101      	bne.n	8001046 <biggestDifference+0x26>
		length = 6;
 8001042:	2306      	movs	r3, #6
 8001044:	61bb      	str	r3, [r7, #24]
	}
	for(int i = 0; i < length ; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e022      	b.n	8001092 <biggestDifference+0x72>
		if(abs(last_state[i]-angle[i]) > max){
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	440b      	add	r3, r1
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	da0e      	bge.n	800108c <biggestDifference+0x6c>
			max = abs(last_state[i]-angle[i]);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	440b      	add	r3, r1
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	bfb8      	it	lt
 8001088:	425b      	neglt	r3, r3
 800108a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < length ; i++){
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbd8      	blt.n	800104c <biggestDifference+0x2c>
		}
	}
	return max;
 800109a:	69fb      	ldr	r3, [r7, #28]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3724      	adds	r7, #36	; 0x24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <isHigher>:

bool isHigher(int angle, int lastState){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	return angle > lastState;
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	bfcc      	ite	gt
 80010ba:	2301      	movgt	r3, #1
 80010bc:	2300      	movle	r3, #0
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <changeValue>:

int changeValue(int angle, int lastState){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	if(isHigher(angle, lastState)){
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffe5 	bl	80010a8 <isHigher>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <changeValue+0x20>
		lastState+=1;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	e002      	b.n	80010f2 <changeValue+0x26>
	}else{
		lastState-=1;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	603b      	str	r3, [r7, #0]
	}
	return lastState;
 80010f2:	683b      	ldr	r3, [r7, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <reverseSecondAxisAngle>:


int reverseSecondAxisAngle(int firstAngle){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	return 180 - firstAngle;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <moveServo>:


void moveServo(int angle[], int lastStateRobot[] , int robotNumber){
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	int maxDifference = biggestDifference(lastStateRobot, angle, robotNumber);
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	68f9      	ldr	r1, [r7, #12]
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f7ff ff79 	bl	8001020 <biggestDifference>
 800112e:	6138      	str	r0, [r7, #16]
	for(int i = 0; i < maxDifference; i++){
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e176      	b.n	8001424 <moveServo+0x30c>
    reset = HAL_GPIO_ReadPin(Signal_Reset_GPIO_Port, Signal_Reset_Pin);
 8001136:	2108      	movs	r1, #8
 8001138:	4898      	ldr	r0, [pc, #608]	; (800139c <moveServo+0x284>)
 800113a:	f002 fd13 	bl	8003b64 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b95      	ldr	r3, [pc, #596]	; (80013a0 <moveServo+0x288>)
 800114c:	701a      	strb	r2, [r3, #0]
    if(reset == true){
 800114e:	4b94      	ldr	r3, [pc, #592]	; (80013a0 <moveServo+0x288>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <moveServo+0x44>
      i = maxDifference;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e15d      	b.n	8001418 <moveServo+0x300>
    }else{
      if(angle[0] != lastStateRobot[0]){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d021      	beq.n	80011ac <moveServo+0x94>
			lastStateRobot[0] = changeValue(angle[0] , lastStateRobot[0]);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f7ff ffaa 	bl	80010cc <changeValue>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	601a      	str	r2, [r3, #0]
			if(robotNumber == 1){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <moveServo+0x7e>
				servo_set_angle(lastStateRobot[0], &htim1, TIM_CHANNEL_1);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2200      	movs	r2, #0
 800118c:	4985      	ldr	r1, [pc, #532]	; (80013a4 <moveServo+0x28c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fef6 	bl	8000f80 <servo_set_angle>
 8001194:	e00a      	b.n	80011ac <moveServo+0x94>
			}else if(robotNumber == 2){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d107      	bne.n	80011ac <moveServo+0x94>
				servo_set_angle(lastStateRobot[0], &htim2, TIM_CHANNEL_1);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2200      	movs	r2, #0
 80011a4:	4980      	ldr	r1, [pc, #512]	; (80013a8 <moveServo+0x290>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff feea 	bl	8000f80 <servo_set_angle>
			}
		}
		if(angle[1] != lastStateRobot[1]){
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3304      	adds	r3, #4
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3304      	adds	r3, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d03f      	beq.n	800123c <moveServo+0x124>
			lastStateRobot[1] = changeValue(angle[1] , lastStateRobot[1]);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3304      	adds	r3, #4
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3304      	adds	r3, #4
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1d1c      	adds	r4, r3, #4
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff7d 	bl	80010cc <changeValue>
 80011d2:	4603      	mov	r3, r0
 80011d4:	6023      	str	r3, [r4, #0]
			if(robotNumber == 1){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d116      	bne.n	800120a <moveServo+0xf2>
				servo_set_angle(lastStateRobot[1], &htim1, TIM_CHANNEL_2);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2204      	movs	r2, #4
 80011e6:	496f      	ldr	r1, [pc, #444]	; (80013a4 <moveServo+0x28c>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fec9 	bl	8000f80 <servo_set_angle>
				servo_set_angle(reverseSecondAxisAngle(lastStateRobot[1]), &htim1, TIM_CHANNEL_3);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff81 	bl	80010fc <reverseSecondAxisAngle>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2208      	movs	r2, #8
 8001200:	4968      	ldr	r1, [pc, #416]	; (80013a4 <moveServo+0x28c>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff febc 	bl	8000f80 <servo_set_angle>
 8001208:	e018      	b.n	800123c <moveServo+0x124>

			}else if(robotNumber == 2){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d115      	bne.n	800123c <moveServo+0x124>
				servo_set_angle(lastStateRobot[1], &htim10, TIM_CHANNEL_1);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	4964      	ldr	r1, [pc, #400]	; (80013ac <moveServo+0x294>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff feaf 	bl	8000f80 <servo_set_angle>
				servo_set_angle(reverseSecondAxisAngle(lastStateRobot[1]), &htim2, TIM_CHANNEL_3);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff67 	bl	80010fc <reverseSecondAxisAngle>
 800122e:	4603      	mov	r3, r0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2208      	movs	r2, #8
 8001234:	495c      	ldr	r1, [pc, #368]	; (80013a8 <moveServo+0x290>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea2 	bl	8000f80 <servo_set_angle>
			}
		}
		if(angle[2] != lastStateRobot[2]){
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3308      	adds	r3, #8
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3308      	adds	r3, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d026      	beq.n	800129a <moveServo+0x182>
			lastStateRobot[2] = changeValue(angle[2] , lastStateRobot[2]);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3308      	adds	r3, #8
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3308      	adds	r3, #8
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f103 0408 	add.w	r4, r3, #8
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff ff34 	bl	80010cc <changeValue>
 8001264:	4603      	mov	r3, r0
 8001266:	6023      	str	r3, [r4, #0]
			if(robotNumber == 1){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d109      	bne.n	8001282 <moveServo+0x16a>
				servo_set_angle(lastStateRobot[2], &htim1, TIM_CHANNEL_4);
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3308      	adds	r3, #8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	220c      	movs	r2, #12
 8001278:	494a      	ldr	r1, [pc, #296]	; (80013a4 <moveServo+0x28c>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe80 	bl	8000f80 <servo_set_angle>
 8001280:	e00b      	b.n	800129a <moveServo+0x182>
			}else if(robotNumber == 2){
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d108      	bne.n	800129a <moveServo+0x182>
				servo_set_angle(lastStateRobot[2], &htim9, TIM_CHANNEL_1);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3308      	adds	r3, #8
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2200      	movs	r2, #0
 8001292:	4947      	ldr	r1, [pc, #284]	; (80013b0 <moveServo+0x298>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe73 	bl	8000f80 <servo_set_angle>
			}
		}
		if(angle[3] != lastStateRobot[3]){
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	330c      	adds	r3, #12
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d026      	beq.n	80012f8 <moveServo+0x1e0>
			lastStateRobot[3] = changeValue(angle[3] , lastStateRobot[3]);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	330c      	adds	r3, #12
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	330c      	adds	r3, #12
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f103 040c 	add.w	r4, r3, #12
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff ff05 	bl	80010cc <changeValue>
 80012c2:	4603      	mov	r3, r0
 80012c4:	6023      	str	r3, [r4, #0]
			if(robotNumber == 1){
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d109      	bne.n	80012e0 <moveServo+0x1c8>
				servo_set_angle(lastStateRobot[3], &htim4, TIM_CHANNEL_1);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	330c      	adds	r3, #12
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	4937      	ldr	r1, [pc, #220]	; (80013b4 <moveServo+0x29c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe51 	bl	8000f80 <servo_set_angle>
 80012de:	e00b      	b.n	80012f8 <moveServo+0x1e0>
			}else if(robotNumber == 2){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d108      	bne.n	80012f8 <moveServo+0x1e0>
				servo_set_angle(lastStateRobot[3],&htim9, TIM_CHANNEL_2);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	330c      	adds	r3, #12
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2204      	movs	r2, #4
 80012f0:	492f      	ldr	r1, [pc, #188]	; (80013b0 <moveServo+0x298>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe44 	bl	8000f80 <servo_set_angle>
			}
		}
		if(angle[4] != lastStateRobot[4]){
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3310      	adds	r3, #16
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3310      	adds	r3, #16
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d026      	beq.n	8001356 <moveServo+0x23e>
			lastStateRobot[4] = changeValue(angle[4] , lastStateRobot[4]);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3310      	adds	r3, #16
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3310      	adds	r3, #16
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f103 0410 	add.w	r4, r3, #16
 800131a:	4610      	mov	r0, r2
 800131c:	f7ff fed6 	bl	80010cc <changeValue>
 8001320:	4603      	mov	r3, r0
 8001322:	6023      	str	r3, [r4, #0]
			if(robotNumber == 1){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d109      	bne.n	800133e <moveServo+0x226>
				servo_set_angle(lastStateRobot[4], &htim4, TIM_CHANNEL_2);
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3310      	adds	r3, #16
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2204      	movs	r2, #4
 8001334:	491f      	ldr	r1, [pc, #124]	; (80013b4 <moveServo+0x29c>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe22 	bl	8000f80 <servo_set_angle>
 800133c:	e00b      	b.n	8001356 <moveServo+0x23e>
			}else if(robotNumber == 2){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d108      	bne.n	8001356 <moveServo+0x23e>
				servo_set_angle(lastStateRobot[4], &htim14, TIM_CHANNEL_1);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3310      	adds	r3, #16
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	491a      	ldr	r1, [pc, #104]	; (80013b8 <moveServo+0x2a0>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe15 	bl	8000f80 <servo_set_angle>
			}
		}
		if(angle[5] != lastStateRobot[5]){
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3314      	adds	r3, #20
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3314      	adds	r3, #20
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d036      	beq.n	80013d4 <moveServo+0x2bc>
			lastStateRobot[5] = changeValue(angle[5] , lastStateRobot[5]);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3314      	adds	r3, #20
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3314      	adds	r3, #20
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f103 0414 	add.w	r4, r3, #20
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fea7 	bl	80010cc <changeValue>
 800137e:	4603      	mov	r3, r0
 8001380:	6023      	str	r3, [r4, #0]
			if(robotNumber == 1){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d119      	bne.n	80013bc <moveServo+0x2a4>
				servo_set_angle(lastStateRobot[5], &htim4, TIM_CHANNEL_3);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3314      	adds	r3, #20
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2208      	movs	r2, #8
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <moveServo+0x29c>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fdf3 	bl	8000f80 <servo_set_angle>
 800139a:	e01b      	b.n	80013d4 <moveServo+0x2bc>
 800139c:	40020800 	.word	0x40020800
 80013a0:	20000dcc 	.word	0x20000dcc
 80013a4:	200005d4 	.word	0x200005d4
 80013a8:	20000620 	.word	0x20000620
 80013ac:	20000704 	.word	0x20000704
 80013b0:	200006b8 	.word	0x200006b8
 80013b4:	2000066c 	.word	0x2000066c
 80013b8:	200007e8 	.word	0x200007e8
			}else if(robotNumber == 2){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d108      	bne.n	80013d4 <moveServo+0x2bc>
				servo_set_angle(lastStateRobot[5], &htim13, TIM_CHANNEL_1);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3314      	adds	r3, #20
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2200      	movs	r2, #0
 80013cc:	491a      	ldr	r1, [pc, #104]	; (8001438 <moveServo+0x320>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fdd6 	bl	8000f80 <servo_set_angle>
			}
		}
		if(robotNumber == 1 && (angle[6] != lastStateRobot[6])){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d11e      	bne.n	8001418 <moveServo+0x300>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3318      	adds	r3, #24
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3318      	adds	r3, #24
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d016      	beq.n	8001418 <moveServo+0x300>
					lastStateRobot[6] = changeValue(angle[6] , lastStateRobot[6]);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3318      	adds	r3, #24
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3318      	adds	r3, #24
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f103 0418 	add.w	r4, r3, #24
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff fe65 	bl	80010cc <changeValue>
 8001402:	4603      	mov	r3, r0
 8001404:	6023      	str	r3, [r4, #0]
					servo_set_angle(lastStateRobot[6], &htim4, TIM_CHANNEL_4);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3318      	adds	r3, #24
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	220c      	movs	r2, #12
 8001410:	490a      	ldr	r1, [pc, #40]	; (800143c <moveServo+0x324>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdb4 	bl	8000f80 <servo_set_angle>
				}
    }
		osDelay(5);
 8001418:	2005      	movs	r0, #5
 800141a:	f005 ff47 	bl	80072ac <osDelay>
	for(int i = 0; i < maxDifference; i++){
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	f6ff ae84 	blt.w	8001136 <moveServo+0x1e>
	}
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	2000079c 	.word	0x2000079c
 800143c:	2000066c 	.word	0x2000066c

08001440 <setHomePosition>:


void setHomePosition(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	servo_set_angle(home_posision[0], &htim1, TIM_CHANNEL_1);
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <setHomePosition+0x90>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2200      	movs	r2, #0
 800144c:	4921      	ldr	r1, [pc, #132]	; (80014d4 <setHomePosition+0x94>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd96 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[1],&htim1, TIM_CHANNEL_2);
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <setHomePosition+0x90>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2204      	movs	r2, #4
 800145c:	491d      	ldr	r1, [pc, #116]	; (80014d4 <setHomePosition+0x94>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd8e 	bl	8000f80 <servo_set_angle>
	servo_set_angle(reverseSecondAxisAngle(home_posision[1]),&htim1, TIM_CHANNEL_3);
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <setHomePosition+0x90>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe47 	bl	80010fc <reverseSecondAxisAngle>
 800146e:	4603      	mov	r3, r0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2208      	movs	r2, #8
 8001474:	4917      	ldr	r1, [pc, #92]	; (80014d4 <setHomePosition+0x94>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fd82 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[2], &htim1, TIM_CHANNEL_4);
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <setHomePosition+0x90>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	220c      	movs	r2, #12
 8001484:	4913      	ldr	r1, [pc, #76]	; (80014d4 <setHomePosition+0x94>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fd7a 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[3], &htim4, TIM_CHANNEL_1);
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <setHomePosition+0x90>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2200      	movs	r2, #0
 8001494:	4910      	ldr	r1, [pc, #64]	; (80014d8 <setHomePosition+0x98>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd72 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[4], &htim4, TIM_CHANNEL_2);
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <setHomePosition+0x90>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2204      	movs	r2, #4
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <setHomePosition+0x98>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fd6a 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[5], &htim4, TIM_CHANNEL_3);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <setHomePosition+0x90>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2208      	movs	r2, #8
 80014b4:	4908      	ldr	r1, [pc, #32]	; (80014d8 <setHomePosition+0x98>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd62 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision[6], &htim4, TIM_CHANNEL_4);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <setHomePosition+0x90>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	220c      	movs	r2, #12
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <setHomePosition+0x98>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd5a 	bl	8000f80 <servo_set_angle>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	200005d4 	.word	0x200005d4
 80014d8:	2000066c 	.word	0x2000066c

080014dc <setHomePositionR2>:
void setHomePositionR2(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	servo_set_angle(home_posision_R2[0],&htim2, TIM_CHANNEL_1);
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <setHomePositionR2+0x80>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2200      	movs	r2, #0
 80014e8:	491d      	ldr	r1, [pc, #116]	; (8001560 <setHomePositionR2+0x84>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd48 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision_R2[1], &htim10, TIM_CHANNEL_1);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <setHomePositionR2+0x80>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2200      	movs	r2, #0
 80014f8:	491a      	ldr	r1, [pc, #104]	; (8001564 <setHomePositionR2+0x88>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fd40 	bl	8000f80 <servo_set_angle>
	servo_set_angle(reverseSecondAxisAngle(home_posision_R2[1]), &htim2, TIM_CHANNEL_3);
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <setHomePositionR2+0x80>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fdf9 	bl	80010fc <reverseSecondAxisAngle>
 800150a:	4603      	mov	r3, r0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2208      	movs	r2, #8
 8001510:	4913      	ldr	r1, [pc, #76]	; (8001560 <setHomePositionR2+0x84>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fd34 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision_R2[2], &htim9, TIM_CHANNEL_1);
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <setHomePositionR2+0x80>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2200      	movs	r2, #0
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <setHomePositionR2+0x8c>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fd2c 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision_R2[3], &htim9, TIM_CHANNEL_2);
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <setHomePositionR2+0x80>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2204      	movs	r2, #4
 8001530:	490d      	ldr	r1, [pc, #52]	; (8001568 <setHomePositionR2+0x8c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd24 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision_R2[4], &htim14, TIM_CHANNEL_1);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <setHomePositionR2+0x80>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2200      	movs	r2, #0
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <setHomePositionR2+0x90>)
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd1c 	bl	8000f80 <servo_set_angle>
	servo_set_angle(home_posision_R2[5], &htim13, TIM_CHANNEL_1);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <setHomePositionR2+0x80>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <setHomePositionR2+0x94>)
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fd14 	bl	8000f80 <servo_set_angle>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000134 	.word	0x20000134
 8001560:	20000620 	.word	0x20000620
 8001564:	20000704 	.word	0x20000704
 8001568:	200006b8 	.word	0x200006b8
 800156c:	200007e8 	.word	0x200007e8
 8001570:	2000079c 	.word	0x2000079c

08001574 <general_cycle_of_work>:
void general_cycle_of_work(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  if(reset == 0) moveServo(move_to_part1, last_state_robot1, 1);
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <general_cycle_of_work+0x148>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <general_cycle_of_work+0x1c>
 8001586:	2201      	movs	r2, #1
 8001588:	494d      	ldr	r1, [pc, #308]	; (80016c0 <general_cycle_of_work+0x14c>)
 800158a:	484e      	ldr	r0, [pc, #312]	; (80016c4 <general_cycle_of_work+0x150>)
 800158c:	f7ff fdc4 	bl	8001118 <moveServo>
  if(reset == 0) moveServo(move_to_part2, last_state_robot1, 1);
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <general_cycle_of_work+0x148>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <general_cycle_of_work+0x34>
 800159e:	2201      	movs	r2, #1
 80015a0:	4947      	ldr	r1, [pc, #284]	; (80016c0 <general_cycle_of_work+0x14c>)
 80015a2:	4849      	ldr	r0, [pc, #292]	; (80016c8 <general_cycle_of_work+0x154>)
 80015a4:	f7ff fdb8 	bl	8001118 <moveServo>
  if(reset == 0) osDelay(200);
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <general_cycle_of_work+0x148>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <general_cycle_of_work+0x48>
 80015b6:	20c8      	movs	r0, #200	; 0xc8
 80015b8:	f005 fe78 	bl	80072ac <osDelay>
  if(reset == 0) moveServo(close_gripper_next_to_part2, last_state_robot1, 1);
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <general_cycle_of_work+0x148>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f083 0301 	eor.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <general_cycle_of_work+0x60>
 80015ca:	2201      	movs	r2, #1
 80015cc:	493c      	ldr	r1, [pc, #240]	; (80016c0 <general_cycle_of_work+0x14c>)
 80015ce:	483f      	ldr	r0, [pc, #252]	; (80016cc <general_cycle_of_work+0x158>)
 80015d0:	f7ff fda2 	bl	8001118 <moveServo>
  if(reset == 0) osDelay(500);
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <general_cycle_of_work+0x148>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f083 0301 	eor.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <general_cycle_of_work+0x76>
 80015e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e6:	f005 fe61 	bl	80072ac <osDelay>
  if(reset == 0) moveServo(move_up_with_part, last_state_robot1, 1);
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <general_cycle_of_work+0x148>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <general_cycle_of_work+0x8e>
 80015f8:	2201      	movs	r2, #1
 80015fa:	4931      	ldr	r1, [pc, #196]	; (80016c0 <general_cycle_of_work+0x14c>)
 80015fc:	4834      	ldr	r0, [pc, #208]	; (80016d0 <general_cycle_of_work+0x15c>)
 80015fe:	f7ff fd8b 	bl	8001118 <moveServo>
  if(reset == 0) moveServo(move_to_drop, last_state_robot1, 1);
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <general_cycle_of_work+0x148>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <general_cycle_of_work+0xa6>
 8001610:	2201      	movs	r2, #1
 8001612:	492b      	ldr	r1, [pc, #172]	; (80016c0 <general_cycle_of_work+0x14c>)
 8001614:	482f      	ldr	r0, [pc, #188]	; (80016d4 <general_cycle_of_work+0x160>)
 8001616:	f7ff fd7f 	bl	8001118 <moveServo>
  if(reset == 0) moveServo(move_down_to_drop, last_state_robot1, 1);
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <general_cycle_of_work+0x148>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <general_cycle_of_work+0xbe>
 8001628:	2201      	movs	r2, #1
 800162a:	4925      	ldr	r1, [pc, #148]	; (80016c0 <general_cycle_of_work+0x14c>)
 800162c:	482a      	ldr	r0, [pc, #168]	; (80016d8 <general_cycle_of_work+0x164>)
 800162e:	f7ff fd73 	bl	8001118 <moveServo>
  if(reset == 0) osDelay(500);
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <general_cycle_of_work+0x148>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <general_cycle_of_work+0xd4>
 8001640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001644:	f005 fe32 	bl	80072ac <osDelay>
  if(reset == 0) moveServo(open_gripper_to_drop, last_state_robot1, 1);
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <general_cycle_of_work+0x148>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <general_cycle_of_work+0xec>
 8001656:	2201      	movs	r2, #1
 8001658:	4919      	ldr	r1, [pc, #100]	; (80016c0 <general_cycle_of_work+0x14c>)
 800165a:	4820      	ldr	r0, [pc, #128]	; (80016dc <general_cycle_of_work+0x168>)
 800165c:	f7ff fd5c 	bl	8001118 <moveServo>
  if(reset == 0) moveServo(move_up_without_part, last_state_robot1, 1);
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <general_cycle_of_work+0x148>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <general_cycle_of_work+0x104>
 800166e:	2201      	movs	r2, #1
 8001670:	4913      	ldr	r1, [pc, #76]	; (80016c0 <general_cycle_of_work+0x14c>)
 8001672:	481b      	ldr	r0, [pc, #108]	; (80016e0 <general_cycle_of_work+0x16c>)
 8001674:	f7ff fd50 	bl	8001118 <moveServo>
  if(reset == 0) moveServo(home_posision, last_state_robot1, 1);
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <general_cycle_of_work+0x148>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <general_cycle_of_work+0x11c>
 8001686:	2201      	movs	r2, #1
 8001688:	490d      	ldr	r1, [pc, #52]	; (80016c0 <general_cycle_of_work+0x14c>)
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <general_cycle_of_work+0x170>)
 800168c:	f7ff fd44 	bl	8001118 <moveServo>
  if(reset == 0) osDelay(300);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <general_cycle_of_work+0x148>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <general_cycle_of_work+0x132>
 800169e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016a2:	f005 fe03 	bl	80072ac <osDelay>
  if(reset == 1) {
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <general_cycle_of_work+0x148>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <general_cycle_of_work+0x144>
     setHomePosition();
 80016ae:	f7ff fec7 	bl	8001440 <setHomePosition>
     set_position_after_reset(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fc1a 	bl	8000eec <set_position_after_reset>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000dcc 	.word	0x20000dcc
 80016c0:	2000017c 	.word	0x2000017c
 80016c4:	2000001c 	.word	0x2000001c
 80016c8:	20000038 	.word	0x20000038
 80016cc:	20000054 	.word	0x20000054
 80016d0:	20000070 	.word	0x20000070
 80016d4:	2000008c 	.word	0x2000008c
 80016d8:	200000a8 	.word	0x200000a8
 80016dc:	200000c4 	.word	0x200000c4
 80016e0:	200000e0 	.word	0x200000e0
 80016e4:	20000000 	.word	0x20000000

080016e8 <general_cycle_of_work_R2>:

void general_cycle_of_work_R2(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if(reset == 0) moveServo(home_posision_R2, last_state_robot2,2);
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <general_cycle_of_work_R2+0x1c>
 80016fa:	2202      	movs	r2, #2
 80016fc:	4938      	ldr	r1, [pc, #224]	; (80017e0 <general_cycle_of_work_R2+0xf8>)
 80016fe:	4839      	ldr	r0, [pc, #228]	; (80017e4 <general_cycle_of_work_R2+0xfc>)
 8001700:	f7ff fd0a 	bl	8001118 <moveServo>
	if(reset == 0) moveServo(work_posision_R2, last_state_robot2,2);
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <general_cycle_of_work_R2+0x34>
 8001712:	2202      	movs	r2, #2
 8001714:	4932      	ldr	r1, [pc, #200]	; (80017e0 <general_cycle_of_work_R2+0xf8>)
 8001716:	4834      	ldr	r0, [pc, #208]	; (80017e8 <general_cycle_of_work_R2+0x100>)
 8001718:	f7ff fcfe 	bl	8001118 <moveServo>
	if(reset == 0) osDelay(250);
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f083 0301 	eor.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <general_cycle_of_work_R2+0x48>
 800172a:	20fa      	movs	r0, #250	; 0xfa
 800172c:	f005 fdbe 	bl	80072ac <osDelay>
	if(reset == 0) HAL_GPIO_WritePin(zawor_GPIO_Port, zawor_Pin, 1);
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <general_cycle_of_work_R2+0x60>
 800173e:	2201      	movs	r2, #1
 8001740:	2101      	movs	r1, #1
 8001742:	482a      	ldr	r0, [pc, #168]	; (80017ec <general_cycle_of_work_R2+0x104>)
 8001744:	f002 fa26 	bl	8003b94 <HAL_GPIO_WritePin>
	if(reset == 0) moveServo(spray_posision_R2,last_state_robot2,2);
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <general_cycle_of_work_R2+0x78>
 8001756:	2202      	movs	r2, #2
 8001758:	4921      	ldr	r1, [pc, #132]	; (80017e0 <general_cycle_of_work_R2+0xf8>)
 800175a:	4825      	ldr	r0, [pc, #148]	; (80017f0 <general_cycle_of_work_R2+0x108>)
 800175c:	f7ff fcdc 	bl	8001118 <moveServo>
	if(reset == 0) moveServo(work_posision_R2, last_state_robot2,2);
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <general_cycle_of_work_R2+0x90>
 800176e:	2202      	movs	r2, #2
 8001770:	491b      	ldr	r1, [pc, #108]	; (80017e0 <general_cycle_of_work_R2+0xf8>)
 8001772:	481d      	ldr	r0, [pc, #116]	; (80017e8 <general_cycle_of_work_R2+0x100>)
 8001774:	f7ff fcd0 	bl	8001118 <moveServo>
	if(reset == 0) osDelay(250);
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <general_cycle_of_work_R2+0xa4>
 8001786:	20fa      	movs	r0, #250	; 0xfa
 8001788:	f005 fd90 	bl	80072ac <osDelay>
	if(reset == 0) HAL_GPIO_WritePin(zawor_GPIO_Port, zawor_Pin, 0);
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f083 0301 	eor.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <general_cycle_of_work_R2+0xbc>
 800179a:	2200      	movs	r2, #0
 800179c:	2101      	movs	r1, #1
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <general_cycle_of_work_R2+0x104>)
 80017a0:	f002 f9f8 	bl	8003b94 <HAL_GPIO_WritePin>
	if(reset == 0) moveServo(home_posision_R2, last_state_robot2,2);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <general_cycle_of_work_R2+0xd4>
 80017b2:	2202      	movs	r2, #2
 80017b4:	490a      	ldr	r1, [pc, #40]	; (80017e0 <general_cycle_of_work_R2+0xf8>)
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <general_cycle_of_work_R2+0xfc>)
 80017b8:	f7ff fcae 	bl	8001118 <moveServo>
	if(reset == 1){
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <general_cycle_of_work_R2+0xf4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <general_cycle_of_work_R2+0xf0>
		setHomePositionR2();
 80017c4:	f7ff fe8a 	bl	80014dc <setHomePositionR2>
		set_position_after_reset(2);
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff fb8f 	bl	8000eec <set_position_after_reset>
		HAL_GPIO_WritePin(zawor_GPIO_Port, zawor_Pin, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <general_cycle_of_work_R2+0x104>)
 80017d4:	f002 f9de 	bl	8003b94 <HAL_GPIO_WritePin>
	}
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000dcc 	.word	0x20000dcc
 80017e0:	20000198 	.word	0x20000198
 80017e4:	20000134 	.word	0x20000134
 80017e8:	2000014c 	.word	0x2000014c
 80017ec:	40021000 	.word	0x40021000
 80017f0:	20000164 	.word	0x20000164

080017f4 <test>:

void test(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	moveServo(test1, last_state_robot1, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	491b      	ldr	r1, [pc, #108]	; (8001868 <test+0x74>)
 80017fc:	481b      	ldr	r0, [pc, #108]	; (800186c <test+0x78>)
 80017fe:	f7ff fc8b 	bl	8001118 <moveServo>
	osDelay(250);
 8001802:	20fa      	movs	r0, #250	; 0xfa
 8001804:	f005 fd52 	bl	80072ac <osDelay>
	moveServo(test2, last_state_robot1, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4917      	ldr	r1, [pc, #92]	; (8001868 <test+0x74>)
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <test+0x7c>)
 800180e:	f7ff fc83 	bl	8001118 <moveServo>
	osDelay(250);
 8001812:	20fa      	movs	r0, #250	; 0xfa
 8001814:	f005 fd4a 	bl	80072ac <osDelay>
	moveServo(test1, last_state_robot1, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	4913      	ldr	r1, [pc, #76]	; (8001868 <test+0x74>)
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <test+0x78>)
 800181e:	f7ff fc7b 	bl	8001118 <moveServo>
	osDelay(250);
 8001822:	20fa      	movs	r0, #250	; 0xfa
 8001824:	f005 fd42 	bl	80072ac <osDelay>
	moveServo(test2, last_state_robot1, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <test+0x74>)
 800182c:	4810      	ldr	r0, [pc, #64]	; (8001870 <test+0x7c>)
 800182e:	f7ff fc73 	bl	8001118 <moveServo>
	osDelay(250);
 8001832:	20fa      	movs	r0, #250	; 0xfa
 8001834:	f005 fd3a 	bl	80072ac <osDelay>
	moveServo(test1, last_state_robot1, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	490b      	ldr	r1, [pc, #44]	; (8001868 <test+0x74>)
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <test+0x78>)
 800183e:	f7ff fc6b 	bl	8001118 <moveServo>
	osDelay(250);
 8001842:	20fa      	movs	r0, #250	; 0xfa
 8001844:	f005 fd32 	bl	80072ac <osDelay>
	moveServo(test2, last_state_robot1, 1);
 8001848:	2201      	movs	r2, #1
 800184a:	4907      	ldr	r1, [pc, #28]	; (8001868 <test+0x74>)
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <test+0x7c>)
 800184e:	f7ff fc63 	bl	8001118 <moveServo>
	osDelay(250);
 8001852:	20fa      	movs	r0, #250	; 0xfa
 8001854:	f005 fd2a 	bl	80072ac <osDelay>
	moveServo(test1, last_state_robot1, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	4903      	ldr	r1, [pc, #12]	; (8001868 <test+0x74>)
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <test+0x78>)
 800185e:	f7ff fc5b 	bl	8001118 <moveServo>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000017c 	.word	0x2000017c
 800186c:	200000fc 	.word	0x200000fc
 8001870:	20000118 	.word	0x20000118

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001878:	f001 fb6e 	bl	8002f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187c:	f000 f884 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001880:	f000 fcc0 	bl	8002204 <MX_GPIO_Init>
  MX_ETH_Init();
 8001884:	f000 f8e8 	bl	8001a58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001888:	f000 fc5e 	bl	8002148 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800188c:	f000 fc8c 	bl	80021a8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001890:	f000 f9e4 	bl	8001c5c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001894:	f000 f92e 	bl	8001af4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001898:	f000 fa50 	bl	8001d3c <MX_TIM4_Init>
  MX_TIM9_Init();
 800189c:	f000 faca 	bl	8001e34 <MX_TIM9_Init>
  MX_TIM13_Init();
 80018a0:	f000 fbb6 	bl	8002010 <MX_TIM13_Init>
  MX_TIM14_Init();
 80018a4:	f000 fc02 	bl	80020ac <MX_TIM14_Init>
  MX_TIM11_Init();
 80018a8:	f000 fb64 	bl	8001f74 <MX_TIM11_Init>
  MX_TIM10_Init();
 80018ac:	f000 fb14 	bl	8001ed8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  //===========ROBOT I - inicjalizacja ===================
  servo_init(&htim1, TIM_CHANNEL_1);
 80018b0:	2100      	movs	r1, #0
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <main+0xe0>)
 80018b4:	f7ff fb56 	bl	8000f64 <servo_init>
  servo_init(&htim1, TIM_CHANNEL_2);
 80018b8:	2104      	movs	r1, #4
 80018ba:	4826      	ldr	r0, [pc, #152]	; (8001954 <main+0xe0>)
 80018bc:	f7ff fb52 	bl	8000f64 <servo_init>
  servo_init(&htim1, TIM_CHANNEL_3);
 80018c0:	2108      	movs	r1, #8
 80018c2:	4824      	ldr	r0, [pc, #144]	; (8001954 <main+0xe0>)
 80018c4:	f7ff fb4e 	bl	8000f64 <servo_init>
  servo_init(&htim1, TIM_CHANNEL_4);
 80018c8:	210c      	movs	r1, #12
 80018ca:	4822      	ldr	r0, [pc, #136]	; (8001954 <main+0xe0>)
 80018cc:	f7ff fb4a 	bl	8000f64 <servo_init>
  servo_init(&htim4, TIM_CHANNEL_1);
 80018d0:	2100      	movs	r1, #0
 80018d2:	4821      	ldr	r0, [pc, #132]	; (8001958 <main+0xe4>)
 80018d4:	f7ff fb46 	bl	8000f64 <servo_init>
  servo_init(&htim4, TIM_CHANNEL_2);
 80018d8:	2104      	movs	r1, #4
 80018da:	481f      	ldr	r0, [pc, #124]	; (8001958 <main+0xe4>)
 80018dc:	f7ff fb42 	bl	8000f64 <servo_init>
  servo_init(&htim4, TIM_CHANNEL_3);
 80018e0:	2108      	movs	r1, #8
 80018e2:	481d      	ldr	r0, [pc, #116]	; (8001958 <main+0xe4>)
 80018e4:	f7ff fb3e 	bl	8000f64 <servo_init>
  servo_init(&htim4, TIM_CHANNEL_4);
 80018e8:	210c      	movs	r1, #12
 80018ea:	481b      	ldr	r0, [pc, #108]	; (8001958 <main+0xe4>)
 80018ec:	f7ff fb3a 	bl	8000f64 <servo_init>

  //==========ROBOT II - inicjalizacja ======================
  servo_init(&htim10, TIM_CHANNEL_1);
 80018f0:	2100      	movs	r1, #0
 80018f2:	481a      	ldr	r0, [pc, #104]	; (800195c <main+0xe8>)
 80018f4:	f7ff fb36 	bl	8000f64 <servo_init>
  servo_init(&htim2, TIM_CHANNEL_1);
 80018f8:	2100      	movs	r1, #0
 80018fa:	4819      	ldr	r0, [pc, #100]	; (8001960 <main+0xec>)
 80018fc:	f7ff fb32 	bl	8000f64 <servo_init>
  servo_init(&htim2, TIM_CHANNEL_3);
 8001900:	2108      	movs	r1, #8
 8001902:	4817      	ldr	r0, [pc, #92]	; (8001960 <main+0xec>)
 8001904:	f7ff fb2e 	bl	8000f64 <servo_init>
  servo_init(&htim9, TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	4816      	ldr	r0, [pc, #88]	; (8001964 <main+0xf0>)
 800190c:	f7ff fb2a 	bl	8000f64 <servo_init>
  servo_init(&htim9, TIM_CHANNEL_2);
 8001910:	2104      	movs	r1, #4
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <main+0xf0>)
 8001914:	f7ff fb26 	bl	8000f64 <servo_init>
  servo_init(&htim14, TIM_CHANNEL_1);
 8001918:	2100      	movs	r1, #0
 800191a:	4813      	ldr	r0, [pc, #76]	; (8001968 <main+0xf4>)
 800191c:	f7ff fb22 	bl	8000f64 <servo_init>
  servo_init(&htim13, TIM_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <main+0xf8>)
 8001924:	f7ff fb1e 	bl	8000f64 <servo_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001928:	f005 fbb0 	bl	800708c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_1 */
  task_1Handle = osThreadNew(start_task_1, NULL, &task_1_attributes);
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <main+0xfc>)
 800192e:	2100      	movs	r1, #0
 8001930:	4810      	ldr	r0, [pc, #64]	; (8001974 <main+0x100>)
 8001932:	f005 fc15 	bl	8007160 <osThreadNew>
 8001936:	4603      	mov	r3, r0
 8001938:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <main+0x104>)
 800193a:	6013      	str	r3, [r2, #0]

  /* creation of task_2 */
  task_2Handle = osThreadNew(start_task_2, NULL, &task_2_attributes);
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <main+0x108>)
 800193e:	2100      	movs	r1, #0
 8001940:	480f      	ldr	r0, [pc, #60]	; (8001980 <main+0x10c>)
 8001942:	f005 fc0d 	bl	8007160 <osThreadNew>
 8001946:	4603      	mov	r3, r0
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <main+0x110>)
 800194a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800194c:	f005 fbd2 	bl	80070f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001950:	e7fe      	b.n	8001950 <main+0xdc>
 8001952:	bf00      	nop
 8001954:	200005d4 	.word	0x200005d4
 8001958:	2000066c 	.word	0x2000066c
 800195c:	20000704 	.word	0x20000704
 8001960:	20000620 	.word	0x20000620
 8001964:	200006b8 	.word	0x200006b8
 8001968:	200007e8 	.word	0x200007e8
 800196c:	2000079c 	.word	0x2000079c
 8001970:	0800c6f0 	.word	0x0800c6f0
 8001974:	080023b9 	.word	0x080023b9
 8001978:	20000dc4 	.word	0x20000dc4
 800197c:	0800c714 	.word	0x0800c714
 8001980:	0800240d 	.word	0x0800240d
 8001984:	20000dc8 	.word	0x20000dc8

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	; 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f008 f978 	bl	8009c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019ac:	f002 fa54 	bl	8003e58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <SystemClock_Config+0xc8>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <SystemClock_Config+0xc8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <SystemClock_Config+0xc8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <SystemClock_Config+0xcc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d0:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <SystemClock_Config+0xcc>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <SystemClock_Config+0xcc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019fc:	2348      	movs	r3, #72	; 0x48
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a04:	2303      	movs	r3, #3
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fa33 	bl	8003e78 <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a18:	f000 fd32 	bl	8002480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2102      	movs	r1, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fcc5 	bl	80043c8 <HAL_RCC_ClockConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a44:	f000 fd1c 	bl	8002480 <Error_Handler>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3750      	adds	r7, #80	; 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <MX_ETH_Init+0x84>)
 8001a5e:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <MX_ETH_Init+0x88>)
 8001a60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a70:	22e1      	movs	r2, #225	; 0xe1
 8001a72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_ETH_Init+0x84>)
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_ETH_Init+0x84>)
 8001a8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a92:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_ETH_Init+0x84>)
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <MX_ETH_Init+0x90>)
 8001a98:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_ETH_Init+0x84>)
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_ETH_Init+0x94>)
 8001a9e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_ETH_Init+0x84>)
 8001aa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aa6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_ETH_Init+0x84>)
 8001aaa:	f001 fb89 	bl	80031c0 <HAL_ETH_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001ab4:	f000 fce4 	bl	8002480 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ab8:	2238      	movs	r2, #56	; 0x38
 8001aba:	2100      	movs	r1, #0
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_ETH_Init+0x98>)
 8001abe:	f008 f8e5 	bl	8009c8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_ETH_Init+0x98>)
 8001ac4:	2221      	movs	r2, #33	; 0x21
 8001ac6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_ETH_Init+0x98>)
 8001aca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ace:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_ETH_Init+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000524 	.word	0x20000524
 8001ae0:	40028000 	.word	0x40028000
 8001ae4:	20000dd0 	.word	0x20000dd0
 8001ae8:	20000430 	.word	0x20000430
 8001aec:	20000390 	.word	0x20000390
 8001af0:	200004ec 	.word	0x200004ec

08001af4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b096      	sub	sp, #88	; 0x58
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	222c      	movs	r2, #44	; 0x2c
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f008 f8b3 	bl	8009c8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <MX_TIM1_Init+0x164>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b2e:	2247      	movs	r2, #71	; 0x47
 8001b30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b3a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b52:	4840      	ldr	r0, [pc, #256]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b54:	f003 fb50 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b5e:	f000 fc8f 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b72:	4619      	mov	r1, r3
 8001b74:	4837      	ldr	r0, [pc, #220]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001b76:	f004 fa11 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b80:	f000 fc7e 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482a      	ldr	r0, [pc, #168]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001bac:	f003 fd96 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bb6:	f000 fc63 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4824      	ldr	r0, [pc, #144]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001bc4:	f003 fd8a 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001bce:	f000 fc57 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481e      	ldr	r0, [pc, #120]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001bdc:	f003 fd7e 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001be6:	f000 fc4b 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bee:	220c      	movs	r2, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4818      	ldr	r0, [pc, #96]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001bf4:	f003 fd72 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001bfe:	f000 fc3f 	bl	8002480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001c38:	f004 fa3e 	bl	80060b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001c42:	f000 fc1d 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM1_Init+0x160>)
 8001c48:	f000 fdb6 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8001c4c:	bf00      	nop
 8001c4e:	3758      	adds	r7, #88	; 0x58
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200005d4 	.word	0x200005d4
 8001c58:	40010000 	.word	0x40010000

08001c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001c8a:	2247      	movs	r2, #71	; 0x47
 8001c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001c96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca8:	4823      	ldr	r0, [pc, #140]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001caa:	f003 faa5 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001cb4:	f000 fbe4 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	481c      	ldr	r0, [pc, #112]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001cc8:	f004 f968 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cd2:	f000 fbd5 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001cf0:	f003 fcf4 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001cfa:	f000 fbc1 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2208      	movs	r2, #8
 8001d02:	4619      	mov	r1, r3
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001d06:	f003 fce9 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001d10:	f000 fbb6 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	220c      	movs	r2, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001d1c:	f003 fcde 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8001d26:	f000 fbab 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM2_Init+0xdc>)
 8001d2c:	f000 fd44 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000620 	.word	0x20000620

08001d3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <MX_TIM4_Init+0xf4>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d68:	2247      	movs	r2, #71	; 0x47
 8001d6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d74:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d86:	4829      	ldr	r0, [pc, #164]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001d88:	f003 fa36 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d92:	f000 fb75 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	4821      	ldr	r0, [pc, #132]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001da6:	f004 f8f9 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001db0:	f000 fb66 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001dce:	f003 fc85 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001dd8:	f000 fb52 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2204      	movs	r2, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4812      	ldr	r0, [pc, #72]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001de4:	f003 fc7a 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001dee:	f000 fb47 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df2:	463b      	mov	r3, r7
 8001df4:	2208      	movs	r2, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001dfa:	f003 fc6f 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001e04:	f000 fb3c 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001e10:	f003 fc64 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8001e1a:	f000 fb31 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <MX_TIM4_Init+0xf0>)
 8001e20:	f000 fcca 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000066c 	.word	0x2000066c
 8001e30:	40000800 	.word	0x40000800

08001e34 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <MX_TIM9_Init+0xa0>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e54:	2247      	movs	r2, #71	; 0x47
 8001e56:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e60:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e64:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e74:	f003 f9c0 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001e7e:	f000 faff 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001e9c:	f003 fc1e 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8001ea6:	f000 faeb 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2204      	movs	r2, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001eb2:	f003 fc13 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001ebc:	f000 fae0 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <MX_TIM9_Init+0x9c>)
 8001ec2:	f000 fc79 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200006b8 	.word	0x200006b8
 8001ed4:	40014000 	.word	0x40014000

08001ed8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <MX_TIM10_Init+0x98>)
 8001ef4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001ef8:	2247      	movs	r2, #71	; 0x47
 8001efa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 19999;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f08:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f16:	4815      	ldr	r0, [pc, #84]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f18:	f003 f89e 	bl	8005058 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001f22:	f000 faad 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001f26:	4811      	ldr	r0, [pc, #68]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f28:	f003 f966 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001f32:	f000 faa5 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f36:	2360      	movs	r3, #96	; 0x60
 8001f38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f50:	f003 fbc4 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001f5a:	f000 fa91 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM10_Init+0x94>)
 8001f60:	f000 fc2a 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000704 	.word	0x20000704
 8001f70:	40014400 	.word	0x40014400

08001f74 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_TIM11_Init+0x94>)
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <MX_TIM11_Init+0x98>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 71;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_TIM11_Init+0x94>)
 8001f94:	2247      	movs	r2, #71	; 0x47
 8001f96:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_TIM11_Init+0x94>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 19999;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fa0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001fa4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fb2:	4815      	ldr	r0, [pc, #84]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fb4:	f003 f850 	bl	8005058 <HAL_TIM_Base_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001fbe:	f000 fa5f 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001fc2:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fc4:	f003 f918 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001fce:	f000 fa57 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <MX_TIM11_Init+0x94>)
 8001fec:	f003 fb76 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8001ff6:	f000 fa43 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <MX_TIM11_Init+0x94>)
 8001ffc:	f000 fbdc 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000750 	.word	0x20000750
 800200c:	40014800 	.word	0x40014800

08002010 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_TIM13_Init+0x94>)
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <MX_TIM13_Init+0x98>)
 800202c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 71;
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002030:	2247      	movs	r2, #71	; 0x47
 8002032:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM13_Init+0x94>)
 800203c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002040:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_TIM13_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800204e:	4815      	ldr	r0, [pc, #84]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002050:	f003 f802 	bl	8005058 <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800205a:	f000 fa11 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800205e:	4811      	ldr	r0, [pc, #68]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002060:	f003 f8ca 	bl	80051f8 <HAL_TIM_PWM_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800206a:	f000 fa09 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800206e:	2360      	movs	r3, #96	; 0x60
 8002070:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2200      	movs	r2, #0
 8002084:	4619      	mov	r1, r3
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002088:	f003 fb28 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002092:	f000 f9f5 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002096:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM13_Init+0x94>)
 8002098:	f000 fb8e 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000079c 	.word	0x2000079c
 80020a8:	40001c00 	.word	0x40001c00

080020ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	615a      	str	r2, [r3, #20]
 80020c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <MX_TIM14_Init+0x94>)
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <MX_TIM14_Init+0x98>)
 80020c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 71;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_TIM14_Init+0x94>)
 80020cc:	2247      	movs	r2, #71	; 0x47
 80020ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_TIM14_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_TIM14_Init+0x94>)
 80020d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_TIM14_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_TIM14_Init+0x94>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020ea:	4815      	ldr	r0, [pc, #84]	; (8002140 <MX_TIM14_Init+0x94>)
 80020ec:	f002 ffb4 	bl	8005058 <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020f6:	f000 f9c3 	bl	8002480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <MX_TIM14_Init+0x94>)
 80020fc:	f003 f87c 	bl	80051f8 <HAL_TIM_PWM_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002106:	f000 f9bb 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800210e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM14_Init+0x94>)
 8002124:	f003 fada 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800212e:	f000 f9a7 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM14_Init+0x94>)
 8002134:	f000 fb40 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200007e8 	.word	0x200007e8
 8002144:	40002000 	.word	0x40002000

08002148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 800214e:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <MX_USART3_UART_Init+0x5c>)
 8002150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 800216e:	220c      	movs	r2, #12
 8002170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_USART3_UART_Init+0x58>)
 800218c:	f004 f830 	bl	80061f0 <HAL_UART_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002196:	f000 f973 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000834 	.word	0x20000834
 80021a4:	40004800 	.word	0x40004800

080021a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b6:	2206      	movs	r2, #6
 80021b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021bc:	2202      	movs	r2, #2
 80021be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ec:	f001 fceb 	bl	8003bc6 <HAL_PCD_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021f6:	f000 f943 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200008bc 	.word	0x200008bc

08002204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	; 0x38
 8002208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800221a:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a61      	ldr	r2, [pc, #388]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a5b      	ldr	r2, [pc, #364]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800224a:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002250:	f043 0320 	orr.w	r3, r3, #32
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002262:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022aa:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <MX_GPIO_Init+0x1a0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80022e0:	4831      	ldr	r0, [pc, #196]	; (80023a8 <MX_GPIO_Init+0x1a4>)
 80022e2:	f001 fc57 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	4830      	ldr	r0, [pc, #192]	; (80023ac <MX_GPIO_Init+0x1a8>)
 80022ec:	f001 fc52 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(zawor_GPIO_Port, zawor_Pin, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	482e      	ldr	r0, [pc, #184]	; (80023b0 <MX_GPIO_Init+0x1ac>)
 80022f6:	f001 fc4d 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002300:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230e:	4619      	mov	r1, r3
 8002310:	4828      	ldr	r0, [pc, #160]	; (80023b4 <MX_GPIO_Init+0x1b0>)
 8002312:	f001 fa7b 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_Reset_Pin */
  GPIO_InitStruct.Pin = Signal_Reset_Pin;
 8002316:	2308      	movs	r3, #8
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Signal_Reset_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002326:	4619      	mov	r1, r3
 8002328:	4822      	ldr	r0, [pc, #136]	; (80023b4 <MX_GPIO_Init+0x1b0>)
 800232a:	f001 fa6f 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800232e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002334:	2301      	movs	r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	4619      	mov	r1, r3
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_GPIO_Init+0x1a4>)
 8002348:	f001 fa60 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : Signal_Robot_1_Pin Signal_Robot_2_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Signal_Robot_1_Pin|Signal_Robot_2_Pin|USB_OverCurrent_Pin;
 800234c:	2383      	movs	r3, #131	; 0x83
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	4813      	ldr	r0, [pc, #76]	; (80023ac <MX_GPIO_Init+0x1a8>)
 8002360:	f001 fa54 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	480c      	ldr	r0, [pc, #48]	; (80023ac <MX_GPIO_Init+0x1a8>)
 800237c:	f001 fa46 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : zawor_Pin */
  GPIO_InitStruct.Pin = zawor_Pin;
 8002380:	2301      	movs	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(zawor_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	4806      	ldr	r0, [pc, #24]	; (80023b0 <MX_GPIO_Init+0x1ac>)
 8002398:	f001 fa38 	bl	800380c <HAL_GPIO_Init>

}
 800239c:	bf00      	nop
 800239e:	3738      	adds	r7, #56	; 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40020800 	.word	0x40020800

080023b8 <start_task_1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_task_1 */
void start_task_1(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	setHomePosition();
 80023c0:	f7ff f83e 	bl	8001440 <setHomePosition>
	test();
 80023c4:	f7ff fa16 	bl	80017f4 <test>
	/* Infinite loop */
	for(;;)
	{
	if(HAL_GPIO_ReadPin(Signal_Robot_1_GPIO_Port, Signal_Robot_1_Pin)){
 80023c8:	2101      	movs	r1, #1
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <start_task_1+0x48>)
 80023cc:	f001 fbca 	bl	8003b64 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <start_task_1+0x28>
	  reset = false;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <start_task_1+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
      general_cycle_of_work();
 80023dc:	f7ff f8ca 	bl	8001574 <general_cycle_of_work>
	}

    if(HAL_GPIO_ReadPin(Signal_Reset_GPIO_Port, Signal_Reset_Pin)){
 80023e0:	2108      	movs	r1, #8
 80023e2:	4809      	ldr	r0, [pc, #36]	; (8002408 <start_task_1+0x50>)
 80023e4:	f001 fbbe 	bl	8003b64 <HAL_GPIO_ReadPin>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <start_task_1+0x40>
      reset = true;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <start_task_1+0x4c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
      setHomePosition();
 80023f4:	f7ff f824 	bl	8001440 <setHomePosition>
    }

		osDelay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f004 ff57 	bl	80072ac <osDelay>
	if(HAL_GPIO_ReadPin(Signal_Robot_1_GPIO_Port, Signal_Robot_1_Pin)){
 80023fe:	e7e3      	b.n	80023c8 <start_task_1+0x10>
 8002400:	40021800 	.word	0x40021800
 8002404:	20000dcc 	.word	0x20000dcc
 8002408:	40020800 	.word	0x40020800

0800240c <start_task_2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_task_2 */
void start_task_2(void *argument)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_2 */
	setHomePositionR2();
 8002414:	f7ff f862 	bl	80014dc <setHomePositionR2>
	/* Infinite loop */
	for(;;)
	{

		if(HAL_GPIO_ReadPin(Signal_Robot_2_GPIO_Port, Signal_Robot_2_Pin)){
 8002418:	2102      	movs	r1, #2
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <start_task_2+0x44>)
 800241c:	f001 fba2 	bl	8003b64 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <start_task_2+0x24>
			reset = false;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <start_task_2+0x48>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
			general_cycle_of_work_R2();
 800242c:	f7ff f95c 	bl	80016e8 <general_cycle_of_work_R2>
		}
	    if(HAL_GPIO_ReadPin(Signal_Reset_GPIO_Port, Signal_Reset_Pin)){
 8002430:	2108      	movs	r1, #8
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <start_task_2+0x4c>)
 8002434:	f001 fb96 	bl	8003b64 <HAL_GPIO_ReadPin>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <start_task_2+0x3c>
	      reset = true;
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <start_task_2+0x48>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
	      setHomePositionR2();
 8002444:	f7ff f84a 	bl	80014dc <setHomePositionR2>
	    }
		osDelay(100);
 8002448:	2064      	movs	r0, #100	; 0x64
 800244a:	f004 ff2f 	bl	80072ac <osDelay>
		if(HAL_GPIO_ReadPin(Signal_Robot_2_GPIO_Port, Signal_Robot_2_Pin)){
 800244e:	e7e3      	b.n	8002418 <start_task_2+0xc>
 8002450:	40021800 	.word	0x40021800
 8002454:	20000dcc 	.word	0x20000dcc
 8002458:	40020800 	.word	0x40020800

0800245c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800246e:	f000 fd81 	bl	8002f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40001000 	.word	0x40001000

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002488:	e7fe      	b.n	8002488 <Error_Handler+0x8>
	...

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_MspInit+0x4c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	210f      	movs	r1, #15
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	f000 fe4f 	bl	800316c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4e      	ldr	r2, [pc, #312]	; (8002634 <HAL_ETH_MspInit+0x158>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 8096 	bne.w	800262c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a46      	ldr	r2, [pc, #280]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800251e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a40      	ldr	r2, [pc, #256]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6313      	str	r3, [r2, #48]	; 0x30
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 8002596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_ETH_MspInit+0x15c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025a8:	2332      	movs	r3, #50	; 0x32
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b8:	230b      	movs	r3, #11
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	481e      	ldr	r0, [pc, #120]	; (800263c <HAL_ETH_MspInit+0x160>)
 80025c4:	f001 f922 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025c8:	2386      	movs	r3, #134	; 0x86
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d8:	230b      	movs	r3, #11
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <HAL_ETH_MspInit+0x164>)
 80025e4:	f001 f912 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80025e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025fa:	230b      	movs	r3, #11
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	480f      	ldr	r0, [pc, #60]	; (8002644 <HAL_ETH_MspInit+0x168>)
 8002606:	f001 f901 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800260a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800261c:	230b      	movs	r3, #11
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <HAL_ETH_MspInit+0x16c>)
 8002628:	f001 f8f0 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3738      	adds	r7, #56	; 0x38
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40028000 	.word	0x40028000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020800 	.word	0x40020800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40021800 	.word	0x40021800

0800264c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_TIM_PWM_MspInit+0xa4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10c      	bne.n	8002678 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002676:	e034      	b.n	80026e2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d10c      	bne.n	800269c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
}
 800269a:	e022      	b.n	80026e2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_TIM_PWM_MspInit+0xac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10c      	bne.n	80026c0 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	e010      	b.n	80026e2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM9)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_TIM_PWM_MspInit+0xb0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10b      	bne.n	80026e2 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40014000 	.word	0x40014000

08002700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <HAL_TIM_Base_MspInit+0xa4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002712:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800272a:	e034      	b.n	8002796 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM11)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_TIM_Base_MspInit+0xac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10c      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
}
 800274e:	e022      	b.n	8002796 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM13)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_TIM_Base_MspInit+0xb0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10c      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
}
 8002772:	e010      	b.n	8002796 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_TIM_Base_MspInit+0xb4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10b      	bne.n	8002796 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_TIM_Base_MspInit+0xa8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40014400 	.word	0x40014400
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40014800 	.word	0x40014800
 80027b0:	40001c00 	.word	0x40001c00
 80027b4:	40002000 	.word	0x40002000

080027b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b090      	sub	sp, #64	; 0x40
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_TIM_MspPostInit+0x280>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11d      	bne.n	8002816 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027da:	4b98      	ldr	r3, [pc, #608]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a97      	ldr	r2, [pc, #604]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80027e0:	f043 0310 	orr.w	r3, r3, #16
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80027f2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002804:	2301      	movs	r3, #1
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800280c:	4619      	mov	r1, r3
 800280e:	488c      	ldr	r0, [pc, #560]	; (8002a40 <HAL_TIM_MspPostInit+0x288>)
 8002810:	f000 fffc 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002814:	e10c      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d139      	bne.n	8002894 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
 800282c:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	4a7f      	ldr	r2, [pc, #508]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	6313      	str	r3, [r2, #48]	; 0x30
 8002844:	4b7d      	ldr	r3, [pc, #500]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	623b      	str	r3, [r7, #32]
 800284e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002850:	2309      	movs	r3, #9
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002860:	2301      	movs	r3, #1
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4876      	ldr	r0, [pc, #472]	; (8002a44 <HAL_TIM_MspPostInit+0x28c>)
 800286c:	f000 ffce 	bl	800380c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002882:	2301      	movs	r3, #1
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	486e      	ldr	r0, [pc, #440]	; (8002a48 <HAL_TIM_MspPostInit+0x290>)
 800288e:	f000 ffbd 	bl	800380c <HAL_GPIO_Init>
}
 8002892:	e0cd      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6c      	ldr	r2, [pc, #432]	; (8002a4c <HAL_TIM_MspPostInit+0x294>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11d      	bne.n	80028da <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289e:	4b67      	ldr	r3, [pc, #412]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a66      	ldr	r2, [pc, #408]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028c8:	2302      	movs	r3, #2
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d0:	4619      	mov	r1, r3
 80028d2:	485f      	ldr	r0, [pc, #380]	; (8002a50 <HAL_TIM_MspPostInit+0x298>)
 80028d4:	f000 ff9a 	bl	800380c <HAL_GPIO_Init>
}
 80028d8:	e0aa      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM9)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <HAL_TIM_MspPostInit+0x29c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d11c      	bne.n	800291e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e4:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028fc:	2360      	movs	r3, #96	; 0x60
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800290c:	2303      	movs	r3, #3
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	484a      	ldr	r0, [pc, #296]	; (8002a40 <HAL_TIM_MspPostInit+0x288>)
 8002918:	f000 ff78 	bl	800380c <HAL_GPIO_Init>
}
 800291c:	e088      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM10)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_TIM_MspPostInit+0x2a0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d11c      	bne.n	8002962 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002940:	2340      	movs	r3, #64	; 0x40
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002950:	2303      	movs	r3, #3
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002958:	4619      	mov	r1, r3
 800295a:	4840      	ldr	r0, [pc, #256]	; (8002a5c <HAL_TIM_MspPostInit+0x2a4>)
 800295c:	f000 ff56 	bl	800380c <HAL_GPIO_Init>
}
 8002960:	e066      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM11)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3e      	ldr	r2, [pc, #248]	; (8002a60 <HAL_TIM_MspPostInit+0x2a8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d11c      	bne.n	80029a6 <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800296c:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002994:	2303      	movs	r3, #3
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	482f      	ldr	r0, [pc, #188]	; (8002a5c <HAL_TIM_MspPostInit+0x2a4>)
 80029a0:	f000 ff34 	bl	800380c <HAL_GPIO_Init>
}
 80029a4:	e044      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM13)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2e      	ldr	r2, [pc, #184]	; (8002a64 <HAL_TIM_MspPostInit+0x2ac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11d      	bne.n	80029ec <HAL_TIM_MspPostInit+0x234>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80029da:	2309      	movs	r3, #9
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	481d      	ldr	r0, [pc, #116]	; (8002a5c <HAL_TIM_MspPostInit+0x2a4>)
 80029e6:	f000 ff11 	bl	800380c <HAL_GPIO_Init>
}
 80029ea:	e021      	b.n	8002a30 <HAL_TIM_MspPostInit+0x278>
  else if(htim->Instance==TIM14)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_TIM_MspPostInit+0x2b0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11c      	bne.n	8002a30 <HAL_TIM_MspPostInit+0x278>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 80029fc:	f043 0320 	orr.w	r3, r3, #32
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_TIM_MspPostInit+0x284>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002a20:	2309      	movs	r3, #9
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <HAL_TIM_MspPostInit+0x2a4>)
 8002a2c:	f000 feee 	bl	800380c <HAL_GPIO_Init>
}
 8002a30:	bf00      	nop
 8002a32:	3740      	adds	r7, #64	; 0x40
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40014800 	.word	0x40014800
 8002a64:	40001c00 	.word	0x40001c00
 8002a68:	40002000 	.word	0x40002000

08002a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0aa      	sub	sp, #168	; 0xa8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	2284      	movs	r2, #132	; 0x84
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f007 f8fd 	bl	8009c8c <memset>
  if(huart->Instance==USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_UART_MspInit+0xb4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d13c      	bne.n	8002b16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fee4 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ab6:	f7ff fce3 	bl	8002480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_UART_MspInit+0xb8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b04:	2307      	movs	r3, #7
 8002b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <HAL_UART_MspInit+0xbc>)
 8002b12:	f000 fe7b 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	37a8      	adds	r7, #168	; 0xa8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40004800 	.word	0x40004800
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020c00 	.word	0x40020c00

08002b2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b0ac      	sub	sp, #176	; 0xb0
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	2284      	movs	r2, #132	; 0x84
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f007 f89d 	bl	8009c8c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5a:	d159      	bne.n	8002c10 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fe83 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002b78:	f7ff fc82 	bl	8002480 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002b94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4818      	ldr	r0, [pc, #96]	; (8002c1c <HAL_PCD_MspInit+0xf0>)
 8002bbc:	f000 fe26 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4810      	ldr	r0, [pc, #64]	; (8002c1c <HAL_PCD_MspInit+0xf0>)
 8002bdc:	f000 fe16 	bl	800380c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bea:	6353      	str	r3, [r2, #52]	; 0x34
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c02:	6453      	str	r3, [r2, #68]	; 0x44
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <HAL_PCD_MspInit+0xec>)
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	37b0      	adds	r7, #176	; 0xb0
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000

08002c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_InitTick+0xe0>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_InitTick+0xe0>)
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_InitTick+0xe0>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c48:	f107 0210 	add.w	r2, r7, #16
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fdde 	bl	8004814 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c62:	f001 fdaf 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8002c66:	6378      	str	r0, [r7, #52]	; 0x34
 8002c68:	e004      	b.n	8002c74 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c6a:	f001 fdab 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_InitTick+0xe4>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	0c9b      	lsrs	r3, r3, #18
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_InitTick+0xe8>)
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_InitTick+0xec>)
 8002c86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_InitTick+0xe8>)
 8002c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_InitTick+0xe8>)
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_InitTick+0xe8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_InitTick+0xe8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_InitTick+0xe8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ca8:	4817      	ldr	r0, [pc, #92]	; (8002d08 <HAL_InitTick+0xe8>)
 8002caa:	f002 f9d5 	bl	8005058 <HAL_TIM_Base_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11b      	bne.n	8002cf4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cbc:	4812      	ldr	r0, [pc, #72]	; (8002d08 <HAL_InitTick+0xe8>)
 8002cbe:	f002 fa23 	bl	8005108 <HAL_TIM_Base_Start_IT>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cd0:	2036      	movs	r0, #54	; 0x36
 8002cd2:	f000 fa67 	bl	80031a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d808      	bhi.n	8002cee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	2036      	movs	r0, #54	; 0x36
 8002ce2:	f000 fa43 	bl	800316c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_InitTick+0xf0>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e002      	b.n	8002cf4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3738      	adds	r7, #56	; 0x38
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	431bde83 	.word	0x431bde83
 8002d08:	20000dd8 	.word	0x20000dd8
 8002d0c:	40001000 	.word	0x40001000
 8002d10:	200001b4 	.word	0x200001b4

08002d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <NMI_Handler+0x4>

08002d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <HardFault_Handler+0x4>

08002d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <MemManage_Handler+0x4>

08002d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <TIM6_DAC_IRQHandler+0x10>)
 8002d46:	f002 fba9 	bl	800549c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000dd8 	.word	0x20000dd8

08002d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
	return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_kill>:

int _kill(int pid, int sig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d6e:	f006 ff55 	bl	8009c1c <__errno>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2216      	movs	r2, #22
 8002d76:	601a      	str	r2, [r3, #0]
	return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_exit>:

void _exit (int status)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d96:	e7fe      	b.n	8002d96 <_exit+0x12>

08002d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e00a      	b.n	8002dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002daa:	f3af 8000 	nop.w
 8002dae:	4601      	mov	r1, r0
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	60ba      	str	r2, [r7, #8]
 8002db6:	b2ca      	uxtb	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	dbf0      	blt.n	8002daa <_read+0x12>
	}

return len;
 8002dc8:	687b      	ldr	r3, [r7, #4]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e009      	b.n	8002df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	60ba      	str	r2, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3301      	adds	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	dbf1      	blt.n	8002de4 <_write+0x12>
	}
	return len;
 8002e00:	687b      	ldr	r3, [r7, #4]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_close>:

int _close(int file)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
	return -1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e32:	605a      	str	r2, [r3, #4]
	return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <_isatty>:

int _isatty(int file)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	return 1;
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
	return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <_sbrk+0x5c>)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <_sbrk+0x60>)
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <_sbrk+0x64>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <_sbrk+0x68>)
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d207      	bcs.n	8002eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea4:	f006 feba 	bl	8009c1c <__errno>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	220c      	movs	r2, #12
 8002eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e009      	b.n	8002ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <_sbrk+0x64>)
 8002ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20050000 	.word	0x20050000
 8002ed4:	00000400 	.word	0x00000400
 8002ed8:	20000e24 	.word	0x20000e24
 8002edc:	20005788 	.word	0x20005788

08002ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee4:	480d      	ldr	r0, [pc, #52]	; (8002f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ee6:	490e      	ldr	r1, [pc, #56]	; (8002f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002efc:	4c0b      	ldr	r4, [pc, #44]	; (8002f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f0a:	f000 f813 	bl	8002f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0e:	f006 fe8b 	bl	8009c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f12:	f7fe fcaf 	bl	8001874 <main>
  bx  lr    
 8002f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f20:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8002f24:	0800cb3c 	.word	0x0800cb3c
  ldr r2, =_sbss
 8002f28:	200004d0 	.word	0x200004d0
  ldr r4, =_ebss
 8002f2c:	20005784 	.word	0x20005784

08002f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC_IRQHandler>
	...

08002f34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <SystemInit+0x20>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <SystemInit+0x20>)
 8002f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	f000 f8fa 	bl	8003156 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f62:	200f      	movs	r0, #15
 8002f64:	f7ff fe5c 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f68:	f7ff fa90 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200001b8 	.word	0x200001b8
 8002f98:	20000e28 	.word	0x20000e28

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000e28 	.word	0x20000e28

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200001b8 	.word	0x200001b8

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <__NVIC_SetPriorityGrouping+0x40>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003026:	4313      	orrs	r3, r2
 8003028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <__NVIC_SetPriorityGrouping+0x40>)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	60d3      	str	r3, [r2, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00
 8003040:	05fa0000 	.word	0x05fa0000

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff4c 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317e:	f7ff ff61 	bl	8003044 <__NVIC_GetPriorityGrouping>
 8003182:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	6978      	ldr	r0, [r7, #20]
 800318a:	f7ff ffb1 	bl	80030f0 <NVIC_EncodePriority>
 800318e:	4602      	mov	r2, r0
 8003190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff80 	bl	800309c <__NVIC_SetPriority>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff54 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06a      	b.n	80032a8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2223      	movs	r2, #35	; 0x23
 80031e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff f979 	bl	80024dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_ETH_Init+0xf0>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <HAL_ETH_Init+0xf0>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_ETH_Init+0xf0>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_ETH_Init+0xf4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <HAL_ETH_Init+0xf4>)
 8003208:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800320c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_ETH_Init+0xf4>)
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4927      	ldr	r1, [pc, #156]	; (80032b4 <HAL_ETH_Init+0xf4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_ETH_Init+0xf4>)
 800321e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003236:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003238:	f7ff feb0 	bl	8002f9c <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800323e:	e011      	b.n	8003264 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003240:	f7ff feac 	bl	8002f9c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800324e:	d909      	bls.n	8003264 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2204      	movs	r2, #4
 8003254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	22e0      	movs	r2, #224	; 0xe0
 800325c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e021      	b.n	80032a8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e4      	bne.n	8003240 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f958 	bl	800352c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f9ff 	bl	8003680 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa55 	bl	8003732 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	461a      	mov	r2, r3
 800328e:	2100      	movs	r1, #0
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f9bd 	bl	8003610 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2210      	movs	r2, #16
 80032a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800

080032b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4b51      	ldr	r3, [pc, #324]	; (8003414 <ETH_SetMACConfig+0x15c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	7c1b      	ldrb	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <ETH_SetMACConfig+0x28>
 80032da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032de:	e000      	b.n	80032e2 <ETH_SetMACConfig+0x2a>
 80032e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7c5b      	ldrb	r3, [r3, #17]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <ETH_SetMACConfig+0x38>
 80032ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ee:	e000      	b.n	80032f2 <ETH_SetMACConfig+0x3a>
 80032f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	7fdb      	ldrb	r3, [r3, #31]
 80032fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003300:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	7f92      	ldrb	r2, [r2, #30]
 800330c:	2a00      	cmp	r2, #0
 800330e:	d102      	bne.n	8003316 <ETH_SetMACConfig+0x5e>
 8003310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003314:	e000      	b.n	8003318 <ETH_SetMACConfig+0x60>
 8003316:	2200      	movs	r2, #0
                        macconf->Speed |
 8003318:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7f1b      	ldrb	r3, [r3, #28]
 800331e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003320:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003326:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800332e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003336:	2a00      	cmp	r2, #0
 8003338:	d102      	bne.n	8003340 <ETH_SetMACConfig+0x88>
 800333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333e:	e000      	b.n	8003342 <ETH_SetMACConfig+0x8a>
 8003340:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003342:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7bdb      	ldrb	r3, [r3, #15]
 8003348:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800334a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003350:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003358:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800335a:	4313      	orrs	r3, r2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fe1e 	bl	8002fb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d101      	bne.n	80033a6 <ETH_SetMACConfig+0xee>
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	e000      	b.n	80033a8 <ETH_SetMACConfig+0xf0>
 80033a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d101      	bne.n	80033be <ETH_SetMACConfig+0x106>
 80033ba:	2208      	movs	r2, #8
 80033bc:	e000      	b.n	80033c0 <ETH_SetMACConfig+0x108>
 80033be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80033c8:	2a01      	cmp	r2, #1
 80033ca:	d101      	bne.n	80033d0 <ETH_SetMACConfig+0x118>
 80033cc:	2204      	movs	r2, #4
 80033ce:	e000      	b.n	80033d2 <ETH_SetMACConfig+0x11a>
 80033d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80033da:	2a01      	cmp	r2, #1
 80033dc:	d101      	bne.n	80033e2 <ETH_SetMACConfig+0x12a>
 80033de:	2202      	movs	r2, #2
 80033e0:	e000      	b.n	80033e4 <ETH_SetMACConfig+0x12c>
 80033e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033e4:	4313      	orrs	r3, r2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7ff fdd9 	bl	8002fb4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	ff20810f 	.word	0xff20810f

08003418 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <ETH_SetDMAConfig+0x110>)
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	7b1b      	ldrb	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <ETH_SetDMAConfig+0x2c>
 800343e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003442:	e000      	b.n	8003446 <ETH_SetDMAConfig+0x2e>
 8003444:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	7b5b      	ldrb	r3, [r3, #13]
 800344a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800344c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	7f52      	ldrb	r2, [r2, #29]
 8003452:	2a00      	cmp	r2, #0
 8003454:	d102      	bne.n	800345c <ETH_SetDMAConfig+0x44>
 8003456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800345a:	e000      	b.n	800345e <ETH_SetDMAConfig+0x46>
 800345c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800345e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	7b9b      	ldrb	r3, [r3, #14]
 8003464:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003466:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800346c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7f1b      	ldrb	r3, [r3, #28]
 8003472:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003474:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	7f9b      	ldrb	r3, [r3, #30]
 800347a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800347c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003482:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800348c:	4313      	orrs	r3, r2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff fd80 	bl	8002fb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	791b      	ldrb	r3, [r3, #4]
 80034c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800350c:	2001      	movs	r0, #1
 800350e:	f7ff fd51 	bl	8002fb4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	f8de3f23 	.word	0xf8de3f23

0800352c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b0a6      	sub	sp, #152	; 0x98
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003568:	2300      	movs	r3, #0
 800356a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003572:	2300      	movs	r3, #0
 8003574:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800358e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fe86 	bl	80032b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035d8:	2301      	movs	r3, #1
 80035da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff08 	bl	8003418 <ETH_SetDMAConfig>
}
 8003608:	bf00      	nop
 800360a:	3798      	adds	r7, #152	; 0x98
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3305      	adds	r3, #5
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	3204      	adds	r2, #4
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <ETH_MACAddressConfig+0x68>)
 8003632:	4413      	add	r3, r2
 8003634:	461a      	mov	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3303      	adds	r3, #3
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	061a      	lsls	r2, r3, #24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3302      	adds	r3, #2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	4313      	orrs	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <ETH_MACAddressConfig+0x6c>)
 8003662:	4413      	add	r3, r2
 8003664:	461a      	mov	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40028040 	.word	0x40028040
 800367c:	40028044 	.word	0x40028044

08003680 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e03e      	b.n	800370c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68d9      	ldr	r1, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	3206      	adds	r2, #6
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d80c      	bhi.n	80036f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e004      	b.n	80036fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d9bd      	bls.n	800368e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003724:	611a      	str	r2, [r3, #16]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e046      	b.n	80037ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6919      	ldr	r1, [r3, #16]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800377c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003784:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	3212      	adds	r2, #18
 800379a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d80c      	bhi.n	80037be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6919      	ldr	r1, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e004      	b.n	80037c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3301      	adds	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d9b5      	bls.n	8003740 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e175      	b.n	8003b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800382c:	2201      	movs	r2, #1
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	f040 8164 	bne.w	8003b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d005      	beq.n	8003862 <HAL_GPIO_Init+0x56>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d130      	bne.n	80038c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 0201 	and.w	r2, r3, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d017      	beq.n	8003900 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d123      	bne.n	8003954 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	08da      	lsrs	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3208      	adds	r2, #8
 8003914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80be 	beq.w	8003b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_GPIO_Init+0x324>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_GPIO_Init+0x324>)
 800399c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_GPIO_Init+0x324>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039ae:	4a61      	ldr	r2, [pc, #388]	; (8003b34 <HAL_GPIO_Init+0x328>)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <HAL_GPIO_Init+0x32c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d037      	beq.n	8003a4a <HAL_GPIO_Init+0x23e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_GPIO_Init+0x330>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_GPIO_Init+0x23a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <HAL_GPIO_Init+0x334>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02b      	beq.n	8003a42 <HAL_GPIO_Init+0x236>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_GPIO_Init+0x338>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d025      	beq.n	8003a3e <HAL_GPIO_Init+0x232>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a54      	ldr	r2, [pc, #336]	; (8003b48 <HAL_GPIO_Init+0x33c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <HAL_GPIO_Init+0x22e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a53      	ldr	r2, [pc, #332]	; (8003b4c <HAL_GPIO_Init+0x340>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_Init+0x22a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a52      	ldr	r2, [pc, #328]	; (8003b50 <HAL_GPIO_Init+0x344>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_Init+0x226>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a51      	ldr	r2, [pc, #324]	; (8003b54 <HAL_GPIO_Init+0x348>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_Init+0x222>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a50      	ldr	r2, [pc, #320]	; (8003b58 <HAL_GPIO_Init+0x34c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x21e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4f      	ldr	r2, [pc, #316]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_Init+0x21a>
 8003a22:	2309      	movs	r3, #9
 8003a24:	e012      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a26:	230a      	movs	r3, #10
 8003a28:	e010      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	e00e      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a2e:	2307      	movs	r3, #7
 8003a30:	e00c      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a32:	2306      	movs	r3, #6
 8003a34:	e00a      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a36:	2305      	movs	r3, #5
 8003a38:	e008      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_Init+0x240>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f002 0203 	and.w	r2, r2, #3
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4093      	lsls	r3, r2
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a5c:	4935      	ldr	r1, [pc, #212]	; (8003b34 <HAL_GPIO_Init+0x328>)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3302      	adds	r3, #2
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8e:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a94:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <HAL_GPIO_Init+0x354>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	f67f ae86 	bls.w	800382c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40013800 	.word	0x40013800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40020400 	.word	0x40020400
 8003b40:	40020800 	.word	0x40020800
 8003b44:	40020c00 	.word	0x40020c00
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40021400 	.word	0x40021400
 8003b50:	40021800 	.word	0x40021800
 8003b54:	40021c00 	.word	0x40021c00
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40022400 	.word	0x40022400
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e001      	b.n	8003b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bb0:	e003      	b.n	8003bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	041a      	lsls	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	619a      	str	r2, [r3, #24]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b08f      	sub	sp, #60	; 0x3c
 8003bca:	af0a      	add	r7, sp, #40	; 0x28
 8003bcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e116      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe ff9a 	bl	8002b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 ff94 	bl	8006b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	687e      	ldr	r6, [r7, #4]
 8003c24:	466d      	mov	r5, sp
 8003c26:	f106 0410 	add.w	r4, r6, #16
 8003c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c3a:	1d33      	adds	r3, r6, #4
 8003c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f002 ff28 	bl	8006a94 <USB_CoreInit>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0d7      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 ff82 	bl	8006b66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e04a      	b.n	8003cfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	333d      	adds	r3, #61	; 0x3d
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	333c      	adds	r3, #60	; 0x3c
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	b298      	uxth	r0, r3
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3340      	adds	r3, #64	; 0x40
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3348      	adds	r3, #72	; 0x48
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334c      	adds	r3, #76	; 0x4c
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3354      	adds	r3, #84	; 0x54
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3af      	bcc.n	8003c68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e044      	b.n	8003d98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	3301      	adds	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3b5      	bcc.n	8003d0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	687e      	ldr	r6, [r7, #4]
 8003daa:	466d      	mov	r5, sp
 8003dac:	f106 0410 	add.w	r4, r6, #16
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc0:	1d33      	adds	r3, r6, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f002 ff1b 	bl	8006c00 <USB_DevInit>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e014      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d102      	bne.n	8003dfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f80b 	bl	8003e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 f8d9 	bl	8006fb6 <USB_DevDisconnect>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	10000003 	.word	0x10000003

08003e58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e295      	b.n	80043ba <HAL_RCC_OscConfig+0x542>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8089 	beq.w	8003fae <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e9c:	4b97      	ldr	r3, [pc, #604]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea8:	4b94      	ldr	r3, [pc, #592]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d112      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
 8003eb4:	4b91      	ldr	r3, [pc, #580]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec0:	d10b      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec2:	4b8e      	ldr	r3, [pc, #568]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06e      	beq.n	8003fac <HAL_RCC_OscConfig+0x134>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d16a      	bne.n	8003fac <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e26f      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x7a>
 8003ee4:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a84      	ldr	r2, [pc, #528]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e02e      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x9c>
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7f      	ldr	r2, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b7d      	ldr	r3, [pc, #500]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7c      	ldr	r2, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	4b77      	ldr	r3, [pc, #476]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a76      	ldr	r2, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b74      	ldr	r3, [pc, #464]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a73      	ldr	r2, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f38:	4b70      	ldr	r3, [pc, #448]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6f      	ldr	r2, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6c      	ldr	r2, [pc, #432]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d014      	beq.n	8003f82 <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7ff f820 	bl	8002f9c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	e009      	b.n	8003f74 <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7ff f81c 	bl	8002f9c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e222      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f74:	4b61      	ldr	r3, [pc, #388]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCC_OscConfig+0xe8>
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7ff f80b 	bl	8002f9c <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f88:	e009      	b.n	8003f9e <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8a:	f7ff f807 	bl	8002f9c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	4a5a      	ldr	r2, [pc, #360]	; (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e20d      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	4b57      	ldr	r3, [pc, #348]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ef      	bne.n	8003f8a <HAL_RCC_OscConfig+0x112>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d069      	beq.n	800408e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fba:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b4d      	ldr	r3, [pc, #308]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x194>
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x17e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1e1      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	493d      	ldr	r1, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e040      	b.n	800408e <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d023      	beq.n	800405c <HAL_RCC_OscConfig+0x1e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b39      	ldr	r3, [pc, #228]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe ffbc 	bl	8002f9c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004028:	f7fe ffb8 	bl	8002f9c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1bf      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4929      	ldr	r1, [pc, #164]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
 800405a:	e018      	b.n	800408e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe ff98 	bl	8002f9c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x20a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004070:	f7fe ff94 	bl	8002f9c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e19b      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03a      	beq.n	8004110 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d019      	beq.n	80040d6 <HAL_RCC_OscConfig+0x25e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 80040a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fe ff75 	bl	8002f9c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x250>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fe ff71 	bl	8002f9c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e178      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 80040ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x23e>
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x284>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fe ff5b 	bl	8002f9c <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	e00c      	b.n	8004104 <HAL_RCC_OscConfig+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ea:	f7fe ff57 	bl	8002f9c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d905      	bls.n	8004104 <HAL_RCC_OscConfig+0x28c>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e15e      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
 80040fc:	40023800 	.word	0x40023800
 8004100:	000f4240 	.word	0x000f4240
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	4b91      	ldr	r3, [pc, #580]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ec      	bne.n	80040ea <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a4 	beq.w	8004266 <HAL_RCC_OscConfig+0x3ee>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b88      	ldr	r3, [pc, #544]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a87      	ldr	r2, [pc, #540]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b85      	ldr	r3, [pc, #532]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b82      	ldr	r3, [pc, #520]	; (8004350 <HAL_RCC_OscConfig+0x4d8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x30c>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x4d8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <HAL_RCC_OscConfig+0x4d8>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fe ff1d 	bl	8002f9c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x300>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fe ff19 	bl	8002f9c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	; 0x64
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e120      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <HAL_RCC_OscConfig+0x4d8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x322>
 800418c:	4b6f      	ldr	r3, [pc, #444]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a6e      	ldr	r2, [pc, #440]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e02d      	b.n	80041f6 <HAL_RCC_OscConfig+0x37e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x344>
 80041a2:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a69      	ldr	r2, [pc, #420]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	4b67      	ldr	r3, [pc, #412]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a66      	ldr	r2, [pc, #408]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	e01c      	b.n	80041f6 <HAL_RCC_OscConfig+0x37e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	d10c      	bne.n	80041de <HAL_RCC_OscConfig+0x366>
 80041c4:	4b61      	ldr	r3, [pc, #388]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	4a60      	ldr	r2, [pc, #384]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70
 80041d0:	4b5e      	ldr	r3, [pc, #376]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a5d      	ldr	r2, [pc, #372]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	e00b      	b.n	80041f6 <HAL_RCC_OscConfig+0x37e>
 80041de:	4b5b      	ldr	r3, [pc, #364]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a5a      	ldr	r2, [pc, #360]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	4b58      	ldr	r3, [pc, #352]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a57      	ldr	r2, [pc, #348]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80041f0:	f023 0304 	bic.w	r3, r3, #4
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d015      	beq.n	800422a <HAL_RCC_OscConfig+0x3b2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fe fecd 	bl	8002f9c <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fe fec9 	bl	8002f9c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0ce      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ee      	beq.n	8004206 <HAL_RCC_OscConfig+0x38e>
 8004228:	e014      	b.n	8004254 <HAL_RCC_OscConfig+0x3dc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fe feb7 	bl	8002f9c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x3d0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fe feb3 	bl	8002f9c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x3d0>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ee      	bne.n	8004232 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_RCC_OscConfig+0x3ee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4b3c      	ldr	r3, [pc, #240]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	4a3b      	ldr	r2, [pc, #236]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a4 	beq.w	80043b8 <HAL_RCC_OscConfig+0x540>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b08      	cmp	r3, #8
 800427a:	d06b      	beq.n	8004354 <HAL_RCC_OscConfig+0x4dc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d149      	bne.n	8004318 <HAL_RCC_OscConfig+0x4a0>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a30      	ldr	r2, [pc, #192]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800428e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fe84 	bl	8002f9c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe fe80 	bl	8002f9c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e087      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x420>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	4313      	orrs	r3, r2
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80042de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 80042ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fe54 	bl	8002f9c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe fe50 	bl	8002f9c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e057      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x480>
 8004316:	e04f      	b.n	80043b8 <HAL_RCC_OscConfig+0x540>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe fe3a 	bl	8002f9c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x4c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fe fe36 	bl	8002f9c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x4c6>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e03d      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCC_OscConfig+0x4d4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x4b4>
 800434a:	e035      	b.n	80043b8 <HAL_RCC_OscConfig+0x540>
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x54c>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_OscConfig+0x53c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d121      	bne.n	80043b4 <HAL_RCC_OscConfig+0x53c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x53c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_RCC_OscConfig+0x53c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x53c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x540>
#endif
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x542>
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0d0      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d910      	bls.n	8004410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 020f 	bic.w	r2, r3, #15
 80043f6:	4965      	ldr	r1, [pc, #404]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b63      	ldr	r3, [pc, #396]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0b8      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004428:	4b59      	ldr	r3, [pc, #356]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4a58      	ldr	r2, [pc, #352]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800442e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004440:	4b53      	ldr	r3, [pc, #332]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a52      	ldr	r2, [pc, #328]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800444a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	494d      	ldr	r1, [pc, #308]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d040      	beq.n	80044ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d115      	bne.n	80044aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e07f      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e073      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06b      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4936      	ldr	r1, [pc, #216]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fe fd6e 	bl	8002f9c <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	e00a      	b.n	80044da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fe fd6a 	bl	8002f9c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e053      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 020c 	and.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1eb      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d210      	bcs.n	800451c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	4922      	ldr	r1, [pc, #136]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e032      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4916      	ldr	r1, [pc, #88]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455a:	f000 f821 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800455e:	4602      	mov	r2, r0
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	490a      	ldr	r1, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x1cc>)
 800456c:	5ccb      	ldrb	r3, [r1, r3]
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1d0>)
 8004574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1d4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fb50 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023c00 	.word	0x40023c00
 8004590:	40023800 	.word	0x40023800
 8004594:	0800c738 	.word	0x0800c738
 8004598:	200001b0 	.word	0x200001b0
 800459c:	200001b4 	.word	0x200001b4

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b094      	sub	sp, #80	; 0x50
 80045a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	647b      	str	r3, [r7, #68]	; 0x44
 80045ac:	2300      	movs	r3, #0
 80045ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b0:	2300      	movs	r3, #0
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b8:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d00d      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x40>
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	f200 80e1 	bhi.w	800478c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x34>
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d003      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x3a>
 80045d2:	e0db      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d8:	e0db      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045da:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045de:	e0d8      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e0:	4b6f      	ldr	r3, [pc, #444]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d063      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4b6a      	ldr	r3, [pc, #424]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	2200      	movs	r2, #0
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
 800460e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	f04f 0000 	mov.w	r0, #0
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	0159      	lsls	r1, r3, #5
 8004620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004624:	0150      	lsls	r0, r2, #5
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4621      	mov	r1, r4
 800462c:	1a51      	subs	r1, r2, r1
 800462e:	6139      	str	r1, [r7, #16]
 8004630:	4629      	mov	r1, r5
 8004632:	eb63 0301 	sbc.w	r3, r3, r1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004644:	4659      	mov	r1, fp
 8004646:	018b      	lsls	r3, r1, #6
 8004648:	4651      	mov	r1, sl
 800464a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464e:	4651      	mov	r1, sl
 8004650:	018a      	lsls	r2, r1, #6
 8004652:	4651      	mov	r1, sl
 8004654:	ebb2 0801 	subs.w	r8, r2, r1
 8004658:	4659      	mov	r1, fp
 800465a:	eb63 0901 	sbc.w	r9, r3, r1
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004672:	4690      	mov	r8, r2
 8004674:	4699      	mov	r9, r3
 8004676:	4623      	mov	r3, r4
 8004678:	eb18 0303 	adds.w	r3, r8, r3
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	462b      	mov	r3, r5
 8004680:	eb49 0303 	adc.w	r3, r9, r3
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004692:	4629      	mov	r1, r5
 8004694:	024b      	lsls	r3, r1, #9
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800469c:	4621      	mov	r1, r4
 800469e:	024a      	lsls	r2, r1, #9
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	2200      	movs	r2, #0
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046b0:	f7fc fa9a 	bl	8000be8 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	e058      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	4611      	mov	r1, r2
 80046ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
 80046d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	f04f 0000 	mov.w	r0, #0
 80046e0:	f04f 0100 	mov.w	r1, #0
 80046e4:	0159      	lsls	r1, r3, #5
 80046e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ea:	0150      	lsls	r0, r2, #5
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4641      	mov	r1, r8
 80046f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046f6:	4649      	mov	r1, r9
 80046f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800470c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004710:	ebb2 040a 	subs.w	r4, r2, sl
 8004714:	eb63 050b 	sbc.w	r5, r3, fp
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	464b      	mov	r3, r9
 8004734:	eb45 0303 	adc.w	r3, r5, r3
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004746:	4629      	mov	r1, r5
 8004748:	028b      	lsls	r3, r1, #10
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004750:	4621      	mov	r1, r4
 8004752:	028a      	lsls	r2, r1, #10
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475a:	2200      	movs	r2, #0
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	61fa      	str	r2, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	f7fc fa40 	bl	8000be8 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800478e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004794:	4618      	mov	r0, r3
 8004796:	3750      	adds	r7, #80	; 0x50
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	007a1200 	.word	0x007a1200

080047ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	200001b0 	.word	0x200001b0

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800c748 	.word	0x0800c748

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047f0:	f7ff ffdc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0b5b      	lsrs	r3, r3, #13
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800c748 	.word	0x0800c748

08004814 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	220f      	movs	r2, #15
 8004822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_GetClockConfig+0x5c>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <HAL_RCC_GetClockConfig+0x5c>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_RCC_GetClockConfig+0x5c>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_RCC_GetClockConfig+0x60>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	40023c00 	.word	0x40023c00

08004878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048a0:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a68      	ldr	r2, [pc, #416]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048aa:	6093      	str	r3, [r2, #8]
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	4964      	ldr	r1, [pc, #400]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d2:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	4959      	ldr	r1, [pc, #356]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f0:	d101      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800490e:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	494a      	ldr	r1, [pc, #296]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492c:	d101      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800494a:	2301      	movs	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 808b 	beq.w	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800495c:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004966:	6413      	str	r3, [r2, #64]	; 0x40
 8004968:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004974:	4b35      	ldr	r3, [pc, #212]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a34      	ldr	r2, [pc, #208]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fe fb0c 	bl	8002f9c <HAL_GetTick>
 8004984:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fe fb08 	bl	8002f9c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e357      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800499a:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d035      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d02e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d114      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fad0 	bl	8002f9c <HAL_GetTick>
 80049fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe facc 	bl	8002f9c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e319      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2e:	d111      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a3e:	400b      	ands	r3, r1
 8004a40:	4901      	ldr	r1, [pc, #4]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
 8004a46:	e00b      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40007000 	.word	0x40007000
 8004a50:	0ffffcff 	.word	0x0ffffcff
 8004a54:	4baa      	ldr	r3, [pc, #680]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4aa9      	ldr	r2, [pc, #676]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a5e:	6093      	str	r3, [r2, #8]
 8004a60:	4ba7      	ldr	r3, [pc, #668]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	49a4      	ldr	r1, [pc, #656]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a7e:	4ba0      	ldr	r3, [pc, #640]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a84:	4a9e      	ldr	r2, [pc, #632]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	4999      	ldr	r1, [pc, #612]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aac:	4b94      	ldr	r3, [pc, #592]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aba:	4991      	ldr	r1, [pc, #580]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ace:	4b8c      	ldr	r3, [pc, #560]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004adc:	4988      	ldr	r1, [pc, #544]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004af0:	4b83      	ldr	r3, [pc, #524]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afe:	4980      	ldr	r1, [pc, #512]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b12:	4b7b      	ldr	r3, [pc, #492]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4977      	ldr	r1, [pc, #476]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	496f      	ldr	r1, [pc, #444]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f023 020c 	bic.w	r2, r3, #12
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b64:	4966      	ldr	r1, [pc, #408]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b78:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	495e      	ldr	r1, [pc, #376]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b9a:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	4955      	ldr	r1, [pc, #340]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	494d      	ldr	r1, [pc, #308]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bde:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	4944      	ldr	r1, [pc, #272]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c00:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	493c      	ldr	r1, [pc, #240]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	4933      	ldr	r1, [pc, #204]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c44:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c52:	492b      	ldr	r1, [pc, #172]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c74:	4922      	ldr	r1, [pc, #136]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	4912      	ldr	r1, [pc, #72]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd8:	4909      	ldr	r1, [pc, #36]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d006      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80d9 	beq.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a01      	ldr	r2, [pc, #4]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cfe:	e001      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d00:	40023800 	.word	0x40023800
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fe f949 	bl	8002f9c <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d0e:	f7fe f945 	bl	8002f9c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b64      	cmp	r3, #100	; 0x64
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e194      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d20:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f0      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d021      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11d      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d40:	4b64      	ldr	r3, [pc, #400]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	019a      	lsls	r2, r3, #6
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	071b      	lsls	r3, r3, #28
 8004d74:	4957      	ldr	r1, [pc, #348]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d02e      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da6:	d129      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004da8:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004db6:	4b47      	ldr	r3, [pc, #284]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbc:	0f1b      	lsrs	r3, r3, #28
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	019a      	lsls	r2, r3, #6
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	493d      	ldr	r1, [pc, #244]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dea:	f023 021f 	bic.w	r2, r3, #31
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4937      	ldr	r1, [pc, #220]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e08:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	0f1b      	lsrs	r3, r3, #28
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	019a      	lsls	r2, r3, #6
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	431a      	orrs	r2, r3
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	071b      	lsls	r3, r3, #28
 8004e3c:	4925      	ldr	r1, [pc, #148]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d011      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	019a      	lsls	r2, r3, #6
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	071b      	lsls	r3, r3, #28
 8004e6c:	4919      	ldr	r1, [pc, #100]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e74:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fe f88c 	bl	8002f9c <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e88:	f7fe f888 	bl	8002f9c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0d7      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 80cd 	bne.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eba:	f7fe f86f 	bl	8002f9c <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec2:	f7fe f86b 	bl	8002f9c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b64      	cmp	r3, #100	; 0x64
 8004ece:	d903      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0ba      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ed4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed8:	4b5e      	ldr	r3, [pc, #376]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee4:	d0ed      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d12a      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f0e:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0f1b      	lsrs	r3, r3, #28
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4944      	ldr	r1, [pc, #272]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f4a:	4b42      	ldr	r3, [pc, #264]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	493d      	ldr	r1, [pc, #244]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d022      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f78:	d11d      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f7a:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	0e1b      	lsrs	r3, r3, #24
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	0f1b      	lsrs	r3, r3, #28
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	019a      	lsls	r2, r3, #6
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	071b      	lsls	r3, r3, #28
 8004fae:	4929      	ldr	r1, [pc, #164]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d028      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fd0:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	019a      	lsls	r2, r3, #6
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	4917      	ldr	r1, [pc, #92]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4911      	ldr	r1, [pc, #68]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800501a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005020:	f7fd ffbc 	bl	8002f9c <HAL_GetTick>
 8005024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005028:	f7fd ffb8 	bl	8002f9c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e007      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005046:	d1ef      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e049      	b.n	80050fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fd fb3e 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 fc5c 	bl	8005954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e054      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d022      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d01d      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIM_Base_Start_IT+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d115      	bne.n	80051b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d015      	beq.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a0:	d011      	beq.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	e008      	b.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e000      	b.n	80051c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40001800 	.word	0x40001800
 80051f4:	00010007 	.word	0x00010007

080051f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e049      	b.n	800529e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd fa14 	bl	800264c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 fb8c 	bl	8005954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_TIM_PWM_Start+0x24>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e03c      	b.n	8005346 <HAL_TIM_PWM_Start+0x9e>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d109      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x3e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	e02f      	b.n	8005346 <HAL_TIM_PWM_Start+0x9e>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d109      	bne.n	8005300 <HAL_TIM_PWM_Start+0x58>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e022      	b.n	8005346 <HAL_TIM_PWM_Start+0x9e>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d109      	bne.n	800531a <HAL_TIM_PWM_Start+0x72>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e015      	b.n	8005346 <HAL_TIM_PWM_Start+0x9e>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d109      	bne.n	8005334 <HAL_TIM_PWM_Start+0x8c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e008      	b.n	8005346 <HAL_TIM_PWM_Start+0x9e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e092      	b.n	8005474 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Start+0xb6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	e023      	b.n	80053a6 <HAL_TIM_PWM_Start+0xfe>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0xc6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536c:	e01b      	b.n	80053a6 <HAL_TIM_PWM_Start+0xfe>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0xd6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800537c:	e013      	b.n	80053a6 <HAL_TIM_PWM_Start+0xfe>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b0c      	cmp	r3, #12
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0xe6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800538c:	e00b      	b.n	80053a6 <HAL_TIM_PWM_Start+0xfe>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b10      	cmp	r3, #16
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0xf6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539c:	e003      	b.n	80053a6 <HAL_TIM_PWM_Start+0xfe>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2201      	movs	r2, #1
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fdce 	bl	8005f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	; (800547c <HAL_TIM_PWM_Start+0x1d4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x120>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <HAL_TIM_PWM_Start+0x1d8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_TIM_PWM_Start+0x124>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_TIM_PWM_Start+0x126>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a25      	ldr	r2, [pc, #148]	; (800547c <HAL_TIM_PWM_Start+0x1d4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d01d      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_TIM_PWM_Start+0x1dc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d018      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <HAL_TIM_PWM_Start+0x1e0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_PWM_Start+0x1e4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <HAL_TIM_PWM_Start+0x1d8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <HAL_TIM_PWM_Start+0x1e8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_TIM_PWM_Start+0x18a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a19      	ldr	r2, [pc, #100]	; (8005494 <HAL_TIM_PWM_Start+0x1ec>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d115      	bne.n	800545e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4b17      	ldr	r3, [pc, #92]	; (8005498 <HAL_TIM_PWM_Start+0x1f0>)
 800543a:	4013      	ands	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b06      	cmp	r3, #6
 8005442:	d015      	beq.n	8005470 <HAL_TIM_PWM_Start+0x1c8>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d011      	beq.n	8005470 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	e008      	b.n	8005470 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40014000 	.word	0x40014000
 8005494:	40001800 	.word	0x40001800
 8005498:	00010007 	.word	0x00010007

0800549c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0202 	mvn.w	r2, #2
 80054c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa1a 	bl	8005918 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa0c 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa1d 	bl	800592c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0204 	mvn.w	r2, #4
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9f0 	bl	8005918 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9e2 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9f3 	bl	800592c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b08      	cmp	r3, #8
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9c6 	bl	8005918 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9b8 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9c9 	bl	800592c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d122      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d11b      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f99c 	bl	8005918 <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f98e 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f99f 	bl	800592c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0201 	mvn.w	r2, #1
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc ff1e 	bl	800245c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d10e      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d107      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fdbe 	bl	80061c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565a:	d10e      	bne.n	800567a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d107      	bne.n	800567a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fdb1 	bl	80061dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d10e      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d107      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800569e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f94d 	bl	8005940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d10e      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d107      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0220 	mvn.w	r2, #32
 80056ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fd71 	bl	80061b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ff      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b14      	cmp	r3, #20
 8005706:	f200 80f0 	bhi.w	80058ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005765 	.word	0x08005765
 8005714:	080058eb 	.word	0x080058eb
 8005718:	080058eb 	.word	0x080058eb
 800571c:	080058eb 	.word	0x080058eb
 8005720:	080057a5 	.word	0x080057a5
 8005724:	080058eb 	.word	0x080058eb
 8005728:	080058eb 	.word	0x080058eb
 800572c:	080058eb 	.word	0x080058eb
 8005730:	080057e7 	.word	0x080057e7
 8005734:	080058eb 	.word	0x080058eb
 8005738:	080058eb 	.word	0x080058eb
 800573c:	080058eb 	.word	0x080058eb
 8005740:	08005827 	.word	0x08005827
 8005744:	080058eb 	.word	0x080058eb
 8005748:	080058eb 	.word	0x080058eb
 800574c:	080058eb 	.word	0x080058eb
 8005750:	08005869 	.word	0x08005869
 8005754:	080058eb 	.word	0x080058eb
 8005758:	080058eb 	.word	0x080058eb
 800575c:	080058eb 	.word	0x080058eb
 8005760:	080058a9 	.word	0x080058a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f992 	bl	8005a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0204 	bic.w	r2, r2, #4
 800578e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6999      	ldr	r1, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	619a      	str	r2, [r3, #24]
      break;
 80057a2:	e0a5      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f9e4 	bl	8005b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6999      	ldr	r1, [r3, #24]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	619a      	str	r2, [r3, #24]
      break;
 80057e4:	e084      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fa3b 	bl	8005c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0208 	orr.w	r2, r2, #8
 8005800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0204 	bic.w	r2, r2, #4
 8005810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69d9      	ldr	r1, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	61da      	str	r2, [r3, #28]
      break;
 8005824:	e064      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa91 	bl	8005d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69d9      	ldr	r1, [r3, #28]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	61da      	str	r2, [r3, #28]
      break;
 8005866:	e043      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fac8 	bl	8005e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0204 	bic.w	r2, r2, #4
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058a6:	e023      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fafa 	bl	8005ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	021a      	lsls	r2, r3, #8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058e8:	e002      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
      break;
 80058ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop

08005904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a40      	ldr	r2, [pc, #256]	; (8005a68 <TIM_Base_SetConfig+0x114>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d00f      	beq.n	8005994 <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3d      	ldr	r2, [pc, #244]	; (8005a6c <TIM_Base_SetConfig+0x118>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3c      	ldr	r2, [pc, #240]	; (8005a70 <TIM_Base_SetConfig+0x11c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3b      	ldr	r2, [pc, #236]	; (8005a74 <TIM_Base_SetConfig+0x120>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3a      	ldr	r2, [pc, #232]	; (8005a78 <TIM_Base_SetConfig+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2f      	ldr	r2, [pc, #188]	; (8005a68 <TIM_Base_SetConfig+0x114>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02b      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b4:	d027      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2c      	ldr	r2, [pc, #176]	; (8005a6c <TIM_Base_SetConfig+0x118>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d023      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2b      	ldr	r2, [pc, #172]	; (8005a70 <TIM_Base_SetConfig+0x11c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01f      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <TIM_Base_SetConfig+0x120>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01b      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <TIM_Base_SetConfig+0x124>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d017      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <TIM_Base_SetConfig+0x128>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <TIM_Base_SetConfig+0x12c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00f      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <TIM_Base_SetConfig+0x130>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <TIM_Base_SetConfig+0x134>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <TIM_Base_SetConfig+0x138>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a23      	ldr	r2, [pc, #140]	; (8005a90 <TIM_Base_SetConfig+0x13c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d108      	bne.n	8005a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <TIM_Base_SetConfig+0x114>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_Base_SetConfig+0xf8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a0c      	ldr	r2, [pc, #48]	; (8005a78 <TIM_Base_SetConfig+0x124>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	615a      	str	r2, [r3, #20]
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	40010400 	.word	0x40010400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800
 8005a88:	40001800 	.word	0x40001800
 8005a8c:	40001c00 	.word	0x40001c00
 8005a90:	40002000 	.word	0x40002000

08005a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <TIM_OC1_SetConfig+0xd8>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0302 	bic.w	r3, r3, #2
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <TIM_OC1_SetConfig+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC1_SetConfig+0x64>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a20      	ldr	r2, [pc, #128]	; (8005b74 <TIM_OC1_SetConfig+0xe0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10c      	bne.n	8005b12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0308 	bic.w	r3, r3, #8
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <TIM_OC1_SetConfig+0xdc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC1_SetConfig+0x8e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC1_SetConfig+0xe0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d111      	bne.n	8005b46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	fffeff8f 	.word	0xfffeff8f
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40010400 	.word	0x40010400

08005b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0210 	bic.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <TIM_OC2_SetConfig+0xe4>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0320 	bic.w	r3, r3, #32
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <TIM_OC2_SetConfig+0xe8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <TIM_OC2_SetConfig+0xec>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC2_SetConfig+0xe8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_OC2_SetConfig+0x94>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC2_SetConfig+0xec>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d113      	bne.n	8005c34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	feff8fff 	.word	0xfeff8fff
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <TIM_OC3_SetConfig+0xe0>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x66>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <TIM_OC3_SetConfig+0xe8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC3_SetConfig+0x92>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <TIM_OC3_SetConfig+0xe8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	fffeff8f 	.word	0xfffeff8f
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <TIM_OC4_SetConfig+0xa4>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <TIM_OC4_SetConfig+0xa8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC4_SetConfig+0x68>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <TIM_OC4_SetConfig+0xac>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d109      	bne.n	8005dd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	feff8fff 	.word	0xfeff8fff
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40010400 	.word	0x40010400

08005e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <TIM_OC5_SetConfig+0x98>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <TIM_OC5_SetConfig+0x9c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC5_SetConfig+0x5e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <TIM_OC5_SetConfig+0xa0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d109      	bne.n	8005e76 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	fffeff8f 	.word	0xfffeff8f
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40010400 	.word	0x40010400

08005ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <TIM_OC6_SetConfig+0x9c>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	051b      	lsls	r3, r3, #20
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <TIM_OC6_SetConfig+0xa0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC6_SetConfig+0x60>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <TIM_OC6_SetConfig+0xa4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d109      	bne.n	8005f1c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	feff8fff 	.word	0xfeff8fff
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2201      	movs	r2, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e06d      	b.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a20      	ldr	r2, [pc, #128]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006026:	d01d      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d10c      	bne.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40010000 	.word	0x40010000
 80060a0:	40010400 	.word	0x40010400
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40001800 	.word	0x40001800

080060b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e065      	b.n	80061a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a16      	ldr	r2, [pc, #88]	; (80061ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d115      	bne.n	800618e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	051b      	lsls	r3, r3, #20
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40010400 	.word	0x40010400

080061b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e040      	b.n	8006284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fc fc2a 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	; 0x24
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f82c 	bl	800628c <UART_SetConfig>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e022      	b.n	8006284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa84 	bl	8006754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fb0b 	bl	8006898 <UART_CheckIdleState>
 8006282:	4603      	mov	r3, r0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4ba6      	ldr	r3, [pc, #664]	; (8006550 <UART_SetConfig+0x2c4>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a94      	ldr	r2, [pc, #592]	; (8006554 <UART_SetConfig+0x2c8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d120      	bne.n	800634a <UART_SetConfig+0xbe>
 8006308:	4b93      	ldr	r3, [pc, #588]	; (8006558 <UART_SetConfig+0x2cc>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d816      	bhi.n	8006344 <UART_SetConfig+0xb8>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x90>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	0800632d 	.word	0x0800632d
 8006320:	08006339 	.word	0x08006339
 8006324:	08006333 	.word	0x08006333
 8006328:	0800633f 	.word	0x0800633f
 800632c:	2301      	movs	r3, #1
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e150      	b.n	80065d4 <UART_SetConfig+0x348>
 8006332:	2302      	movs	r3, #2
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e14d      	b.n	80065d4 <UART_SetConfig+0x348>
 8006338:	2304      	movs	r3, #4
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e14a      	b.n	80065d4 <UART_SetConfig+0x348>
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e147      	b.n	80065d4 <UART_SetConfig+0x348>
 8006344:	2310      	movs	r3, #16
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e144      	b.n	80065d4 <UART_SetConfig+0x348>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a83      	ldr	r2, [pc, #524]	; (800655c <UART_SetConfig+0x2d0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d132      	bne.n	80063ba <UART_SetConfig+0x12e>
 8006354:	4b80      	ldr	r3, [pc, #512]	; (8006558 <UART_SetConfig+0x2cc>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f003 030c 	and.w	r3, r3, #12
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d828      	bhi.n	80063b4 <UART_SetConfig+0x128>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0xdc>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063b5 	.word	0x080063b5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063a9 	.word	0x080063a9
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063b5 	.word	0x080063b5
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063a3 	.word	0x080063a3
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063b5 	.word	0x080063b5
 8006398:	080063af 	.word	0x080063af
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e118      	b.n	80065d4 <UART_SetConfig+0x348>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e115      	b.n	80065d4 <UART_SetConfig+0x348>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e112      	b.n	80065d4 <UART_SetConfig+0x348>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e10f      	b.n	80065d4 <UART_SetConfig+0x348>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e10c      	b.n	80065d4 <UART_SetConfig+0x348>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a68      	ldr	r2, [pc, #416]	; (8006560 <UART_SetConfig+0x2d4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d120      	bne.n	8006406 <UART_SetConfig+0x17a>
 80063c4:	4b64      	ldr	r3, [pc, #400]	; (8006558 <UART_SetConfig+0x2cc>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ce:	2b30      	cmp	r3, #48	; 0x30
 80063d0:	d013      	beq.n	80063fa <UART_SetConfig+0x16e>
 80063d2:	2b30      	cmp	r3, #48	; 0x30
 80063d4:	d814      	bhi.n	8006400 <UART_SetConfig+0x174>
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d009      	beq.n	80063ee <UART_SetConfig+0x162>
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d810      	bhi.n	8006400 <UART_SetConfig+0x174>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <UART_SetConfig+0x15c>
 80063e2:	2b10      	cmp	r3, #16
 80063e4:	d006      	beq.n	80063f4 <UART_SetConfig+0x168>
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x174>
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e0f2      	b.n	80065d4 <UART_SetConfig+0x348>
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e0ef      	b.n	80065d4 <UART_SetConfig+0x348>
 80063f4:	2304      	movs	r3, #4
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e0ec      	b.n	80065d4 <UART_SetConfig+0x348>
 80063fa:	2308      	movs	r3, #8
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e0e9      	b.n	80065d4 <UART_SetConfig+0x348>
 8006400:	2310      	movs	r3, #16
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e0e6      	b.n	80065d4 <UART_SetConfig+0x348>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a56      	ldr	r2, [pc, #344]	; (8006564 <UART_SetConfig+0x2d8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d120      	bne.n	8006452 <UART_SetConfig+0x1c6>
 8006410:	4b51      	ldr	r3, [pc, #324]	; (8006558 <UART_SetConfig+0x2cc>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800641a:	2bc0      	cmp	r3, #192	; 0xc0
 800641c:	d013      	beq.n	8006446 <UART_SetConfig+0x1ba>
 800641e:	2bc0      	cmp	r3, #192	; 0xc0
 8006420:	d814      	bhi.n	800644c <UART_SetConfig+0x1c0>
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d009      	beq.n	800643a <UART_SetConfig+0x1ae>
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d810      	bhi.n	800644c <UART_SetConfig+0x1c0>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <UART_SetConfig+0x1a8>
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d006      	beq.n	8006440 <UART_SetConfig+0x1b4>
 8006432:	e00b      	b.n	800644c <UART_SetConfig+0x1c0>
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e0cc      	b.n	80065d4 <UART_SetConfig+0x348>
 800643a:	2302      	movs	r3, #2
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e0c9      	b.n	80065d4 <UART_SetConfig+0x348>
 8006440:	2304      	movs	r3, #4
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e0c6      	b.n	80065d4 <UART_SetConfig+0x348>
 8006446:	2308      	movs	r3, #8
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e0c3      	b.n	80065d4 <UART_SetConfig+0x348>
 800644c:	2310      	movs	r3, #16
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e0c0      	b.n	80065d4 <UART_SetConfig+0x348>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a44      	ldr	r2, [pc, #272]	; (8006568 <UART_SetConfig+0x2dc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d125      	bne.n	80064a8 <UART_SetConfig+0x21c>
 800645c:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <UART_SetConfig+0x2cc>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646a:	d017      	beq.n	800649c <UART_SetConfig+0x210>
 800646c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006470:	d817      	bhi.n	80064a2 <UART_SetConfig+0x216>
 8006472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006476:	d00b      	beq.n	8006490 <UART_SetConfig+0x204>
 8006478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647c:	d811      	bhi.n	80064a2 <UART_SetConfig+0x216>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <UART_SetConfig+0x1fe>
 8006482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006486:	d006      	beq.n	8006496 <UART_SetConfig+0x20a>
 8006488:	e00b      	b.n	80064a2 <UART_SetConfig+0x216>
 800648a:	2300      	movs	r3, #0
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e0a1      	b.n	80065d4 <UART_SetConfig+0x348>
 8006490:	2302      	movs	r3, #2
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e09e      	b.n	80065d4 <UART_SetConfig+0x348>
 8006496:	2304      	movs	r3, #4
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e09b      	b.n	80065d4 <UART_SetConfig+0x348>
 800649c:	2308      	movs	r3, #8
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e098      	b.n	80065d4 <UART_SetConfig+0x348>
 80064a2:	2310      	movs	r3, #16
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e095      	b.n	80065d4 <UART_SetConfig+0x348>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2f      	ldr	r2, [pc, #188]	; (800656c <UART_SetConfig+0x2e0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d125      	bne.n	80064fe <UART_SetConfig+0x272>
 80064b2:	4b29      	ldr	r3, [pc, #164]	; (8006558 <UART_SetConfig+0x2cc>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c0:	d017      	beq.n	80064f2 <UART_SetConfig+0x266>
 80064c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c6:	d817      	bhi.n	80064f8 <UART_SetConfig+0x26c>
 80064c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064cc:	d00b      	beq.n	80064e6 <UART_SetConfig+0x25a>
 80064ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d2:	d811      	bhi.n	80064f8 <UART_SetConfig+0x26c>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <UART_SetConfig+0x254>
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064dc:	d006      	beq.n	80064ec <UART_SetConfig+0x260>
 80064de:	e00b      	b.n	80064f8 <UART_SetConfig+0x26c>
 80064e0:	2301      	movs	r3, #1
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e076      	b.n	80065d4 <UART_SetConfig+0x348>
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e073      	b.n	80065d4 <UART_SetConfig+0x348>
 80064ec:	2304      	movs	r3, #4
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e070      	b.n	80065d4 <UART_SetConfig+0x348>
 80064f2:	2308      	movs	r3, #8
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e06d      	b.n	80065d4 <UART_SetConfig+0x348>
 80064f8:	2310      	movs	r3, #16
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e06a      	b.n	80065d4 <UART_SetConfig+0x348>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <UART_SetConfig+0x2e4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d138      	bne.n	800657a <UART_SetConfig+0x2ee>
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <UART_SetConfig+0x2cc>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006516:	d017      	beq.n	8006548 <UART_SetConfig+0x2bc>
 8006518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800651c:	d82a      	bhi.n	8006574 <UART_SetConfig+0x2e8>
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006522:	d00b      	beq.n	800653c <UART_SetConfig+0x2b0>
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006528:	d824      	bhi.n	8006574 <UART_SetConfig+0x2e8>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <UART_SetConfig+0x2aa>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	d006      	beq.n	8006542 <UART_SetConfig+0x2b6>
 8006534:	e01e      	b.n	8006574 <UART_SetConfig+0x2e8>
 8006536:	2300      	movs	r3, #0
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e04b      	b.n	80065d4 <UART_SetConfig+0x348>
 800653c:	2302      	movs	r3, #2
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e048      	b.n	80065d4 <UART_SetConfig+0x348>
 8006542:	2304      	movs	r3, #4
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e045      	b.n	80065d4 <UART_SetConfig+0x348>
 8006548:	2308      	movs	r3, #8
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e042      	b.n	80065d4 <UART_SetConfig+0x348>
 800654e:	bf00      	nop
 8006550:	efff69f3 	.word	0xefff69f3
 8006554:	40011000 	.word	0x40011000
 8006558:	40023800 	.word	0x40023800
 800655c:	40004400 	.word	0x40004400
 8006560:	40004800 	.word	0x40004800
 8006564:	40004c00 	.word	0x40004c00
 8006568:	40005000 	.word	0x40005000
 800656c:	40011400 	.word	0x40011400
 8006570:	40007800 	.word	0x40007800
 8006574:	2310      	movs	r3, #16
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e02c      	b.n	80065d4 <UART_SetConfig+0x348>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a72      	ldr	r2, [pc, #456]	; (8006748 <UART_SetConfig+0x4bc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d125      	bne.n	80065d0 <UART_SetConfig+0x344>
 8006584:	4b71      	ldr	r3, [pc, #452]	; (800674c <UART_SetConfig+0x4c0>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800658e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006592:	d017      	beq.n	80065c4 <UART_SetConfig+0x338>
 8006594:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006598:	d817      	bhi.n	80065ca <UART_SetConfig+0x33e>
 800659a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659e:	d00b      	beq.n	80065b8 <UART_SetConfig+0x32c>
 80065a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a4:	d811      	bhi.n	80065ca <UART_SetConfig+0x33e>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <UART_SetConfig+0x326>
 80065aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ae:	d006      	beq.n	80065be <UART_SetConfig+0x332>
 80065b0:	e00b      	b.n	80065ca <UART_SetConfig+0x33e>
 80065b2:	2300      	movs	r3, #0
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e00d      	b.n	80065d4 <UART_SetConfig+0x348>
 80065b8:	2302      	movs	r3, #2
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e00a      	b.n	80065d4 <UART_SetConfig+0x348>
 80065be:	2304      	movs	r3, #4
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e007      	b.n	80065d4 <UART_SetConfig+0x348>
 80065c4:	2308      	movs	r3, #8
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e004      	b.n	80065d4 <UART_SetConfig+0x348>
 80065ca:	2310      	movs	r3, #16
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e001      	b.n	80065d4 <UART_SetConfig+0x348>
 80065d0:	2310      	movs	r3, #16
 80065d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065dc:	d15b      	bne.n	8006696 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d828      	bhi.n	8006636 <UART_SetConfig+0x3aa>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x360>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	08006611 	.word	0x08006611
 80065f0:	08006619 	.word	0x08006619
 80065f4:	08006621 	.word	0x08006621
 80065f8:	08006637 	.word	0x08006637
 80065fc:	08006627 	.word	0x08006627
 8006600:	08006637 	.word	0x08006637
 8006604:	08006637 	.word	0x08006637
 8006608:	08006637 	.word	0x08006637
 800660c:	0800662f 	.word	0x0800662f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006610:	f7fe f8d8 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e013      	b.n	8006640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fe f8e8 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 800661c:	61b8      	str	r0, [r7, #24]
        break;
 800661e:	e00f      	b.n	8006640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006620:	4b4b      	ldr	r3, [pc, #300]	; (8006750 <UART_SetConfig+0x4c4>)
 8006622:	61bb      	str	r3, [r7, #24]
        break;
 8006624:	e00c      	b.n	8006640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006626:	f7fd ffbb 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800662a:	61b8      	str	r0, [r7, #24]
        break;
 800662c:	e008      	b.n	8006640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006632:	61bb      	str	r3, [r7, #24]
        break;
 8006634:	e004      	b.n	8006640 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	77bb      	strb	r3, [r7, #30]
        break;
 800663e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d074      	beq.n	8006730 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	005a      	lsls	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	441a      	add	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	fbb2 f3f3 	udiv	r3, r2, r3
 800665a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b0f      	cmp	r3, #15
 8006660:	d916      	bls.n	8006690 <UART_SetConfig+0x404>
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006668:	d212      	bcs.n	8006690 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f023 030f 	bic.w	r3, r3, #15
 8006672:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	b29b      	uxth	r3, r3
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	b29a      	uxth	r2, r3
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	4313      	orrs	r3, r2
 8006684:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	89fa      	ldrh	r2, [r7, #14]
 800668c:	60da      	str	r2, [r3, #12]
 800668e:	e04f      	b.n	8006730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	77bb      	strb	r3, [r7, #30]
 8006694:	e04c      	b.n	8006730 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d828      	bhi.n	80066ee <UART_SetConfig+0x462>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x418>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fe f87c 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e013      	b.n	80066f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe f88c 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 80066d4:	61b8      	str	r0, [r7, #24]
        break;
 80066d6:	e00f      	b.n	80066f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <UART_SetConfig+0x4c4>)
 80066da:	61bb      	str	r3, [r7, #24]
        break;
 80066dc:	e00c      	b.n	80066f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fd ff5f 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80066e2:	61b8      	str	r0, [r7, #24]
        break;
 80066e4:	e008      	b.n	80066f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e004      	b.n	80066f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77bb      	strb	r3, [r7, #30]
        break;
 80066f6:	bf00      	nop
    }

    if (pclk != 0U)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	085a      	lsrs	r2, r3, #1
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	441a      	add	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006710:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b0f      	cmp	r3, #15
 8006716:	d909      	bls.n	800672c <UART_SetConfig+0x4a0>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671e:	d205      	bcs.n	800672c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e001      	b.n	8006730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800673c:	7fbb      	ldrb	r3, [r7, #30]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40007c00 	.word	0x40007c00
 800674c:	40023800 	.word	0x40023800
 8006750:	00f42400 	.word	0x00f42400

08006754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01a      	beq.n	800686a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006852:	d10a      	bne.n	800686a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af02      	add	r7, sp, #8
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a8:	f7fc fb78 	bl	8002f9c <HAL_GetTick>
 80068ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d10e      	bne.n	80068da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f81b 	bl	8006906 <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e011      	b.n	80068fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b09c      	sub	sp, #112	; 0x70
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006916:	e0a7      	b.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	f000 80a3 	beq.w	8006a68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fc fb3b 	bl	8002f9c <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <UART_WaitOnFlagUntilTimeout+0x32>
 8006932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006934:	2b00      	cmp	r3, #0
 8006936:	d13f      	bne.n	80069b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800694c:	667b      	str	r3, [r7, #100]	; 0x64
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006958:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800695c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	663b      	str	r3, [r7, #96]	; 0x60
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800698a:	64ba      	str	r2, [r7, #72]	; 0x48
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e068      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d050      	beq.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d4:	d148      	bne.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006a00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a32:	623a      	str	r2, [r7, #32]
 8006a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	69f9      	ldr	r1, [r7, #28]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e010      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69da      	ldr	r2, [r3, #28]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	f43f af48 	beq.w	8006918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3770      	adds	r7, #112	; 0x70
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 001c 	add.w	r0, r7, #28
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d120      	bne.n	8006aee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <USB_CoreInit+0xac>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa96 	bl	8007014 <USB_CoreReset>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e010      	b.n	8006b10 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa8a 	bl	8007014 <USB_CoreReset>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d10b      	bne.n	8006b2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f043 0206 	orr.w	r2, r3, #6
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b3a:	b004      	add	sp, #16
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	ffbdffbf 	.word	0xffbdffbf

08006b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f023 0201 	bic.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d115      	bne.n	8006bb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b94:	2001      	movs	r0, #1
 8006b96:	f7fc fa0d 	bl	8002fb4 <HAL_Delay>
      ms++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa29 	bl	8006ff8 <USB_GetMode>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d01e      	beq.n	8006bea <USB_SetCurrentMode+0x84>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b31      	cmp	r3, #49	; 0x31
 8006bb0:	d9f0      	bls.n	8006b94 <USB_SetCurrentMode+0x2e>
 8006bb2:	e01a      	b.n	8006bea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d115      	bne.n	8006be6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fc f9f4 	bl	8002fb4 <HAL_Delay>
      ms++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa10 	bl	8006ff8 <USB_GetMode>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <USB_SetCurrentMode+0x84>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b31      	cmp	r3, #49	; 0x31
 8006be2:	d9f0      	bls.n	8006bc6 <USB_SetCurrentMode+0x60>
 8006be4:	e001      	b.n	8006bea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e005      	b.n	8006bf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b32      	cmp	r3, #50	; 0x32
 8006bee:	d101      	bne.n	8006bf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c00:	b084      	sub	sp, #16
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	e009      	b.n	8006c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	3340      	adds	r3, #64	; 0x40
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	3301      	adds	r3, #1
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b0e      	cmp	r3, #14
 8006c38:	d9f2      	bls.n	8006c20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11c      	bne.n	8006c7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c4e:	f043 0302 	orr.w	r3, r3, #2
 8006c52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e005      	b.n	8006c86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	680b      	ldr	r3, [r1, #0]
 8006ca4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d10c      	bne.n	8006cc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f965 	bl	8006f84 <USB_SetDevSpeed>
 8006cba:	e008      	b.n	8006cce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f960 	bl	8006f84 <USB_SetDevSpeed>
 8006cc4:	e003      	b.n	8006cce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cc6:	2103      	movs	r1, #3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f95b 	bl	8006f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cce:	2110      	movs	r1, #16
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8f3 	bl	8006ebc <USB_FlushTxFifo>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f91f 	bl	8006f24 <USB_FlushRxFifo>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	461a      	mov	r2, r3
 8006d04:	2300      	movs	r3, #0
 8006d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d14:	2300      	movs	r3, #0
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	e043      	b.n	8006da2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d30:	d118      	bne.n	8006d64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	461a      	mov	r2, r3
 8006d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e013      	b.n	8006d76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e008      	b.n	8006d76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	461a      	mov	r2, r3
 8006d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d3b7      	bcc.n	8006d1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e043      	b.n	8006e38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dc6:	d118      	bne.n	8006dfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e013      	b.n	8006e0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	e008      	b.n	8006e0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3301      	adds	r3, #1
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d3b7      	bcc.n	8006db0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d105      	bne.n	8006e74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f043 0210 	orr.w	r2, r3, #16
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <USB_DevInit+0x2b4>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f043 0208 	orr.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d105      	bne.n	8006ea4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <USB_DevInit+0x2b8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb0:	b004      	add	sp, #16
 8006eb2:	4770      	bx	lr
 8006eb4:	803c3800 	.word	0x803c3800
 8006eb8:	40000004 	.word	0x40000004

08006ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <USB_FlushTxFifo+0x64>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e01b      	b.n	8006f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	daf2      	bge.n	8006eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	019b      	lsls	r3, r3, #6
 8006eec:	f043 0220 	orr.w	r2, r3, #32
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a08      	ldr	r2, [pc, #32]	; (8006f20 <USB_FlushTxFifo+0x64>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d901      	bls.n	8006f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e006      	b.n	8006f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d0f0      	beq.n	8006ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	00030d40 	.word	0x00030d40

08006f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a11      	ldr	r2, [pc, #68]	; (8006f80 <USB_FlushRxFifo+0x5c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e018      	b.n	8006f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	daf2      	bge.n	8006f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2210      	movs	r2, #16
 8006f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a08      	ldr	r2, [pc, #32]	; (8006f80 <USB_FlushRxFifo+0x5c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e006      	b.n	8006f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d0f0      	beq.n	8006f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	00030d40 	.word	0x00030d40

08006f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fd0:	f023 0303 	bic.w	r3, r3, #3
 8006fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe4:	f043 0302 	orr.w	r3, r3, #2
 8006fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0301 	and.w	r3, r3, #1
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <USB_CoreReset+0x64>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e01b      	b.n	800706a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	daf2      	bge.n	8007020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f043 0201 	orr.w	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a09      	ldr	r2, [pc, #36]	; (8007078 <USB_CoreReset+0x64>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d901      	bls.n	800705c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e006      	b.n	800706a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d0f0      	beq.n	800704a <USB_CoreReset+0x36>

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	00030d40 	.word	0x00030d40

0800707c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007080:	bf00      	nop
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007092:	f3ef 8305 	mrs	r3, IPSR
 8007096:	60bb      	str	r3, [r7, #8]
  return(result);
 8007098:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10f      	bne.n	80070be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709e:	f3ef 8310 	mrs	r3, PRIMASK
 80070a2:	607b      	str	r3, [r7, #4]
  return(result);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070aa:	f3ef 8311 	mrs	r3, BASEPRI
 80070ae:	603b      	str	r3, [r7, #0]
  return(result);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <osKernelInitialize+0x3a>
 80070b6:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <osKernelInitialize+0x64>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d103      	bne.n	80070c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80070be:	f06f 0305 	mvn.w	r3, #5
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e00c      	b.n	80070e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <osKernelInitialize+0x64>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070ce:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <osKernelInitialize+0x64>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	e002      	b.n	80070e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000e2c 	.word	0x20000e2c

080070f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070fa:	f3ef 8305 	mrs	r3, IPSR
 80070fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007100:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007106:	f3ef 8310 	mrs	r3, PRIMASK
 800710a:	607b      	str	r3, [r7, #4]
  return(result);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007112:	f3ef 8311 	mrs	r3, BASEPRI
 8007116:	603b      	str	r3, [r7, #0]
  return(result);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <osKernelStart+0x3a>
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <osKernelStart+0x68>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d103      	bne.n	800712e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007126:	f06f 0305 	mvn.w	r3, #5
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e010      	b.n	8007150 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800712e:	4b0b      	ldr	r3, [pc, #44]	; (800715c <osKernelStart+0x68>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d109      	bne.n	800714a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007136:	f7ff ffa1 	bl	800707c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800713a:	4b08      	ldr	r3, [pc, #32]	; (800715c <osKernelStart+0x68>)
 800713c:	2202      	movs	r2, #2
 800713e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007140:	f001 f8b4 	bl	80082ac <vTaskStartScheduler>
      stat = osOK;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e002      	b.n	8007150 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800714a:	f04f 33ff 	mov.w	r3, #4294967295
 800714e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007150:	68fb      	ldr	r3, [r7, #12]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000e2c 	.word	0x20000e2c

08007160 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b090      	sub	sp, #64	; 0x40
 8007164:	af04      	add	r7, sp, #16
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007170:	f3ef 8305 	mrs	r3, IPSR
 8007174:	61fb      	str	r3, [r7, #28]
  return(result);
 8007176:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 808f 	bne.w	800729c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800717e:	f3ef 8310 	mrs	r3, PRIMASK
 8007182:	61bb      	str	r3, [r7, #24]
  return(result);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800718a:	f3ef 8311 	mrs	r3, BASEPRI
 800718e:	617b      	str	r3, [r7, #20]
  return(result);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <osThreadNew+0x3e>
 8007196:	4b44      	ldr	r3, [pc, #272]	; (80072a8 <osThreadNew+0x148>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d07e      	beq.n	800729c <osThreadNew+0x13c>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d07b      	beq.n	800729c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80071a4:	2380      	movs	r3, #128	; 0x80
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80071a8:	2318      	movs	r3, #24
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d045      	beq.n	8007248 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <osThreadNew+0x6a>
        name = attr->name;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <osThreadNew+0x90>
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	2b38      	cmp	r3, #56	; 0x38
 80071e2:	d805      	bhi.n	80071f0 <osThreadNew+0x90>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <osThreadNew+0x94>
        return (NULL);
 80071f0:	2300      	movs	r3, #0
 80071f2:	e054      	b.n	800729e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	089b      	lsrs	r3, r3, #2
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <osThreadNew+0xca>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b5b      	cmp	r3, #91	; 0x5b
 8007212:	d90a      	bls.n	800722a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <osThreadNew+0xca>
        mem = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	e010      	b.n	800724c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <osThreadNew+0xec>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <osThreadNew+0xec>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <osThreadNew+0xec>
          mem = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	e001      	b.n	800724c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d110      	bne.n	8007274 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800725a:	9202      	str	r2, [sp, #8]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fe3f 	bl	8007eec <xTaskCreateStatic>
 800726e:	4603      	mov	r3, r0
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	e013      	b.n	800729c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d110      	bne.n	800729c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	b29a      	uxth	r2, r3
 800727e:	f107 0310 	add.w	r3, r7, #16
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fe90 	bl	8007fb2 <xTaskCreate>
 8007292:	4603      	mov	r3, r0
 8007294:	2b01      	cmp	r3, #1
 8007296:	d001      	beq.n	800729c <osThreadNew+0x13c>
          hTask = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800729c:	693b      	ldr	r3, [r7, #16]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3730      	adds	r7, #48	; 0x30
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000e2c 	.word	0x20000e2c

080072ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b4:	f3ef 8305 	mrs	r3, IPSR
 80072b8:	613b      	str	r3, [r7, #16]
  return(result);
 80072ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10f      	bne.n	80072e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c0:	f3ef 8310 	mrs	r3, PRIMASK
 80072c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072cc:	f3ef 8311 	mrs	r3, BASEPRI
 80072d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <osDelay+0x3c>
 80072d8:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <osDelay+0x58>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d103      	bne.n	80072e8 <osDelay+0x3c>
    stat = osErrorISR;
 80072e0:	f06f 0305 	mvn.w	r3, #5
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e007      	b.n	80072f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 ffa4 	bl	8008240 <vTaskDelay>
    }
  }

  return (stat);
 80072f8:	697b      	ldr	r3, [r7, #20]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000e2c 	.word	0x20000e2c

08007308 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a07      	ldr	r2, [pc, #28]	; (8007334 <vApplicationGetIdleTaskMemory+0x2c>)
 8007318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a06      	ldr	r2, [pc, #24]	; (8007338 <vApplicationGetIdleTaskMemory+0x30>)
 800731e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2280      	movs	r2, #128	; 0x80
 8007324:	601a      	str	r2, [r3, #0]
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000e30 	.word	0x20000e30
 8007338:	20000e8c 	.word	0x20000e8c

0800733c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <vApplicationGetTimerTaskMemory+0x2c>)
 800734c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4a06      	ldr	r2, [pc, #24]	; (800736c <vApplicationGetTimerTaskMemory+0x30>)
 8007352:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800735a:	601a      	str	r2, [r3, #0]
}
 800735c:	bf00      	nop
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	2000108c 	.word	0x2000108c
 800736c:	200010e8 	.word	0x200010e8

08007370 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f103 0208 	add.w	r2, r3, #8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f04f 32ff 	mov.w	r2, #4294967295
 8007388:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f103 0208 	add.w	r2, r3, #8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f103 0208 	add.w	r2, r3, #8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d103      	bne.n	8007432 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	e00c      	b.n	800744c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3308      	adds	r3, #8
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e002      	b.n	8007440 <vListInsert+0x2e>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	d2f6      	bcs.n	800743a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6892      	ldr	r2, [r2, #8]
 800749a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6852      	ldr	r2, [r2, #4]
 80074a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d103      	bne.n	80074b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	1e5a      	subs	r2, r3, #1
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	b672      	cpsid	i
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	b662      	cpsie	i
 8007500:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007506:	f002 f879 	bl	80095fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	441a      	add	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	3b01      	subs	r3, #1
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	22ff      	movs	r2, #255	; 0xff
 800754a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	22ff      	movs	r2, #255	; 0xff
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d114      	bne.n	8007586 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01a      	beq.n	800759a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3310      	adds	r3, #16
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f937 	bl	80087dc <xTaskRemoveFromEventList>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xQueueGenericReset+0xd0>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	e009      	b.n	800759a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3310      	adds	r3, #16
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fef0 	bl	8007370 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff feeb 	bl	8007370 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f002 f863 	bl	8009664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800759e:	2301      	movs	r3, #1
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	b672      	cpsid	i
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	b662      	cpsie	i
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	b672      	cpsid	i
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	b662      	cpsie	i
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <xQueueGenericCreateStatic+0x5a>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <xQueueGenericCreateStatic+0x5e>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueGenericCreateStatic+0x60>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	b672      	cpsid	i
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	b662      	cpsie	i
 8007624:	623b      	str	r3, [r7, #32]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <xQueueGenericCreateStatic+0x8a>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <xQueueGenericCreateStatic+0x8e>
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <xQueueGenericCreateStatic+0x90>
 800763a:	2300      	movs	r3, #0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10c      	bne.n	800765a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	b672      	cpsid	i
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	b662      	cpsie	i
 8007654:	61fb      	str	r3, [r7, #28]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800765a:	2350      	movs	r3, #80	; 0x50
 800765c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b50      	cmp	r3, #80	; 0x50
 8007662:	d00c      	beq.n	800767e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	b672      	cpsid	i
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	b662      	cpsie	i
 8007678:	61bb      	str	r3, [r7, #24]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800767e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	4613      	mov	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f805 	bl	80076b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3730      	adds	r7, #48	; 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e002      	b.n	80076d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076de:	2101      	movs	r1, #1
 80076e0:	69b8      	ldr	r0, [r7, #24]
 80076e2:	f7ff fef9 	bl	80074d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08e      	sub	sp, #56	; 0x38
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10c      	bne.n	800772e <xQueueGenericSend+0x36>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	b672      	cpsid	i
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	b662      	cpsie	i
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <xQueueGenericSend+0x44>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <xQueueGenericSend+0x48>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <xQueueGenericSend+0x4a>
 8007740:	2300      	movs	r3, #0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10c      	bne.n	8007760 <xQueueGenericSend+0x68>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	b672      	cpsid	i
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	b662      	cpsie	i
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d103      	bne.n	800776e <xQueueGenericSend+0x76>
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <xQueueGenericSend+0x7a>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <xQueueGenericSend+0x7c>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10c      	bne.n	8007792 <xQueueGenericSend+0x9a>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	b672      	cpsid	i
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	b662      	cpsie	i
 800778c:	623b      	str	r3, [r7, #32]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007792:	f001 f9e9 	bl	8008b68 <xTaskGetSchedulerState>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <xQueueGenericSend+0xaa>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <xQueueGenericSend+0xae>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <xQueueGenericSend+0xb0>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10c      	bne.n	80077c6 <xQueueGenericSend+0xce>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	b672      	cpsid	i
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	b662      	cpsie	i
 80077c0:	61fb      	str	r3, [r7, #28]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c6:	f001 ff19 	bl	80095fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <xQueueGenericSend+0xe4>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d129      	bne.n	8007830 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077e2:	f000 fa15 	bl	8007c10 <prvCopyDataToQueue>
 80077e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d010      	beq.n	8007812 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	3324      	adds	r3, #36	; 0x24
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fff1 	bl	80087dc <xTaskRemoveFromEventList>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d013      	beq.n	8007828 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007800:	4b3f      	ldr	r3, [pc, #252]	; (8007900 <xQueueGenericSend+0x208>)
 8007802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	e00a      	b.n	8007828 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007818:	4b39      	ldr	r3, [pc, #228]	; (8007900 <xQueueGenericSend+0x208>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007828:	f001 ff1c 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 800782c:	2301      	movs	r3, #1
 800782e:	e063      	b.n	80078f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007836:	f001 ff15 	bl	8009664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800783a:	2300      	movs	r3, #0
 800783c:	e05c      	b.n	80078f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007844:	f107 0314 	add.w	r3, r7, #20
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f82d 	bl	80088a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800784e:	2301      	movs	r3, #1
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007852:	f001 ff07 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007856:	f000 fd93 	bl	8008380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800785a:	f001 fecf 	bl	80095fc <vPortEnterCritical>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007864:	b25b      	sxtb	r3, r3
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d103      	bne.n	8007874 <xQueueGenericSend+0x17c>
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787a:	b25b      	sxtb	r3, r3
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d103      	bne.n	800788a <xQueueGenericSend+0x192>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800788a:	f001 feeb 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800788e:	1d3a      	adds	r2, r7, #4
 8007890:	f107 0314 	add.w	r3, r7, #20
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f81c 	bl	80088d4 <xTaskCheckForTimeOut>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d124      	bne.n	80078ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078a4:	f000 faac 	bl	8007e00 <prvIsQueueFull>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d018      	beq.n	80078e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	3310      	adds	r3, #16
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	4611      	mov	r1, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 ff3c 	bl	8008734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078be:	f000 fa37 	bl	8007d30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078c2:	f000 fd6b 	bl	800839c <xTaskResumeAll>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f47f af7c 	bne.w	80077c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <xQueueGenericSend+0x208>)
 80078d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	e772      	b.n	80077c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e2:	f000 fa25 	bl	8007d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078e6:	f000 fd59 	bl	800839c <xTaskResumeAll>
 80078ea:	e76c      	b.n	80077c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ee:	f000 fa1f 	bl	8007d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078f2:	f000 fd53 	bl	800839c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3738      	adds	r7, #56	; 0x38
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08e      	sub	sp, #56	; 0x38
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	b672      	cpsid	i
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	b662      	cpsie	i
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <xQueueGenericSendFromISR+0x40>
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <xQueueGenericSendFromISR+0x44>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <xQueueGenericSendFromISR+0x46>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	b672      	cpsid	i
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	b662      	cpsie	i
 8007962:	623b      	str	r3, [r7, #32]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d103      	bne.n	8007976 <xQueueGenericSendFromISR+0x72>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <xQueueGenericSendFromISR+0x76>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xQueueGenericSendFromISR+0x78>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800799a:	f001 ff17 	bl	80097cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800799e:	f3ef 8211 	mrs	r2, BASEPRI
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	61ba      	str	r2, [r7, #24]
 80079b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d302      	bcc.n	80079d0 <xQueueGenericSendFromISR+0xcc>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d12c      	bne.n	8007a2a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e0:	f000 f916 	bl	8007c10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d112      	bne.n	8007a14 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	3324      	adds	r3, #36	; 0x24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 feee 	bl	80087dc <xTaskRemoveFromEventList>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e007      	b.n	8007a24 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a18:	3301      	adds	r3, #1
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	b25a      	sxtb	r2, r3
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007a28:	e001      	b.n	8007a2e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3738      	adds	r7, #56	; 0x38
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	; 0x30
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10c      	bne.n	8007a78 <xQueueReceive+0x34>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	b672      	cpsid	i
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	b662      	cpsie	i
 8007a72:	623b      	str	r3, [r7, #32]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d103      	bne.n	8007a86 <xQueueReceive+0x42>
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <xQueueReceive+0x46>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueReceive+0x48>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <xQueueReceive+0x66>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	b672      	cpsid	i
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	61fb      	str	r3, [r7, #28]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aaa:	f001 f85d 	bl	8008b68 <xTaskGetSchedulerState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <xQueueReceive+0x76>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <xQueueReceive+0x7a>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueReceive+0x7c>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10c      	bne.n	8007ade <xQueueReceive+0x9a>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	61bb      	str	r3, [r7, #24]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ade:	f001 fd8d 	bl	80095fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01f      	beq.n	8007b2e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af2:	f000 f8f7 	bl	8007ce4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	1e5a      	subs	r2, r3, #1
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00f      	beq.n	8007b26 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	3310      	adds	r3, #16
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fe66 	bl	80087dc <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b16:	4b3d      	ldr	r3, [pc, #244]	; (8007c0c <xQueueReceive+0x1c8>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b26:	f001 fd9d 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e069      	b.n	8007c02 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b34:	f001 fd96 	bl	8009664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e062      	b.n	8007c02 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b42:	f107 0310 	add.w	r3, r7, #16
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 feae 	bl	80088a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b50:	f001 fd88 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b54:	f000 fc14 	bl	8008380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b58:	f001 fd50 	bl	80095fc <vPortEnterCritical>
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d103      	bne.n	8007b72 <xQueueReceive+0x12e>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d103      	bne.n	8007b88 <xQueueReceive+0x144>
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b88:	f001 fd6c 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b8c:	1d3a      	adds	r2, r7, #4
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fe9d 	bl	80088d4 <xTaskCheckForTimeOut>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d123      	bne.n	8007be8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba2:	f000 f917 	bl	8007dd4 <prvIsQueueEmpty>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d017      	beq.n	8007bdc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	3324      	adds	r3, #36	; 0x24
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fdbd 	bl	8008734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bbc:	f000 f8b8 	bl	8007d30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bc0:	f000 fbec 	bl	800839c <xTaskResumeAll>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d189      	bne.n	8007ade <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <xQueueReceive+0x1c8>)
 8007bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	e780      	b.n	8007ade <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bde:	f000 f8a7 	bl	8007d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007be2:	f000 fbdb 	bl	800839c <xTaskResumeAll>
 8007be6:	e77a      	b.n	8007ade <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bea:	f000 f8a1 	bl	8007d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bee:	f000 fbd5 	bl	800839c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf4:	f000 f8ee 	bl	8007dd4 <prvIsQueueEmpty>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f43f af6f 	beq.w	8007ade <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3730      	adds	r7, #48	; 0x30
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	e000ed04 	.word	0xe000ed04

08007c10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10d      	bne.n	8007c4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d14d      	bne.n	8007cd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 ffb2 	bl	8008ba4 <xTaskPriorityDisinherit>
 8007c40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	e043      	b.n	8007cd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d119      	bne.n	8007c84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6858      	ldr	r0, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	f002 f808 	bl	8009c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	441a      	add	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d32b      	bcc.n	8007cd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	e026      	b.n	8007cd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68d8      	ldr	r0, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	f001 ffee 	bl	8009c70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	425b      	negs	r3, r3
 8007c9e:	441a      	add	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d207      	bcs.n	8007cc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	425b      	negs	r3, r3
 8007cba:	441a      	add	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d105      	bne.n	8007cd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007cda:	697b      	ldr	r3, [r7, #20]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	441a      	add	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d303      	bcc.n	8007d18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68d9      	ldr	r1, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	461a      	mov	r2, r3
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f001 ffa4 	bl	8009c70 <memcpy>
	}
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d38:	f001 fc60 	bl	80095fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d44:	e011      	b.n	8007d6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d012      	beq.n	8007d74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3324      	adds	r3, #36	; 0x24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fd42 	bl	80087dc <xTaskRemoveFromEventList>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d5e:	f000 fe1f 	bl	80089a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dce9      	bgt.n	8007d46 <prvUnlockQueue+0x16>
 8007d72:	e000      	b.n	8007d76 <prvUnlockQueue+0x46>
					break;
 8007d74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	22ff      	movs	r2, #255	; 0xff
 8007d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d7e:	f001 fc71 	bl	8009664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d82:	f001 fc3b 	bl	80095fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d8e:	e011      	b.n	8007db4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d012      	beq.n	8007dbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3310      	adds	r3, #16
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd1d 	bl	80087dc <xTaskRemoveFromEventList>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007da8:	f000 fdfa 	bl	80089a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dce9      	bgt.n	8007d90 <prvUnlockQueue+0x60>
 8007dbc:	e000      	b.n	8007dc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	22ff      	movs	r2, #255	; 0xff
 8007dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007dc8:	f001 fc4c 	bl	8009664 <vPortExitCritical>
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ddc:	f001 fc0e 	bl	80095fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e001      	b.n	8007df2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f001 fc37 	bl	8009664 <vPortExitCritical>

	return xReturn;
 8007df6:	68fb      	ldr	r3, [r7, #12]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e08:	f001 fbf8 	bl	80095fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d102      	bne.n	8007e1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e001      	b.n	8007e22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e22:	f001 fc1f 	bl	8009664 <vPortExitCritical>

	return xReturn;
 8007e26:	68fb      	ldr	r3, [r7, #12]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e014      	b.n	8007e6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e40:	4a0f      	ldr	r2, [pc, #60]	; (8007e80 <vQueueAddToRegistry+0x50>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e4c:	490c      	ldr	r1, [pc, #48]	; (8007e80 <vQueueAddToRegistry+0x50>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e56:	4a0a      	ldr	r2, [pc, #40]	; (8007e80 <vQueueAddToRegistry+0x50>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e62:	e006      	b.n	8007e72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b07      	cmp	r3, #7
 8007e6e:	d9e7      	bls.n	8007e40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	200014e8 	.word	0x200014e8

08007e84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e94:	f001 fbb2 	bl	80095fc <vPortEnterCritical>
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <vQueueWaitForMessageRestricted+0x2a>
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d103      	bne.n	8007ec4 <vQueueWaitForMessageRestricted+0x40>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec4:	f001 fbce 	bl	8009664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d106      	bne.n	8007ede <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fc51 	bl	8008780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ede:	6978      	ldr	r0, [r7, #20]
 8007ee0:	f7ff ff26 	bl	8007d30 <prvUnlockQueue>
	}
 8007ee4:	bf00      	nop
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	623b      	str	r3, [r7, #32]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	61fb      	str	r3, [r7, #28]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f3a:	235c      	movs	r3, #92	; 0x5c
 8007f3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b5c      	cmp	r3, #92	; 0x5c
 8007f42:	d00c      	beq.n	8007f5e <xTaskCreateStatic+0x72>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	b672      	cpsid	i
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	b662      	cpsie	i
 8007f58:	61bb      	str	r3, [r7, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01e      	beq.n	8007fa4 <xTaskCreateStatic+0xb8>
 8007f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01b      	beq.n	8007fa4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	9302      	str	r3, [sp, #8]
 8007f86:	f107 0314 	add.w	r3, r7, #20
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f850 	bl	800803c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f9e:	f000 f8df 	bl	8008160 <prvAddNewTaskToReadyList>
 8007fa2:	e001      	b.n	8007fa8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fa8:	697b      	ldr	r3, [r7, #20]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3728      	adds	r7, #40	; 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b08c      	sub	sp, #48	; 0x30
 8007fb6:	af04      	add	r7, sp, #16
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fc44 	bl	8009854 <pvPortMalloc>
 8007fcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fd4:	205c      	movs	r0, #92	; 0x5c
 8007fd6:	f001 fc3d 	bl	8009854 <pvPortMalloc>
 8007fda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe8:	e005      	b.n	8007ff6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fea:	6978      	ldr	r0, [r7, #20]
 8007fec:	f001 fcfc 	bl	80099e8 <vPortFree>
 8007ff0:	e001      	b.n	8007ff6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d017      	beq.n	800802c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	2300      	movs	r3, #0
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f80e 	bl	800803c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008020:	69f8      	ldr	r0, [r7, #28]
 8008022:	f000 f89d 	bl	8008160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008026:	2301      	movs	r3, #1
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e002      	b.n	8008032 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800802c:	f04f 33ff 	mov.w	r3, #4294967295
 8008030:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008032:	69bb      	ldr	r3, [r7, #24]
	}
 8008034:	4618      	mov	r0, r3
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	461a      	mov	r2, r3
 8008054:	21a5      	movs	r1, #165	; 0xa5
 8008056:	f001 fe19 	bl	8009c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008064:	440b      	add	r3, r1
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	617b      	str	r3, [r7, #20]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01f      	beq.n	80080de <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	e012      	b.n	80080ca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	7819      	ldrb	r1, [r3, #0]
 80080ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	3334      	adds	r3, #52	; 0x34
 80080b4:	460a      	mov	r2, r1
 80080b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	4413      	add	r3, r2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	3301      	adds	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d9e9      	bls.n	80080a4 <prvInitialiseNewTask+0x68>
 80080d0:	e000      	b.n	80080d4 <prvInitialiseNewTask+0x98>
			{
				break;
 80080d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080dc:	e003      	b.n	80080e6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	2b37      	cmp	r3, #55	; 0x37
 80080ea:	d901      	bls.n	80080f0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080ec:	2337      	movs	r3, #55	; 0x37
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	2200      	movs	r2, #0
 8008100:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	3304      	adds	r3, #4
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff f952 	bl	80073b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	3318      	adds	r3, #24
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff f94d 	bl	80073b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	2200      	movs	r2, #0
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	68f9      	ldr	r1, [r7, #12]
 800813e:	69b8      	ldr	r0, [r7, #24]
 8008140:	f001 f952 	bl	80093e8 <pxPortInitialiseStack>
 8008144:	4602      	mov	r2, r0
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008156:	bf00      	nop
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008168:	f001 fa48 	bl	80095fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800816c:	4b2d      	ldr	r3, [pc, #180]	; (8008224 <prvAddNewTaskToReadyList+0xc4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <prvAddNewTaskToReadyList+0xc4>)
 8008174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008176:	4b2c      	ldr	r3, [pc, #176]	; (8008228 <prvAddNewTaskToReadyList+0xc8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800817e:	4a2a      	ldr	r2, [pc, #168]	; (8008228 <prvAddNewTaskToReadyList+0xc8>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008184:	4b27      	ldr	r3, [pc, #156]	; (8008224 <prvAddNewTaskToReadyList+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d110      	bne.n	80081ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800818c:	f000 fc2c 	bl	80089e8 <prvInitialiseTaskLists>
 8008190:	e00d      	b.n	80081ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008192:	4b26      	ldr	r3, [pc, #152]	; (800822c <prvAddNewTaskToReadyList+0xcc>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800819a:	4b23      	ldr	r3, [pc, #140]	; (8008228 <prvAddNewTaskToReadyList+0xc8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d802      	bhi.n	80081ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081a8:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <prvAddNewTaskToReadyList+0xc8>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ae:	4b20      	ldr	r3, [pc, #128]	; (8008230 <prvAddNewTaskToReadyList+0xd0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <prvAddNewTaskToReadyList+0xd0>)
 80081b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <prvAddNewTaskToReadyList+0xd0>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4b1b      	ldr	r3, [pc, #108]	; (8008234 <prvAddNewTaskToReadyList+0xd4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d903      	bls.n	80081d4 <prvAddNewTaskToReadyList+0x74>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	4a18      	ldr	r2, [pc, #96]	; (8008234 <prvAddNewTaskToReadyList+0xd4>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <prvAddNewTaskToReadyList+0xd8>)
 80081e2:	441a      	add	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7ff f8ed 	bl	80073ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081f0:	f001 fa38 	bl	8009664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <prvAddNewTaskToReadyList+0xcc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00e      	beq.n	800821a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvAddNewTaskToReadyList+0xc8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	429a      	cmp	r2, r3
 8008208:	d207      	bcs.n	800821a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800820a:	4b0c      	ldr	r3, [pc, #48]	; (800823c <prvAddNewTaskToReadyList+0xdc>)
 800820c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200019fc 	.word	0x200019fc
 8008228:	20001528 	.word	0x20001528
 800822c:	20001a08 	.word	0x20001a08
 8008230:	20001a18 	.word	0x20001a18
 8008234:	20001a04 	.word	0x20001a04
 8008238:	2000152c 	.word	0x2000152c
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d019      	beq.n	8008286 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <vTaskDelay+0x64>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <vTaskDelay+0x34>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	b672      	cpsid	i
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	b662      	cpsie	i
 800826e:	60bb      	str	r3, [r7, #8]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008274:	f000 f884 	bl	8008380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd04 	bl	8008c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008280:	f000 f88c 	bl	800839c <xTaskResumeAll>
 8008284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <vTaskDelay+0x68>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20001a24 	.word	0x20001a24
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ba:	463a      	mov	r2, r7
 80082bc:	1d39      	adds	r1, r7, #4
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f820 	bl	8007308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	9202      	str	r2, [sp, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	460a      	mov	r2, r1
 80082da:	4923      	ldr	r1, [pc, #140]	; (8008368 <vTaskStartScheduler+0xbc>)
 80082dc:	4823      	ldr	r0, [pc, #140]	; (800836c <vTaskStartScheduler+0xc0>)
 80082de:	f7ff fe05 	bl	8007eec <xTaskCreateStatic>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4a22      	ldr	r2, [pc, #136]	; (8008370 <vTaskStartScheduler+0xc4>)
 80082e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <vTaskStartScheduler+0xc4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e001      	b.n	80082fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d102      	bne.n	8008306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008300:	f000 fd16 	bl	8008d30 <xTimerCreateTimerTask>
 8008304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d118      	bne.n	800833e <vTaskStartScheduler+0x92>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	b672      	cpsid	i
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	b662      	cpsie	i
 8008320:	613b      	str	r3, [r7, #16]
}
 8008322:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <vTaskStartScheduler+0xc8>)
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800832c:	4b12      	ldr	r3, [pc, #72]	; (8008378 <vTaskStartScheduler+0xcc>)
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <vTaskStartScheduler+0xd0>)
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008338:	f001 f8e2 	bl	8009500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800833c:	e010      	b.n	8008360 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d10c      	bne.n	8008360 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	b672      	cpsid	i
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	b662      	cpsie	i
 800835a:	60fb      	str	r3, [r7, #12]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <vTaskStartScheduler+0xb2>
}
 8008360:	bf00      	nop
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	0800c6d8 	.word	0x0800c6d8
 800836c:	080089b9 	.word	0x080089b9
 8008370:	20001a20 	.word	0x20001a20
 8008374:	20001a1c 	.word	0x20001a1c
 8008378:	20001a08 	.word	0x20001a08
 800837c:	20001a00 	.word	0x20001a00

08008380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008384:	4b04      	ldr	r3, [pc, #16]	; (8008398 <vTaskSuspendAll+0x18>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	4a03      	ldr	r2, [pc, #12]	; (8008398 <vTaskSuspendAll+0x18>)
 800838c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800838e:	bf00      	nop
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	20001a24 	.word	0x20001a24

0800839c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083aa:	4b43      	ldr	r3, [pc, #268]	; (80084b8 <xTaskResumeAll+0x11c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10c      	bne.n	80083cc <xTaskResumeAll+0x30>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	603b      	str	r3, [r7, #0]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083cc:	f001 f916 	bl	80095fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083d0:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <xTaskResumeAll+0x11c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4a38      	ldr	r2, [pc, #224]	; (80084b8 <xTaskResumeAll+0x11c>)
 80083d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083da:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <xTaskResumeAll+0x11c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d162      	bne.n	80084a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083e2:	4b36      	ldr	r3, [pc, #216]	; (80084bc <xTaskResumeAll+0x120>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d05e      	beq.n	80084a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083ea:	e02f      	b.n	800844c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ec:	4b34      	ldr	r3, [pc, #208]	; (80084c0 <xTaskResumeAll+0x124>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3318      	adds	r3, #24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff f843 	bl	8007484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f83e 	bl	8007484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840c:	4b2d      	ldr	r3, [pc, #180]	; (80084c4 <xTaskResumeAll+0x128>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d903      	bls.n	800841c <xTaskResumeAll+0x80>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	4a2a      	ldr	r2, [pc, #168]	; (80084c4 <xTaskResumeAll+0x128>)
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4a27      	ldr	r2, [pc, #156]	; (80084c8 <xTaskResumeAll+0x12c>)
 800842a:	441a      	add	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe ffc9 	bl	80073ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	4b23      	ldr	r3, [pc, #140]	; (80084cc <xTaskResumeAll+0x130>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008446:	4b22      	ldr	r3, [pc, #136]	; (80084d0 <xTaskResumeAll+0x134>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800844c:	4b1c      	ldr	r3, [pc, #112]	; (80084c0 <xTaskResumeAll+0x124>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1cb      	bne.n	80083ec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800845a:	f000 fb65 	bl	8008b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800845e:	4b1d      	ldr	r3, [pc, #116]	; (80084d4 <xTaskResumeAll+0x138>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d010      	beq.n	800848c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800846a:	f000 f847 	bl	80084fc <xTaskIncrementTick>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008474:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <xTaskResumeAll+0x134>)
 8008476:	2201      	movs	r2, #1
 8008478:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3b01      	subs	r3, #1
 800847e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f1      	bne.n	800846a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008486:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <xTaskResumeAll+0x138>)
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <xTaskResumeAll+0x134>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008494:	2301      	movs	r3, #1
 8008496:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008498:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <xTaskResumeAll+0x13c>)
 800849a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084a8:	f001 f8dc 	bl	8009664 <vPortExitCritical>

	return xAlreadyYielded;
 80084ac:	68bb      	ldr	r3, [r7, #8]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20001a24 	.word	0x20001a24
 80084bc:	200019fc 	.word	0x200019fc
 80084c0:	200019bc 	.word	0x200019bc
 80084c4:	20001a04 	.word	0x20001a04
 80084c8:	2000152c 	.word	0x2000152c
 80084cc:	20001528 	.word	0x20001528
 80084d0:	20001a10 	.word	0x20001a10
 80084d4:	20001a0c 	.word	0x20001a0c
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <xTaskGetTickCount+0x1c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084e8:	687b      	ldr	r3, [r7, #4]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20001a00 	.word	0x20001a00

080084fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008506:	4b50      	ldr	r3, [pc, #320]	; (8008648 <xTaskIncrementTick+0x14c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 808b 	bne.w	8008626 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008510:	4b4e      	ldr	r3, [pc, #312]	; (800864c <xTaskIncrementTick+0x150>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008518:	4a4c      	ldr	r2, [pc, #304]	; (800864c <xTaskIncrementTick+0x150>)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d122      	bne.n	800856a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008524:	4b4a      	ldr	r3, [pc, #296]	; (8008650 <xTaskIncrementTick+0x154>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00c      	beq.n	8008548 <xTaskIncrementTick+0x4c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	b672      	cpsid	i
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	b662      	cpsie	i
 8008542:	603b      	str	r3, [r7, #0]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xTaskIncrementTick+0x4a>
 8008548:	4b41      	ldr	r3, [pc, #260]	; (8008650 <xTaskIncrementTick+0x154>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	4b41      	ldr	r3, [pc, #260]	; (8008654 <xTaskIncrementTick+0x158>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3f      	ldr	r2, [pc, #252]	; (8008650 <xTaskIncrementTick+0x154>)
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	4a3f      	ldr	r2, [pc, #252]	; (8008654 <xTaskIncrementTick+0x158>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	4b3e      	ldr	r3, [pc, #248]	; (8008658 <xTaskIncrementTick+0x15c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a3d      	ldr	r2, [pc, #244]	; (8008658 <xTaskIncrementTick+0x15c>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	f000 fadf 	bl	8008b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800856a:	4b3c      	ldr	r3, [pc, #240]	; (800865c <xTaskIncrementTick+0x160>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	d349      	bcc.n	8008608 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008574:	4b36      	ldr	r3, [pc, #216]	; (8008650 <xTaskIncrementTick+0x154>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857e:	4b37      	ldr	r3, [pc, #220]	; (800865c <xTaskIncrementTick+0x160>)
 8008580:	f04f 32ff 	mov.w	r2, #4294967295
 8008584:	601a      	str	r2, [r3, #0]
					break;
 8008586:	e03f      	b.n	8008608 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008588:	4b31      	ldr	r3, [pc, #196]	; (8008650 <xTaskIncrementTick+0x154>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	429a      	cmp	r2, r3
 800859e:	d203      	bcs.n	80085a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085a0:	4a2e      	ldr	r2, [pc, #184]	; (800865c <xTaskIncrementTick+0x160>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085a6:	e02f      	b.n	8008608 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3304      	adds	r3, #4
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe ff69 	bl	8007484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	3318      	adds	r3, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe ff60 	bl	8007484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c8:	4b25      	ldr	r3, [pc, #148]	; (8008660 <xTaskIncrementTick+0x164>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d903      	bls.n	80085d8 <xTaskIncrementTick+0xdc>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	4a22      	ldr	r2, [pc, #136]	; (8008660 <xTaskIncrementTick+0x164>)
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4a1f      	ldr	r2, [pc, #124]	; (8008664 <xTaskIncrementTick+0x168>)
 80085e6:	441a      	add	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f7fe feeb 	bl	80073ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4b1b      	ldr	r3, [pc, #108]	; (8008668 <xTaskIncrementTick+0x16c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	429a      	cmp	r2, r3
 8008600:	d3b8      	bcc.n	8008574 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008606:	e7b5      	b.n	8008574 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008608:	4b17      	ldr	r3, [pc, #92]	; (8008668 <xTaskIncrementTick+0x16c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	4915      	ldr	r1, [pc, #84]	; (8008664 <xTaskIncrementTick+0x168>)
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d907      	bls.n	8008630 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e004      	b.n	8008630 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008626:	4b11      	ldr	r3, [pc, #68]	; (800866c <xTaskIncrementTick+0x170>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	4a0f      	ldr	r2, [pc, #60]	; (800866c <xTaskIncrementTick+0x170>)
 800862e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008630:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <xTaskIncrementTick+0x174>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800863c:	697b      	ldr	r3, [r7, #20]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20001a24 	.word	0x20001a24
 800864c:	20001a00 	.word	0x20001a00
 8008650:	200019b4 	.word	0x200019b4
 8008654:	200019b8 	.word	0x200019b8
 8008658:	20001a14 	.word	0x20001a14
 800865c:	20001a1c 	.word	0x20001a1c
 8008660:	20001a04 	.word	0x20001a04
 8008664:	2000152c 	.word	0x2000152c
 8008668:	20001528 	.word	0x20001528
 800866c:	20001a0c 	.word	0x20001a0c
 8008670:	20001a10 	.word	0x20001a10

08008674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <vTaskSwitchContext+0xac>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008682:	4b28      	ldr	r3, [pc, #160]	; (8008724 <vTaskSwitchContext+0xb0>)
 8008684:	2201      	movs	r2, #1
 8008686:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008688:	e043      	b.n	8008712 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800868a:	4b26      	ldr	r3, [pc, #152]	; (8008724 <vTaskSwitchContext+0xb0>)
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008690:	4b25      	ldr	r3, [pc, #148]	; (8008728 <vTaskSwitchContext+0xb4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e012      	b.n	80086be <vTaskSwitchContext+0x4a>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <vTaskSwitchContext+0x44>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	607b      	str	r3, [r7, #4]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <vTaskSwitchContext+0x42>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	491b      	ldr	r1, [pc, #108]	; (800872c <vTaskSwitchContext+0xb8>)
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0e2      	beq.n	8008698 <vTaskSwitchContext+0x24>
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <vTaskSwitchContext+0xb8>)
 80086de:	4413      	add	r3, r2
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	3308      	adds	r3, #8
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d104      	bne.n	8008702 <vTaskSwitchContext+0x8e>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <vTaskSwitchContext+0xbc>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	4a06      	ldr	r2, [pc, #24]	; (8008728 <vTaskSwitchContext+0xb4>)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6013      	str	r3, [r2, #0]
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20001a24 	.word	0x20001a24
 8008724:	20001a10 	.word	0x20001a10
 8008728:	20001a04 	.word	0x20001a04
 800872c:	2000152c 	.word	0x2000152c
 8008730:	20001528 	.word	0x20001528

08008734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10c      	bne.n	800875e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	60fb      	str	r3, [r7, #12]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <vTaskPlaceOnEventList+0x48>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3318      	adds	r3, #24
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fe fe53 	bl	8007412 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800876c:	2101      	movs	r1, #1
 800876e:	6838      	ldr	r0, [r7, #0]
 8008770:	f000 fa8a 	bl	8008c88 <prvAddCurrentTaskToDelayedList>
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20001528 	.word	0x20001528

08008780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	617b      	str	r3, [r7, #20]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ac:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <vTaskPlaceOnEventListRestricted+0x58>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3318      	adds	r3, #24
 80087b2:	4619      	mov	r1, r3
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7fe fe08 	bl	80073ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	68b8      	ldr	r0, [r7, #8]
 80087ca:	f000 fa5d 	bl	8008c88 <prvAddCurrentTaskToDelayedList>
	}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001528 	.word	0x20001528

080087dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10c      	bne.n	800880c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	b672      	cpsid	i
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	b662      	cpsie	i
 8008806:	60fb      	str	r3, [r7, #12]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	3318      	adds	r3, #24
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fe37 	bl	8007484 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008816:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <xTaskRemoveFromEventList+0xb4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d11d      	bne.n	800885a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3304      	adds	r3, #4
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fe2e 	bl	8007484 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882c:	4b19      	ldr	r3, [pc, #100]	; (8008894 <xTaskRemoveFromEventList+0xb8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <xTaskRemoveFromEventList+0x60>
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <xTaskRemoveFromEventList+0xb8>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4a13      	ldr	r2, [pc, #76]	; (8008898 <xTaskRemoveFromEventList+0xbc>)
 800884a:	441a      	add	r2, r3
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f7fe fdb9 	bl	80073ca <vListInsertEnd>
 8008858:	e005      	b.n	8008866 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3318      	adds	r3, #24
 800885e:	4619      	mov	r1, r3
 8008860:	480e      	ldr	r0, [pc, #56]	; (800889c <xTaskRemoveFromEventList+0xc0>)
 8008862:	f7fe fdb2 	bl	80073ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <xTaskRemoveFromEventList+0xc4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	429a      	cmp	r2, r3
 8008872:	d905      	bls.n	8008880 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <xTaskRemoveFromEventList+0xc8>)
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e001      	b.n	8008884 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008884:	697b      	ldr	r3, [r7, #20]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20001a24 	.word	0x20001a24
 8008894:	20001a04 	.word	0x20001a04
 8008898:	2000152c 	.word	0x2000152c
 800889c:	200019bc 	.word	0x200019bc
 80088a0:	20001528 	.word	0x20001528
 80088a4:	20001a10 	.word	0x20001a10

080088a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <vTaskInternalSetTimeOutState+0x24>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <vTaskInternalSetTimeOutState+0x28>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	605a      	str	r2, [r3, #4]
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	20001a14 	.word	0x20001a14
 80088d0:	20001a00 	.word	0x20001a00

080088d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10c      	bne.n	80088fe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	b672      	cpsid	i
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	b662      	cpsie	i
 80088f8:	613b      	str	r3, [r7, #16]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10c      	bne.n	800891e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	b672      	cpsid	i
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	b662      	cpsie	i
 8008918:	60fb      	str	r3, [r7, #12]
}
 800891a:	bf00      	nop
 800891c:	e7fe      	b.n	800891c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800891e:	f000 fe6d 	bl	80095fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <xTaskCheckForTimeOut+0xc4>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d102      	bne.n	8008942 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e023      	b.n	800898a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <xTaskCheckForTimeOut+0xc8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d007      	beq.n	800895e <xTaskCheckForTimeOut+0x8a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e015      	b.n	800898a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d20b      	bcs.n	8008980 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff97 	bl	80088a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e004      	b.n	800898a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800898a:	f000 fe6b 	bl	8009664 <vPortExitCritical>

	return xReturn;
 800898e:	69fb      	ldr	r3, [r7, #28]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20001a00 	.word	0x20001a00
 800899c:	20001a14 	.word	0x20001a14

080089a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089a4:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <vTaskMissedYield+0x14>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
}
 80089aa:	bf00      	nop
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	20001a10 	.word	0x20001a10

080089b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089c0:	f000 f852 	bl	8008a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <prvIdleTask+0x28>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d9f9      	bls.n	80089c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <prvIdleTask+0x2c>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089dc:	e7f0      	b.n	80089c0 <prvIdleTask+0x8>
 80089de:	bf00      	nop
 80089e0:	2000152c 	.word	0x2000152c
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	e00c      	b.n	8008a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4a12      	ldr	r2, [pc, #72]	; (8008a48 <prvInitialiseTaskLists+0x60>)
 8008a00:	4413      	add	r3, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fcb4 	bl	8007370 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b37      	cmp	r3, #55	; 0x37
 8008a12:	d9ef      	bls.n	80089f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a14:	480d      	ldr	r0, [pc, #52]	; (8008a4c <prvInitialiseTaskLists+0x64>)
 8008a16:	f7fe fcab 	bl	8007370 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a1a:	480d      	ldr	r0, [pc, #52]	; (8008a50 <prvInitialiseTaskLists+0x68>)
 8008a1c:	f7fe fca8 	bl	8007370 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a20:	480c      	ldr	r0, [pc, #48]	; (8008a54 <prvInitialiseTaskLists+0x6c>)
 8008a22:	f7fe fca5 	bl	8007370 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a26:	480c      	ldr	r0, [pc, #48]	; (8008a58 <prvInitialiseTaskLists+0x70>)
 8008a28:	f7fe fca2 	bl	8007370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a2c:	480b      	ldr	r0, [pc, #44]	; (8008a5c <prvInitialiseTaskLists+0x74>)
 8008a2e:	f7fe fc9f 	bl	8007370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <prvInitialiseTaskLists+0x78>)
 8008a34:	4a05      	ldr	r2, [pc, #20]	; (8008a4c <prvInitialiseTaskLists+0x64>)
 8008a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a38:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <prvInitialiseTaskLists+0x7c>)
 8008a3a:	4a05      	ldr	r2, [pc, #20]	; (8008a50 <prvInitialiseTaskLists+0x68>)
 8008a3c:	601a      	str	r2, [r3, #0]
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2000152c 	.word	0x2000152c
 8008a4c:	2000198c 	.word	0x2000198c
 8008a50:	200019a0 	.word	0x200019a0
 8008a54:	200019bc 	.word	0x200019bc
 8008a58:	200019d0 	.word	0x200019d0
 8008a5c:	200019e8 	.word	0x200019e8
 8008a60:	200019b4 	.word	0x200019b4
 8008a64:	200019b8 	.word	0x200019b8

08008a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a6e:	e019      	b.n	8008aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a70:	f000 fdc4 	bl	80095fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <prvCheckTasksWaitingTermination+0x50>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3304      	adds	r3, #4
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fcff 	bl	8007484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a86:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <prvCheckTasksWaitingTermination+0x54>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4a0b      	ldr	r2, [pc, #44]	; (8008abc <prvCheckTasksWaitingTermination+0x54>)
 8008a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a90:	4b0b      	ldr	r3, [pc, #44]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a9a:	f000 fde3 	bl	8009664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f810 	bl	8008ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aa4:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e1      	bne.n	8008a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200019d0 	.word	0x200019d0
 8008abc:	200019fc 	.word	0x200019fc
 8008ac0:	200019e4 	.word	0x200019e4

08008ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d108      	bne.n	8008ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 ff84 	bl	80099e8 <vPortFree>
				vPortFree( pxTCB );
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 ff81 	bl	80099e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ae6:	e01a      	b.n	8008b1e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d103      	bne.n	8008afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 ff78 	bl	80099e8 <vPortFree>
	}
 8008af8:	e011      	b.n	8008b1e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d00c      	beq.n	8008b1e <prvDeleteTCB+0x5a>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	b672      	cpsid	i
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	b662      	cpsie	i
 8008b18:	60fb      	str	r3, [r7, #12]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <prvDeleteTCB+0x58>
	}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <prvResetNextTaskUnblockTime+0x38>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <prvResetNextTaskUnblockTime+0x3c>)
 8008b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b40:	e008      	b.n	8008b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <prvResetNextTaskUnblockTime+0x38>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <prvResetNextTaskUnblockTime+0x3c>)
 8008b52:	6013      	str	r3, [r2, #0]
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	200019b4 	.word	0x200019b4
 8008b64:	20001a1c 	.word	0x20001a1c

08008b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <xTaskGetSchedulerState+0x34>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b76:	2301      	movs	r3, #1
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	e008      	b.n	8008b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b7c:	4b08      	ldr	r3, [pc, #32]	; (8008ba0 <xTaskGetSchedulerState+0x38>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b84:	2302      	movs	r3, #2
 8008b86:	607b      	str	r3, [r7, #4]
 8008b88:	e001      	b.n	8008b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b8e:	687b      	ldr	r3, [r7, #4]
	}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20001a08 	.word	0x20001a08
 8008ba0:	20001a24 	.word	0x20001a24

08008ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d05a      	beq.n	8008c70 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bba:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <xTaskPriorityDisinherit+0xd8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d00c      	beq.n	8008bde <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	b672      	cpsid	i
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	b662      	cpsie	i
 8008bd8:	60fb      	str	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10c      	bne.n	8008c00 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	60bb      	str	r3, [r7, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d02c      	beq.n	8008c70 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d128      	bne.n	8008c70 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fc2e 	bl	8007484 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <xTaskPriorityDisinherit+0xdc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d903      	bls.n	8008c50 <xTaskPriorityDisinherit+0xac>
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	4a0c      	ldr	r2, [pc, #48]	; (8008c80 <xTaskPriorityDisinherit+0xdc>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <xTaskPriorityDisinherit+0xe0>)
 8008c5e:	441a      	add	r2, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fe fbaf 	bl	80073ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c70:	697b      	ldr	r3, [r7, #20]
	}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20001528 	.word	0x20001528
 8008c80:	20001a04 	.word	0x20001a04
 8008c84:	2000152c 	.word	0x2000152c

08008c88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c92:	4b21      	ldr	r3, [pc, #132]	; (8008d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c98:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fbf0 	bl	8007484 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d10a      	bne.n	8008cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4819      	ldr	r0, [pc, #100]	; (8008d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cbc:	f7fe fb85 	bl	80073ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cc0:	e026      	b.n	8008d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d209      	bcs.n	8008cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fb93 	bl	8007412 <vListInsert>
}
 8008cec:	e010      	b.n	8008d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cee:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fe fb89 	bl	8007412 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d00:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d202      	bcs.n	8008d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d0a:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6013      	str	r3, [r2, #0]
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20001a00 	.word	0x20001a00
 8008d1c:	20001528 	.word	0x20001528
 8008d20:	200019e8 	.word	0x200019e8
 8008d24:	200019b8 	.word	0x200019b8
 8008d28:	200019b4 	.word	0x200019b4
 8008d2c:	20001a1c 	.word	0x20001a1c

08008d30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d3a:	f000 fb15 	bl	8009368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d3e:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <xTimerCreateTimerTask+0x84>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d021      	beq.n	8008d8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d4e:	1d3a      	adds	r2, r7, #4
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	f107 030c 	add.w	r3, r7, #12
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe faef 	bl	800733c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	9202      	str	r2, [sp, #8]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	460a      	mov	r2, r1
 8008d70:	4911      	ldr	r1, [pc, #68]	; (8008db8 <xTimerCreateTimerTask+0x88>)
 8008d72:	4812      	ldr	r0, [pc, #72]	; (8008dbc <xTimerCreateTimerTask+0x8c>)
 8008d74:	f7ff f8ba 	bl	8007eec <xTaskCreateStatic>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <xTimerCreateTimerTask+0x90>)
 8008d7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <xTimerCreateTimerTask+0x90>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d86:	2301      	movs	r3, #1
 8008d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10c      	bne.n	8008daa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	b672      	cpsid	i
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	b662      	cpsie	i
 8008da4:	613b      	str	r3, [r7, #16]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008daa:	697b      	ldr	r3, [r7, #20]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20001a58 	.word	0x20001a58
 8008db8:	0800c6e0 	.word	0x0800c6e0
 8008dbc:	08008f01 	.word	0x08008f01
 8008dc0:	20001a5c 	.word	0x20001a5c

08008dc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	; 0x28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <xTimerGenericCommand+0x32>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	b672      	cpsid	i
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	b662      	cpsie	i
 8008df0:	623b      	str	r3, [r7, #32]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008df6:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <xTimerGenericCommand+0x9c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d02a      	beq.n	8008e54 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b05      	cmp	r3, #5
 8008e0e:	dc18      	bgt.n	8008e42 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e10:	f7ff feaa 	bl	8008b68 <xTaskGetSchedulerState>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d109      	bne.n	8008e2e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e1a:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <xTimerGenericCommand+0x9c>)
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	f107 0110 	add.w	r1, r7, #16
 8008e22:	2300      	movs	r3, #0
 8008e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e26:	f7fe fc67 	bl	80076f8 <xQueueGenericSend>
 8008e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e2c:	e012      	b.n	8008e54 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <xTimerGenericCommand+0x9c>)
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f107 0110 	add.w	r1, r7, #16
 8008e36:	2300      	movs	r3, #0
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f7fe fc5d 	bl	80076f8 <xQueueGenericSend>
 8008e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e40:	e008      	b.n	8008e54 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e42:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <xTimerGenericCommand+0x9c>)
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	f107 0110 	add.w	r1, r7, #16
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	f7fe fd59 	bl	8007904 <xQueueGenericSendFromISR>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3728      	adds	r7, #40	; 0x28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20001a58 	.word	0x20001a58

08008e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6e:	4b23      	ldr	r3, [pc, #140]	; (8008efc <prvProcessExpiredTimer+0x98>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe fb01 	bl	8007484 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d024      	beq.n	8008eda <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	18d1      	adds	r1, r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	6978      	ldr	r0, [r7, #20]
 8008e9e:	f000 f8d3 	bl	8009048 <prvInsertTimerInActiveList>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d021      	beq.n	8008eec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f7ff ff86 	bl	8008dc4 <xTimerGenericCommand>
 8008eb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d115      	bne.n	8008eec <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	60fb      	str	r3, [r7, #12]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ee0:	f023 0301 	bic.w	r3, r3, #1
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	6978      	ldr	r0, [r7, #20]
 8008ef2:	4798      	blx	r3
}
 8008ef4:	bf00      	nop
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20001a50 	.word	0x20001a50

08008f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f857 	bl	8008fc0 <prvGetNextExpireTime>
 8008f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f803 	bl	8008f24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f1e:	f000 f8d5 	bl	80090cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f22:	e7f1      	b.n	8008f08 <prvTimerTask+0x8>

08008f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f2e:	f7ff fa27 	bl	8008380 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f866 	bl	8009008 <prvSampleTimeNow>
 8008f3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d130      	bne.n	8008fa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <prvProcessTimerOrBlockTask+0x3c>
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d806      	bhi.n	8008f60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f52:	f7ff fa23 	bl	800839c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff83 	bl	8008e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f5e:	e024      	b.n	8008faa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d008      	beq.n	8008f78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f66:	4b13      	ldr	r3, [pc, #76]	; (8008fb4 <prvProcessTimerOrBlockTask+0x90>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <prvProcessTimerOrBlockTask+0x50>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e000      	b.n	8008f76 <prvProcessTimerOrBlockTask+0x52>
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <prvProcessTimerOrBlockTask+0x94>)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	f7fe ff7d 	bl	8007e84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f8a:	f7ff fa07 	bl	800839c <xTaskResumeAll>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <prvProcessTimerOrBlockTask+0x98>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
}
 8008fa4:	e001      	b.n	8008faa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fa6:	f7ff f9f9 	bl	800839c <xTaskResumeAll>
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001a54 	.word	0x20001a54
 8008fb8:	20001a58 	.word	0x20001a58
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <prvGetNextExpireTime+0x44>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <prvGetNextExpireTime+0x16>
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	e000      	b.n	8008fd8 <prvGetNextExpireTime+0x18>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fe4:	4b07      	ldr	r3, [pc, #28]	; (8009004 <prvGetNextExpireTime+0x44>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	e001      	b.n	8008ff4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20001a50 	.word	0x20001a50

08009008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009010:	f7ff fa64 	bl	80084dc <xTaskGetTickCount>
 8009014:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <prvSampleTimeNow+0x3c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d205      	bcs.n	800902c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009020:	f000 f93c 	bl	800929c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e002      	b.n	8009032 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <prvSampleTimeNow+0x3c>)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20001a60 	.word	0x20001a60

08009048 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	d812      	bhi.n	8009094 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	1ad2      	subs	r2, r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	429a      	cmp	r2, r3
 800907a:	d302      	bcc.n	8009082 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	e01b      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009082:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <prvInsertTimerInActiveList+0x7c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3304      	adds	r3, #4
 800908a:	4619      	mov	r1, r3
 800908c:	4610      	mov	r0, r2
 800908e:	f7fe f9c0 	bl	8007412 <vListInsert>
 8009092:	e012      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d206      	bcs.n	80090aa <prvInsertTimerInActiveList+0x62>
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e007      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <prvInsertTimerInActiveList+0x80>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f7fe f9ac 	bl	8007412 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090ba:	697b      	ldr	r3, [r7, #20]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20001a54 	.word	0x20001a54
 80090c8:	20001a50 	.word	0x20001a50

080090cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08e      	sub	sp, #56	; 0x38
 80090d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d2:	e0d0      	b.n	8009276 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da1a      	bge.n	8009110 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	3304      	adds	r3, #4
 80090de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10c      	bne.n	8009100 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	b672      	cpsid	i
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	b662      	cpsie	i
 80090fa:	61fb      	str	r3, [r7, #28]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009106:	6850      	ldr	r0, [r2, #4]
 8009108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910a:	6892      	ldr	r2, [r2, #8]
 800910c:	4611      	mov	r1, r2
 800910e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f2c0 80ae 	blt.w	8009274 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	3304      	adds	r3, #4
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe f9ab 	bl	8007484 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800912e:	463b      	mov	r3, r7
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff69 	bl	8009008 <prvSampleTimeNow>
 8009136:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b09      	cmp	r3, #9
 800913c:	f200 809b 	bhi.w	8009276 <prvProcessReceivedCommands+0x1aa>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <prvProcessReceivedCommands+0x7c>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009171 	.word	0x08009171
 800914c:	08009171 	.word	0x08009171
 8009150:	08009171 	.word	0x08009171
 8009154:	080091e9 	.word	0x080091e9
 8009158:	080091fd 	.word	0x080091fd
 800915c:	0800924b 	.word	0x0800924b
 8009160:	08009171 	.word	0x08009171
 8009164:	08009171 	.word	0x08009171
 8009168:	080091e9 	.word	0x080091e9
 800916c:	080091fd 	.word	0x080091fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	b2da      	uxtb	r2, r3
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	18d1      	adds	r1, r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009190:	f7ff ff5a 	bl	8009048 <prvInsertTimerInActiveList>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d06d      	beq.n	8009276 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d062      	beq.n	8009276 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	441a      	add	r2, r3
 80091b8:	2300      	movs	r3, #0
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f7ff fdff 	bl	8008dc4 <xTimerGenericCommand>
 80091c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d153      	bne.n	8009276 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	b672      	cpsid	i
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	b662      	cpsie	i
 80091e2:	61bb      	str	r3, [r7, #24]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ee:	f023 0301 	bic.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80091fa:	e03c      	b.n	8009276 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10c      	bne.n	8009236 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	b672      	cpsid	i
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	b662      	cpsie	i
 8009230:	617b      	str	r3, [r7, #20]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	18d1      	adds	r1, r2, r3
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009244:	f7ff ff00 	bl	8009048 <prvInsertTimerInActiveList>
					break;
 8009248:	e015      	b.n	8009276 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925a:	f000 fbc5 	bl	80099e8 <vPortFree>
 800925e:	e00a      	b.n	8009276 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009272:	e000      	b.n	8009276 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009276:	4b08      	ldr	r3, [pc, #32]	; (8009298 <prvProcessReceivedCommands+0x1cc>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	1d39      	adds	r1, r7, #4
 800927c:	2200      	movs	r2, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fbe0 	bl	8007a44 <xQueueReceive>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f af24 	bne.w	80090d4 <prvProcessReceivedCommands+0x8>
	}
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3730      	adds	r7, #48	; 0x30
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20001a58 	.word	0x20001a58

0800929c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092a2:	e04a      	b.n	800933a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a4:	4b2e      	ldr	r3, [pc, #184]	; (8009360 <prvSwitchTimerLists+0xc4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ae:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <prvSwitchTimerLists+0xc4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe f8e1 	bl	8007484 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d030      	beq.n	800933a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4413      	add	r3, r2
 80092e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d90e      	bls.n	8009308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092f6:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <prvSwitchTimerLists+0xc4>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f7fe f886 	bl	8007412 <vListInsert>
 8009306:	e018      	b.n	800933a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009308:	2300      	movs	r3, #0
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	2100      	movs	r1, #0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fd56 	bl	8008dc4 <xTimerGenericCommand>
 8009318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	603b      	str	r3, [r7, #0]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <prvSwitchTimerLists+0xc4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1af      	bne.n	80092a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <prvSwitchTimerLists+0xc4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800934a:	4b06      	ldr	r3, [pc, #24]	; (8009364 <prvSwitchTimerLists+0xc8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a04      	ldr	r2, [pc, #16]	; (8009360 <prvSwitchTimerLists+0xc4>)
 8009350:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009352:	4a04      	ldr	r2, [pc, #16]	; (8009364 <prvSwitchTimerLists+0xc8>)
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	6013      	str	r3, [r2, #0]
}
 8009358:	bf00      	nop
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20001a50 	.word	0x20001a50
 8009364:	20001a54 	.word	0x20001a54

08009368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800936e:	f000 f945 	bl	80095fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <prvCheckForValidListAndQueue+0x60>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d120      	bne.n	80093bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800937a:	4814      	ldr	r0, [pc, #80]	; (80093cc <prvCheckForValidListAndQueue+0x64>)
 800937c:	f7fd fff8 	bl	8007370 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009380:	4813      	ldr	r0, [pc, #76]	; (80093d0 <prvCheckForValidListAndQueue+0x68>)
 8009382:	f7fd fff5 	bl	8007370 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009386:	4b13      	ldr	r3, [pc, #76]	; (80093d4 <prvCheckForValidListAndQueue+0x6c>)
 8009388:	4a10      	ldr	r2, [pc, #64]	; (80093cc <prvCheckForValidListAndQueue+0x64>)
 800938a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800938c:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <prvCheckForValidListAndQueue+0x70>)
 800938e:	4a10      	ldr	r2, [pc, #64]	; (80093d0 <prvCheckForValidListAndQueue+0x68>)
 8009390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009392:	2300      	movs	r3, #0
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4b11      	ldr	r3, [pc, #68]	; (80093dc <prvCheckForValidListAndQueue+0x74>)
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <prvCheckForValidListAndQueue+0x78>)
 800939a:	2110      	movs	r1, #16
 800939c:	200a      	movs	r0, #10
 800939e:	f7fe f905 	bl	80075ac <xQueueGenericCreateStatic>
 80093a2:	4603      	mov	r3, r0
 80093a4:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <prvCheckForValidListAndQueue+0x60>)
 80093a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093a8:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <prvCheckForValidListAndQueue+0x60>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <prvCheckForValidListAndQueue+0x60>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	490b      	ldr	r1, [pc, #44]	; (80093e4 <prvCheckForValidListAndQueue+0x7c>)
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd3a 	bl	8007e30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093bc:	f000 f952 	bl	8009664 <vPortExitCritical>
}
 80093c0:	bf00      	nop
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20001a58 	.word	0x20001a58
 80093cc:	20001a28 	.word	0x20001a28
 80093d0:	20001a3c 	.word	0x20001a3c
 80093d4:	20001a50 	.word	0x20001a50
 80093d8:	20001a54 	.word	0x20001a54
 80093dc:	20001b04 	.word	0x20001b04
 80093e0:	20001a64 	.word	0x20001a64
 80093e4:	0800c6e8 	.word	0x0800c6e8

080093e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3b04      	subs	r3, #4
 80093f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3b04      	subs	r3, #4
 8009406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0201 	bic.w	r2, r3, #1
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3b04      	subs	r3, #4
 8009416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009418:	4a0c      	ldr	r2, [pc, #48]	; (800944c <pxPortInitialiseStack+0x64>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3b14      	subs	r3, #20
 8009422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b04      	subs	r3, #4
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f06f 0202 	mvn.w	r2, #2
 8009436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3b20      	subs	r3, #32
 800943c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800943e:	68fb      	ldr	r3, [r7, #12]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	08009451 	.word	0x08009451

08009450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800945a:	4b14      	ldr	r3, [pc, #80]	; (80094ac <prvTaskExitError+0x5c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d00c      	beq.n	800947e <prvTaskExitError+0x2e>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	b672      	cpsid	i
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	b662      	cpsie	i
 8009478:	60fb      	str	r3, [r7, #12]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <prvTaskExitError+0x2c>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	b672      	cpsid	i
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	b662      	cpsie	i
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009496:	bf00      	nop
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0fc      	beq.n	8009498 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	200001bc 	.word	0x200001bc

080094b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <pxCurrentTCBConst2>)
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	6808      	ldr	r0, [r1, #0]
 80094b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	f380 8809 	msr	PSP, r0
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	4770      	bx	lr
 80094cc:	f3af 8000 	nop.w

080094d0 <pxCurrentTCBConst2>:
 80094d0:	20001528 	.word	0x20001528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094d8:	4808      	ldr	r0, [pc, #32]	; (80094fc <prvPortStartFirstTask+0x24>)
 80094da:	6800      	ldr	r0, [r0, #0]
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	f380 8808 	msr	MSP, r0
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8814 	msr	CONTROL, r0
 80094ea:	b662      	cpsie	i
 80094ec:	b661      	cpsie	f
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	df00      	svc	0
 80094f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094fa:	bf00      	nop
 80094fc:	e000ed08 	.word	0xe000ed08

08009500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009506:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <xPortStartScheduler+0xe4>)
 8009508:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009528:	b2da      	uxtb	r2, r3
 800952a:	4b2f      	ldr	r3, [pc, #188]	; (80095e8 <xPortStartScheduler+0xe8>)
 800952c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800952e:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <xPortStartScheduler+0xec>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009534:	e009      	b.n	800954a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009536:	4b2d      	ldr	r3, [pc, #180]	; (80095ec <xPortStartScheduler+0xec>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3b01      	subs	r3, #1
 800953c:	4a2b      	ldr	r2, [pc, #172]	; (80095ec <xPortStartScheduler+0xec>)
 800953e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d0ef      	beq.n	8009536 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009556:	4b25      	ldr	r3, [pc, #148]	; (80095ec <xPortStartScheduler+0xec>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1c3 0307 	rsb	r3, r3, #7
 800955e:	2b04      	cmp	r3, #4
 8009560:	d00c      	beq.n	800957c <xPortStartScheduler+0x7c>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	b672      	cpsid	i
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	b662      	cpsie	i
 8009576:	60bb      	str	r3, [r7, #8]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <xPortStartScheduler+0xec>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <xPortStartScheduler+0xec>)
 8009584:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009586:	4b19      	ldr	r3, [pc, #100]	; (80095ec <xPortStartScheduler+0xec>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800958e:	4a17      	ldr	r2, [pc, #92]	; (80095ec <xPortStartScheduler+0xec>)
 8009590:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800959a:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <xPortStartScheduler+0xf0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a14      	ldr	r2, [pc, #80]	; (80095f0 <xPortStartScheduler+0xf0>)
 80095a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095a6:	4b12      	ldr	r3, [pc, #72]	; (80095f0 <xPortStartScheduler+0xf0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a11      	ldr	r2, [pc, #68]	; (80095f0 <xPortStartScheduler+0xf0>)
 80095ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095b2:	f000 f8dd 	bl	8009770 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095b6:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <xPortStartScheduler+0xf4>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095bc:	f000 f8fc 	bl	80097b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <xPortStartScheduler+0xf8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <xPortStartScheduler+0xf8>)
 80095c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095cc:	f7ff ff84 	bl	80094d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095d0:	f7ff f850 	bl	8008674 <vTaskSwitchContext>
	prvTaskExitError();
 80095d4:	f7ff ff3c 	bl	8009450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	e000e400 	.word	0xe000e400
 80095e8:	20001b54 	.word	0x20001b54
 80095ec:	20001b58 	.word	0x20001b58
 80095f0:	e000ed20 	.word	0xe000ed20
 80095f4:	200001bc 	.word	0x200001bc
 80095f8:	e000ef34 	.word	0xe000ef34

080095fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	b672      	cpsid	i
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	b662      	cpsie	i
 8009616:	607b      	str	r3, [r7, #4]
}
 8009618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800961a:	4b10      	ldr	r3, [pc, #64]	; (800965c <vPortEnterCritical+0x60>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3301      	adds	r3, #1
 8009620:	4a0e      	ldr	r2, [pc, #56]	; (800965c <vPortEnterCritical+0x60>)
 8009622:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <vPortEnterCritical+0x60>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d111      	bne.n	8009650 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800962c:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <vPortEnterCritical+0x64>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00c      	beq.n	8009650 <vPortEnterCritical+0x54>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	b672      	cpsid	i
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	b662      	cpsie	i
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <vPortEnterCritical+0x52>
	}
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	200001bc 	.word	0x200001bc
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800966a:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <vPortExitCritical+0x54>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10c      	bne.n	800968c <vPortExitCritical+0x28>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	b672      	cpsid	i
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	b662      	cpsie	i
 8009686:	607b      	str	r3, [r7, #4]
}
 8009688:	bf00      	nop
 800968a:	e7fe      	b.n	800968a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <vPortExitCritical+0x54>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <vPortExitCritical+0x54>)
 8009694:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009696:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <vPortExitCritical+0x54>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d105      	bne.n	80096aa <vPortExitCritical+0x46>
 800969e:	2300      	movs	r3, #0
 80096a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	f383 8811 	msr	BASEPRI, r3
}
 80096a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096aa:	bf00      	nop
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	200001bc 	.word	0x200001bc
 80096bc:	00000000 	.word	0x00000000

080096c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096c0:	f3ef 8009 	mrs	r0, PSP
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	4b15      	ldr	r3, [pc, #84]	; (8009720 <pxCurrentTCBConst>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	f01e 0f10 	tst.w	lr, #16
 80096d0:	bf08      	it	eq
 80096d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	6010      	str	r0, [r2, #0]
 80096dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096e4:	b672      	cpsid	i
 80096e6:	f380 8811 	msr	BASEPRI, r0
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	b662      	cpsie	i
 80096f4:	f7fe ffbe 	bl	8008674 <vTaskSwitchContext>
 80096f8:	f04f 0000 	mov.w	r0, #0
 80096fc:	f380 8811 	msr	BASEPRI, r0
 8009700:	bc09      	pop	{r0, r3}
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	6808      	ldr	r0, [r1, #0]
 8009706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	f01e 0f10 	tst.w	lr, #16
 800970e:	bf08      	it	eq
 8009710:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009714:	f380 8809 	msr	PSP, r0
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop

08009720 <pxCurrentTCBConst>:
 8009720:	20001528 	.word	0x20001528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop

08009728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	b672      	cpsid	i
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	b662      	cpsie	i
 8009742:	607b      	str	r3, [r7, #4]
}
 8009744:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009746:	f7fe fed9 	bl	80084fc <xTaskIncrementTick>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <SysTick_Handler+0x44>)
 8009752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	f383 8811 	msr	BASEPRI, r3
}
 8009762:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009774:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <vPortSetupTimerInterrupt+0x34>)
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800977a:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <vPortSetupTimerInterrupt+0x38>)
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <vPortSetupTimerInterrupt+0x3c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a0a      	ldr	r2, [pc, #40]	; (80097b0 <vPortSetupTimerInterrupt+0x40>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	099b      	lsrs	r3, r3, #6
 800978c:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <vPortSetupTimerInterrupt+0x44>)
 800978e:	3b01      	subs	r3, #1
 8009790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009792:	4b04      	ldr	r3, [pc, #16]	; (80097a4 <vPortSetupTimerInterrupt+0x34>)
 8009794:	2207      	movs	r2, #7
 8009796:	601a      	str	r2, [r3, #0]
}
 8009798:	bf00      	nop
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	e000e010 	.word	0xe000e010
 80097a8:	e000e018 	.word	0xe000e018
 80097ac:	200001b0 	.word	0x200001b0
 80097b0:	10624dd3 	.word	0x10624dd3
 80097b4:	e000e014 	.word	0xe000e014

080097b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097c8 <vPortEnableVFP+0x10>
 80097bc:	6801      	ldr	r1, [r0, #0]
 80097be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097c2:	6001      	str	r1, [r0, #0]
 80097c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097c6:	bf00      	nop
 80097c8:	e000ed88 	.word	0xe000ed88

080097cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097d2:	f3ef 8305 	mrs	r3, IPSR
 80097d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2b0f      	cmp	r3, #15
 80097dc:	d916      	bls.n	800980c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097de:	4a19      	ldr	r2, [pc, #100]	; (8009844 <vPortValidateInterruptPriority+0x78>)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097e8:	4b17      	ldr	r3, [pc, #92]	; (8009848 <vPortValidateInterruptPriority+0x7c>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	7afa      	ldrb	r2, [r7, #11]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d20c      	bcs.n	800980c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	607b      	str	r3, [r7, #4]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800980c:	4b0f      	ldr	r3, [pc, #60]	; (800984c <vPortValidateInterruptPriority+0x80>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <vPortValidateInterruptPriority+0x84>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d90c      	bls.n	8009836 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	b672      	cpsid	i
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	b662      	cpsie	i
 8009830:	603b      	str	r3, [r7, #0]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <vPortValidateInterruptPriority+0x68>
	}
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	e000e3f0 	.word	0xe000e3f0
 8009848:	20001b54 	.word	0x20001b54
 800984c:	e000ed0c 	.word	0xe000ed0c
 8009850:	20001b58 	.word	0x20001b58

08009854 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800985c:	2300      	movs	r3, #0
 800985e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009860:	f7fe fd8e 	bl	8008380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009864:	4b5b      	ldr	r3, [pc, #364]	; (80099d4 <pvPortMalloc+0x180>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800986c:	f000 f91a 	bl	8009aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009870:	4b59      	ldr	r3, [pc, #356]	; (80099d8 <pvPortMalloc+0x184>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	f040 8092 	bne.w	80099a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01f      	beq.n	80098c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009884:	2208      	movs	r2, #8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b00      	cmp	r3, #0
 8009894:	d016      	beq.n	80098c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f023 0307 	bic.w	r3, r3, #7
 800989c:	3308      	adds	r3, #8
 800989e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00c      	beq.n	80098c4 <pvPortMalloc+0x70>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	b672      	cpsid	i
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	b662      	cpsie	i
 80098be:	617b      	str	r3, [r7, #20]
}
 80098c0:	bf00      	nop
 80098c2:	e7fe      	b.n	80098c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d06b      	beq.n	80099a2 <pvPortMalloc+0x14e>
 80098ca:	4b44      	ldr	r3, [pc, #272]	; (80099dc <pvPortMalloc+0x188>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d866      	bhi.n	80099a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098d4:	4b42      	ldr	r3, [pc, #264]	; (80099e0 <pvPortMalloc+0x18c>)
 80098d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098d8:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <pvPortMalloc+0x18c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098de:	e004      	b.n	80098ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d903      	bls.n	80098fc <pvPortMalloc+0xa8>
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1f1      	bne.n	80098e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098fc:	4b35      	ldr	r3, [pc, #212]	; (80099d4 <pvPortMalloc+0x180>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009902:	429a      	cmp	r2, r3
 8009904:	d04d      	beq.n	80099a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2208      	movs	r2, #8
 800990c:	4413      	add	r3, r2
 800990e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	2308      	movs	r3, #8
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	429a      	cmp	r2, r3
 8009926:	d921      	bls.n	800996c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00c      	beq.n	8009954 <pvPortMalloc+0x100>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	b672      	cpsid	i
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	b662      	cpsie	i
 800994e:	613b      	str	r3, [r7, #16]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009966:	69b8      	ldr	r0, [r7, #24]
 8009968:	f000 f8fe 	bl	8009b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800996c:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <pvPortMalloc+0x188>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	4a19      	ldr	r2, [pc, #100]	; (80099dc <pvPortMalloc+0x188>)
 8009978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800997a:	4b18      	ldr	r3, [pc, #96]	; (80099dc <pvPortMalloc+0x188>)
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b19      	ldr	r3, [pc, #100]	; (80099e4 <pvPortMalloc+0x190>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d203      	bcs.n	800998e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009986:	4b15      	ldr	r3, [pc, #84]	; (80099dc <pvPortMalloc+0x188>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a16      	ldr	r2, [pc, #88]	; (80099e4 <pvPortMalloc+0x190>)
 800998c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <pvPortMalloc+0x184>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	431a      	orrs	r2, r3
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099a2:	f7fe fcfb 	bl	800839c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <pvPortMalloc+0x176>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	b672      	cpsid	i
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	b662      	cpsie	i
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <pvPortMalloc+0x174>
	return pvReturn;
 80099ca:	69fb      	ldr	r3, [r7, #28]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3728      	adds	r7, #40	; 0x28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20005764 	.word	0x20005764
 80099d8:	20005770 	.word	0x20005770
 80099dc:	20005768 	.word	0x20005768
 80099e0:	2000575c 	.word	0x2000575c
 80099e4:	2000576c 	.word	0x2000576c

080099e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d04c      	beq.n	8009a94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099fa:	2308      	movs	r3, #8
 80099fc:	425b      	negs	r3, r3
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4413      	add	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	4b23      	ldr	r3, [pc, #140]	; (8009a9c <vPortFree+0xb4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4013      	ands	r3, r2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10c      	bne.n	8009a30 <vPortFree+0x48>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	b672      	cpsid	i
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	b662      	cpsie	i
 8009a2a:	60fb      	str	r3, [r7, #12]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00c      	beq.n	8009a52 <vPortFree+0x6a>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	b672      	cpsid	i
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	b662      	cpsie	i
 8009a4c:	60bb      	str	r3, [r7, #8]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <vPortFree+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d019      	beq.n	8009a94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d115      	bne.n	8009a94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <vPortFree+0xb4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	43db      	mvns	r3, r3
 8009a72:	401a      	ands	r2, r3
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a78:	f7fe fc82 	bl	8008380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <vPortFree+0xb8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	4a06      	ldr	r2, [pc, #24]	; (8009aa0 <vPortFree+0xb8>)
 8009a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a8a:	6938      	ldr	r0, [r7, #16]
 8009a8c:	f000 f86c 	bl	8009b68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a90:	f7fe fc84 	bl	800839c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a94:	bf00      	nop
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20005770 	.word	0x20005770
 8009aa0:	20005768 	.word	0x20005768

08009aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <prvHeapInit+0xac>)
 8009ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00c      	beq.n	8009ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <prvHeapInit+0xac>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009adc:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <prvHeapInit+0xb0>)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <prvHeapInit+0xb0>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	4413      	add	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009af0:	2208      	movs	r2, #8
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4a15      	ldr	r2, [pc, #84]	; (8009b58 <prvHeapInit+0xb4>)
 8009b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <prvHeapInit+0xb4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <prvHeapInit+0xb4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <prvHeapInit+0xb4>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <prvHeapInit+0xb8>)
 8009b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <prvHeapInit+0xbc>)
 8009b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <prvHeapInit+0xc0>)
 8009b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20001b5c 	.word	0x20001b5c
 8009b54:	2000575c 	.word	0x2000575c
 8009b58:	20005764 	.word	0x20005764
 8009b5c:	2000576c 	.word	0x2000576c
 8009b60:	20005768 	.word	0x20005768
 8009b64:	20005770 	.word	0x20005770

08009b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b70:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <prvInsertBlockIntoFreeList+0xac>)
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e002      	b.n	8009b7c <prvInsertBlockIntoFreeList+0x14>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d8f7      	bhi.n	8009b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	4413      	add	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d108      	bne.n	8009baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d118      	bne.n	8009bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d00d      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e008      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e003      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d002      	beq.n	8009c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c06:	bf00      	nop
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	2000575c 	.word	0x2000575c
 8009c18:	20005764 	.word	0x20005764

08009c1c <__errno>:
 8009c1c:	4b01      	ldr	r3, [pc, #4]	; (8009c24 <__errno+0x8>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	200001c0 	.word	0x200001c0

08009c28 <__libc_init_array>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4d0d      	ldr	r5, [pc, #52]	; (8009c60 <__libc_init_array+0x38>)
 8009c2c:	4c0d      	ldr	r4, [pc, #52]	; (8009c64 <__libc_init_array+0x3c>)
 8009c2e:	1b64      	subs	r4, r4, r5
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	2600      	movs	r6, #0
 8009c34:	42a6      	cmp	r6, r4
 8009c36:	d109      	bne.n	8009c4c <__libc_init_array+0x24>
 8009c38:	4d0b      	ldr	r5, [pc, #44]	; (8009c68 <__libc_init_array+0x40>)
 8009c3a:	4c0c      	ldr	r4, [pc, #48]	; (8009c6c <__libc_init_array+0x44>)
 8009c3c:	f002 fd36 	bl	800c6ac <_init>
 8009c40:	1b64      	subs	r4, r4, r5
 8009c42:	10a4      	asrs	r4, r4, #2
 8009c44:	2600      	movs	r6, #0
 8009c46:	42a6      	cmp	r6, r4
 8009c48:	d105      	bne.n	8009c56 <__libc_init_array+0x2e>
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c50:	4798      	blx	r3
 8009c52:	3601      	adds	r6, #1
 8009c54:	e7ee      	b.n	8009c34 <__libc_init_array+0xc>
 8009c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5a:	4798      	blx	r3
 8009c5c:	3601      	adds	r6, #1
 8009c5e:	e7f2      	b.n	8009c46 <__libc_init_array+0x1e>
 8009c60:	0800cb34 	.word	0x0800cb34
 8009c64:	0800cb34 	.word	0x0800cb34
 8009c68:	0800cb34 	.word	0x0800cb34
 8009c6c:	0800cb38 	.word	0x0800cb38

08009c70 <memcpy>:
 8009c70:	440a      	add	r2, r1
 8009c72:	4291      	cmp	r1, r2
 8009c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c78:	d100      	bne.n	8009c7c <memcpy+0xc>
 8009c7a:	4770      	bx	lr
 8009c7c:	b510      	push	{r4, lr}
 8009c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c86:	4291      	cmp	r1, r2
 8009c88:	d1f9      	bne.n	8009c7e <memcpy+0xe>
 8009c8a:	bd10      	pop	{r4, pc}

08009c8c <memset>:
 8009c8c:	4402      	add	r2, r0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d100      	bne.n	8009c96 <memset+0xa>
 8009c94:	4770      	bx	lr
 8009c96:	f803 1b01 	strb.w	r1, [r3], #1
 8009c9a:	e7f9      	b.n	8009c90 <memset+0x4>

08009c9c <__cvt>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	ec55 4b10 	vmov	r4, r5, d0
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	460e      	mov	r6, r1
 8009ca8:	4619      	mov	r1, r3
 8009caa:	462b      	mov	r3, r5
 8009cac:	bfbb      	ittet	lt
 8009cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cb2:	461d      	movlt	r5, r3
 8009cb4:	2300      	movge	r3, #0
 8009cb6:	232d      	movlt	r3, #45	; 0x2d
 8009cb8:	700b      	strb	r3, [r1, #0]
 8009cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	f023 0820 	bic.w	r8, r3, #32
 8009cc6:	bfbc      	itt	lt
 8009cc8:	4622      	movlt	r2, r4
 8009cca:	4614      	movlt	r4, r2
 8009ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cd0:	d005      	beq.n	8009cde <__cvt+0x42>
 8009cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cd6:	d100      	bne.n	8009cda <__cvt+0x3e>
 8009cd8:	3601      	adds	r6, #1
 8009cda:	2102      	movs	r1, #2
 8009cdc:	e000      	b.n	8009ce0 <__cvt+0x44>
 8009cde:	2103      	movs	r1, #3
 8009ce0:	ab03      	add	r3, sp, #12
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	ab02      	add	r3, sp, #8
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	ec45 4b10 	vmov	d0, r4, r5
 8009cec:	4653      	mov	r3, sl
 8009cee:	4632      	mov	r2, r6
 8009cf0:	f000 fcca 	bl	800a688 <_dtoa_r>
 8009cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	d102      	bne.n	8009d02 <__cvt+0x66>
 8009cfc:	f019 0f01 	tst.w	r9, #1
 8009d00:	d022      	beq.n	8009d48 <__cvt+0xac>
 8009d02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d06:	eb07 0906 	add.w	r9, r7, r6
 8009d0a:	d110      	bne.n	8009d2e <__cvt+0x92>
 8009d0c:	783b      	ldrb	r3, [r7, #0]
 8009d0e:	2b30      	cmp	r3, #48	; 0x30
 8009d10:	d10a      	bne.n	8009d28 <__cvt+0x8c>
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fef5 	bl	8000b08 <__aeabi_dcmpeq>
 8009d1e:	b918      	cbnz	r0, 8009d28 <__cvt+0x8c>
 8009d20:	f1c6 0601 	rsb	r6, r6, #1
 8009d24:	f8ca 6000 	str.w	r6, [sl]
 8009d28:	f8da 3000 	ldr.w	r3, [sl]
 8009d2c:	4499      	add	r9, r3
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2300      	movs	r3, #0
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 8009d3a:	b108      	cbz	r0, 8009d40 <__cvt+0xa4>
 8009d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d40:	2230      	movs	r2, #48	; 0x30
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	454b      	cmp	r3, r9
 8009d46:	d307      	bcc.n	8009d58 <__cvt+0xbc>
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d4c:	1bdb      	subs	r3, r3, r7
 8009d4e:	4638      	mov	r0, r7
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	b004      	add	sp, #16
 8009d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d58:	1c59      	adds	r1, r3, #1
 8009d5a:	9103      	str	r1, [sp, #12]
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	e7f0      	b.n	8009d42 <__cvt+0xa6>

08009d60 <__exponent>:
 8009d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d62:	4603      	mov	r3, r0
 8009d64:	2900      	cmp	r1, #0
 8009d66:	bfb8      	it	lt
 8009d68:	4249      	neglt	r1, r1
 8009d6a:	f803 2b02 	strb.w	r2, [r3], #2
 8009d6e:	bfb4      	ite	lt
 8009d70:	222d      	movlt	r2, #45	; 0x2d
 8009d72:	222b      	movge	r2, #43	; 0x2b
 8009d74:	2909      	cmp	r1, #9
 8009d76:	7042      	strb	r2, [r0, #1]
 8009d78:	dd2a      	ble.n	8009dd0 <__exponent+0x70>
 8009d7a:	f10d 0407 	add.w	r4, sp, #7
 8009d7e:	46a4      	mov	ip, r4
 8009d80:	270a      	movs	r7, #10
 8009d82:	46a6      	mov	lr, r4
 8009d84:	460a      	mov	r2, r1
 8009d86:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d8a:	fb07 1516 	mls	r5, r7, r6, r1
 8009d8e:	3530      	adds	r5, #48	; 0x30
 8009d90:	2a63      	cmp	r2, #99	; 0x63
 8009d92:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	dcf1      	bgt.n	8009d82 <__exponent+0x22>
 8009d9e:	3130      	adds	r1, #48	; 0x30
 8009da0:	f1ae 0502 	sub.w	r5, lr, #2
 8009da4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009da8:	1c44      	adds	r4, r0, #1
 8009daa:	4629      	mov	r1, r5
 8009dac:	4561      	cmp	r1, ip
 8009dae:	d30a      	bcc.n	8009dc6 <__exponent+0x66>
 8009db0:	f10d 0209 	add.w	r2, sp, #9
 8009db4:	eba2 020e 	sub.w	r2, r2, lr
 8009db8:	4565      	cmp	r5, ip
 8009dba:	bf88      	it	hi
 8009dbc:	2200      	movhi	r2, #0
 8009dbe:	4413      	add	r3, r2
 8009dc0:	1a18      	subs	r0, r3, r0
 8009dc2:	b003      	add	sp, #12
 8009dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dce:	e7ed      	b.n	8009dac <__exponent+0x4c>
 8009dd0:	2330      	movs	r3, #48	; 0x30
 8009dd2:	3130      	adds	r1, #48	; 0x30
 8009dd4:	7083      	strb	r3, [r0, #2]
 8009dd6:	70c1      	strb	r1, [r0, #3]
 8009dd8:	1d03      	adds	r3, r0, #4
 8009dda:	e7f1      	b.n	8009dc0 <__exponent+0x60>

08009ddc <_printf_float>:
 8009ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de0:	ed2d 8b02 	vpush	{d8}
 8009de4:	b08d      	sub	sp, #52	; 0x34
 8009de6:	460c      	mov	r4, r1
 8009de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009dec:	4616      	mov	r6, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	4605      	mov	r5, r0
 8009df2:	f001 fa37 	bl	800b264 <_localeconv_r>
 8009df6:	f8d0 a000 	ldr.w	sl, [r0]
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	f7f6 fa08 	bl	8000210 <strlen>
 8009e00:	2300      	movs	r3, #0
 8009e02:	930a      	str	r3, [sp, #40]	; 0x28
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	f8d8 3000 	ldr.w	r3, [r8]
 8009e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e10:	3307      	adds	r3, #7
 8009e12:	f023 0307 	bic.w	r3, r3, #7
 8009e16:	f103 0208 	add.w	r2, r3, #8
 8009e1a:	f8c8 2000 	str.w	r2, [r8]
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e34:	ee08 0a10 	vmov	s16, r0
 8009e38:	4b9f      	ldr	r3, [pc, #636]	; (800a0b8 <_printf_float+0x2dc>)
 8009e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e42:	f7f6 fe93 	bl	8000b6c <__aeabi_dcmpun>
 8009e46:	bb88      	cbnz	r0, 8009eac <_printf_float+0xd0>
 8009e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e4c:	4b9a      	ldr	r3, [pc, #616]	; (800a0b8 <_printf_float+0x2dc>)
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	f7f6 fe6d 	bl	8000b30 <__aeabi_dcmple>
 8009e56:	bb48      	cbnz	r0, 8009eac <_printf_float+0xd0>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7f6 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8009e64:	b110      	cbz	r0, 8009e6c <_printf_float+0x90>
 8009e66:	232d      	movs	r3, #45	; 0x2d
 8009e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6c:	4b93      	ldr	r3, [pc, #588]	; (800a0bc <_printf_float+0x2e0>)
 8009e6e:	4894      	ldr	r0, [pc, #592]	; (800a0c0 <_printf_float+0x2e4>)
 8009e70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e74:	bf94      	ite	ls
 8009e76:	4698      	movls	r8, r3
 8009e78:	4680      	movhi	r8, r0
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	9b05      	ldr	r3, [sp, #20]
 8009e80:	f023 0204 	bic.w	r2, r3, #4
 8009e84:	6022      	str	r2, [r4, #0]
 8009e86:	f04f 0900 	mov.w	r9, #0
 8009e8a:	9700      	str	r7, [sp, #0]
 8009e8c:	4633      	mov	r3, r6
 8009e8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e90:	4621      	mov	r1, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f9d8 	bl	800a248 <_printf_common>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	f040 8090 	bne.w	8009fbe <_printf_float+0x1e2>
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea2:	b00d      	add	sp, #52	; 0x34
 8009ea4:	ecbd 8b02 	vpop	{d8}
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	4642      	mov	r2, r8
 8009eae:	464b      	mov	r3, r9
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fe5a 	bl	8000b6c <__aeabi_dcmpun>
 8009eb8:	b140      	cbz	r0, 8009ecc <_printf_float+0xf0>
 8009eba:	464b      	mov	r3, r9
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfbc      	itt	lt
 8009ec0:	232d      	movlt	r3, #45	; 0x2d
 8009ec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ec6:	487f      	ldr	r0, [pc, #508]	; (800a0c4 <_printf_float+0x2e8>)
 8009ec8:	4b7f      	ldr	r3, [pc, #508]	; (800a0c8 <_printf_float+0x2ec>)
 8009eca:	e7d1      	b.n	8009e70 <_printf_float+0x94>
 8009ecc:	6863      	ldr	r3, [r4, #4]
 8009ece:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ed2:	9206      	str	r2, [sp, #24]
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	d13f      	bne.n	8009f58 <_printf_float+0x17c>
 8009ed8:	2306      	movs	r3, #6
 8009eda:	6063      	str	r3, [r4, #4]
 8009edc:	9b05      	ldr	r3, [sp, #20]
 8009ede:	6861      	ldr	r1, [r4, #4]
 8009ee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	ab0a      	add	r3, sp, #40	; 0x28
 8009eea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009eee:	ab09      	add	r3, sp, #36	; 0x24
 8009ef0:	ec49 8b10 	vmov	d0, r8, r9
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009efc:	4628      	mov	r0, r5
 8009efe:	f7ff fecd 	bl	8009c9c <__cvt>
 8009f02:	9b06      	ldr	r3, [sp, #24]
 8009f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f06:	2b47      	cmp	r3, #71	; 0x47
 8009f08:	4680      	mov	r8, r0
 8009f0a:	d108      	bne.n	8009f1e <_printf_float+0x142>
 8009f0c:	1cc8      	adds	r0, r1, #3
 8009f0e:	db02      	blt.n	8009f16 <_printf_float+0x13a>
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	4299      	cmp	r1, r3
 8009f14:	dd41      	ble.n	8009f9a <_printf_float+0x1be>
 8009f16:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f1a:	fa5f fb8b 	uxtb.w	fp, fp
 8009f1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f22:	d820      	bhi.n	8009f66 <_printf_float+0x18a>
 8009f24:	3901      	subs	r1, #1
 8009f26:	465a      	mov	r2, fp
 8009f28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f2e:	f7ff ff17 	bl	8009d60 <__exponent>
 8009f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f34:	1813      	adds	r3, r2, r0
 8009f36:	2a01      	cmp	r2, #1
 8009f38:	4681      	mov	r9, r0
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	dc02      	bgt.n	8009f44 <_printf_float+0x168>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	07d2      	lsls	r2, r2, #31
 8009f42:	d501      	bpl.n	8009f48 <_printf_float+0x16c>
 8009f44:	3301      	adds	r3, #1
 8009f46:	6123      	str	r3, [r4, #16]
 8009f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d09c      	beq.n	8009e8a <_printf_float+0xae>
 8009f50:	232d      	movs	r3, #45	; 0x2d
 8009f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f56:	e798      	b.n	8009e8a <_printf_float+0xae>
 8009f58:	9a06      	ldr	r2, [sp, #24]
 8009f5a:	2a47      	cmp	r2, #71	; 0x47
 8009f5c:	d1be      	bne.n	8009edc <_printf_float+0x100>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1bc      	bne.n	8009edc <_printf_float+0x100>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e7b9      	b.n	8009eda <_printf_float+0xfe>
 8009f66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f6a:	d118      	bne.n	8009f9e <_printf_float+0x1c2>
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	6863      	ldr	r3, [r4, #4]
 8009f70:	dd0b      	ble.n	8009f8a <_printf_float+0x1ae>
 8009f72:	6121      	str	r1, [r4, #16]
 8009f74:	b913      	cbnz	r3, 8009f7c <_printf_float+0x1a0>
 8009f76:	6822      	ldr	r2, [r4, #0]
 8009f78:	07d0      	lsls	r0, r2, #31
 8009f7a:	d502      	bpl.n	8009f82 <_printf_float+0x1a6>
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	440b      	add	r3, r1
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f84:	f04f 0900 	mov.w	r9, #0
 8009f88:	e7de      	b.n	8009f48 <_printf_float+0x16c>
 8009f8a:	b913      	cbnz	r3, 8009f92 <_printf_float+0x1b6>
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	07d2      	lsls	r2, r2, #31
 8009f90:	d501      	bpl.n	8009f96 <_printf_float+0x1ba>
 8009f92:	3302      	adds	r3, #2
 8009f94:	e7f4      	b.n	8009f80 <_printf_float+0x1a4>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e7f2      	b.n	8009f80 <_printf_float+0x1a4>
 8009f9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	db05      	blt.n	8009fb0 <_printf_float+0x1d4>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	6121      	str	r1, [r4, #16]
 8009fa8:	07d8      	lsls	r0, r3, #31
 8009faa:	d5ea      	bpl.n	8009f82 <_printf_float+0x1a6>
 8009fac:	1c4b      	adds	r3, r1, #1
 8009fae:	e7e7      	b.n	8009f80 <_printf_float+0x1a4>
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	bfd4      	ite	le
 8009fb4:	f1c1 0202 	rsble	r2, r1, #2
 8009fb8:	2201      	movgt	r2, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	e7e0      	b.n	8009f80 <_printf_float+0x1a4>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	055a      	lsls	r2, r3, #21
 8009fc2:	d407      	bmi.n	8009fd4 <_printf_float+0x1f8>
 8009fc4:	6923      	ldr	r3, [r4, #16]
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b8      	blx	r7
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d12c      	bne.n	800a02c <_printf_float+0x250>
 8009fd2:	e764      	b.n	8009e9e <_printf_float+0xc2>
 8009fd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fd8:	f240 80e0 	bls.w	800a19c <_printf_float+0x3c0>
 8009fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f7f6 fd90 	bl	8000b08 <__aeabi_dcmpeq>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d034      	beq.n	800a056 <_printf_float+0x27a>
 8009fec:	4a37      	ldr	r2, [pc, #220]	; (800a0cc <_printf_float+0x2f0>)
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b8      	blx	r7
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	f43f af51 	beq.w	8009e9e <_printf_float+0xc2>
 8009ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a000:	429a      	cmp	r2, r3
 800a002:	db02      	blt.n	800a00a <_printf_float+0x22e>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	07d8      	lsls	r0, r3, #31
 800a008:	d510      	bpl.n	800a02c <_printf_float+0x250>
 800a00a:	ee18 3a10 	vmov	r3, s16
 800a00e:	4652      	mov	r2, sl
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f af41 	beq.w	8009e9e <_printf_float+0xc2>
 800a01c:	f04f 0800 	mov.w	r8, #0
 800a020:	f104 091a 	add.w	r9, r4, #26
 800a024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a026:	3b01      	subs	r3, #1
 800a028:	4543      	cmp	r3, r8
 800a02a:	dc09      	bgt.n	800a040 <_printf_float+0x264>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	079b      	lsls	r3, r3, #30
 800a030:	f100 8105 	bmi.w	800a23e <_printf_float+0x462>
 800a034:	68e0      	ldr	r0, [r4, #12]
 800a036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a038:	4298      	cmp	r0, r3
 800a03a:	bfb8      	it	lt
 800a03c:	4618      	movlt	r0, r3
 800a03e:	e730      	b.n	8009ea2 <_printf_float+0xc6>
 800a040:	2301      	movs	r3, #1
 800a042:	464a      	mov	r2, r9
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f af27 	beq.w	8009e9e <_printf_float+0xc2>
 800a050:	f108 0801 	add.w	r8, r8, #1
 800a054:	e7e6      	b.n	800a024 <_printf_float+0x248>
 800a056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dc39      	bgt.n	800a0d0 <_printf_float+0x2f4>
 800a05c:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <_printf_float+0x2f0>)
 800a05e:	2301      	movs	r3, #1
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f af19 	beq.w	8009e9e <_printf_float+0xc2>
 800a06c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a070:	4313      	orrs	r3, r2
 800a072:	d102      	bne.n	800a07a <_printf_float+0x29e>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	07d9      	lsls	r1, r3, #31
 800a078:	d5d8      	bpl.n	800a02c <_printf_float+0x250>
 800a07a:	ee18 3a10 	vmov	r3, s16
 800a07e:	4652      	mov	r2, sl
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f af09 	beq.w	8009e9e <_printf_float+0xc2>
 800a08c:	f04f 0900 	mov.w	r9, #0
 800a090:	f104 0a1a 	add.w	sl, r4, #26
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	425b      	negs	r3, r3
 800a098:	454b      	cmp	r3, r9
 800a09a:	dc01      	bgt.n	800a0a0 <_printf_float+0x2c4>
 800a09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09e:	e792      	b.n	8009fc6 <_printf_float+0x1ea>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b8      	blx	r7
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	f43f aef7 	beq.w	8009e9e <_printf_float+0xc2>
 800a0b0:	f109 0901 	add.w	r9, r9, #1
 800a0b4:	e7ee      	b.n	800a094 <_printf_float+0x2b8>
 800a0b6:	bf00      	nop
 800a0b8:	7fefffff 	.word	0x7fefffff
 800a0bc:	0800c754 	.word	0x0800c754
 800a0c0:	0800c758 	.word	0x0800c758
 800a0c4:	0800c760 	.word	0x0800c760
 800a0c8:	0800c75c 	.word	0x0800c75c
 800a0cc:	0800c764 	.word	0x0800c764
 800a0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	bfa8      	it	ge
 800a0d8:	461a      	movge	r2, r3
 800a0da:	2a00      	cmp	r2, #0
 800a0dc:	4691      	mov	r9, r2
 800a0de:	dc37      	bgt.n	800a150 <_printf_float+0x374>
 800a0e0:	f04f 0b00 	mov.w	fp, #0
 800a0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0e8:	f104 021a 	add.w	r2, r4, #26
 800a0ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	eba3 0309 	sub.w	r3, r3, r9
 800a0f4:	455b      	cmp	r3, fp
 800a0f6:	dc33      	bgt.n	800a160 <_printf_float+0x384>
 800a0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	db3b      	blt.n	800a178 <_printf_float+0x39c>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	07da      	lsls	r2, r3, #31
 800a104:	d438      	bmi.n	800a178 <_printf_float+0x39c>
 800a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a108:	9a05      	ldr	r2, [sp, #20]
 800a10a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a10c:	1a9a      	subs	r2, r3, r2
 800a10e:	eba3 0901 	sub.w	r9, r3, r1
 800a112:	4591      	cmp	r9, r2
 800a114:	bfa8      	it	ge
 800a116:	4691      	movge	r9, r2
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	dc35      	bgt.n	800a18a <_printf_float+0x3ae>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a126:	f104 0a1a 	add.w	sl, r4, #26
 800a12a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	eba3 0309 	sub.w	r3, r3, r9
 800a134:	4543      	cmp	r3, r8
 800a136:	f77f af79 	ble.w	800a02c <_printf_float+0x250>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f aeaa 	beq.w	8009e9e <_printf_float+0xc2>
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	e7ec      	b.n	800a12a <_printf_float+0x34e>
 800a150:	4613      	mov	r3, r2
 800a152:	4631      	mov	r1, r6
 800a154:	4642      	mov	r2, r8
 800a156:	4628      	mov	r0, r5
 800a158:	47b8      	blx	r7
 800a15a:	3001      	adds	r0, #1
 800a15c:	d1c0      	bne.n	800a0e0 <_printf_float+0x304>
 800a15e:	e69e      	b.n	8009e9e <_printf_float+0xc2>
 800a160:	2301      	movs	r3, #1
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	9205      	str	r2, [sp, #20]
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f ae97 	beq.w	8009e9e <_printf_float+0xc2>
 800a170:	9a05      	ldr	r2, [sp, #20]
 800a172:	f10b 0b01 	add.w	fp, fp, #1
 800a176:	e7b9      	b.n	800a0ec <_printf_float+0x310>
 800a178:	ee18 3a10 	vmov	r3, s16
 800a17c:	4652      	mov	r2, sl
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	d1be      	bne.n	800a106 <_printf_float+0x32a>
 800a188:	e689      	b.n	8009e9e <_printf_float+0xc2>
 800a18a:	9a05      	ldr	r2, [sp, #20]
 800a18c:	464b      	mov	r3, r9
 800a18e:	4442      	add	r2, r8
 800a190:	4631      	mov	r1, r6
 800a192:	4628      	mov	r0, r5
 800a194:	47b8      	blx	r7
 800a196:	3001      	adds	r0, #1
 800a198:	d1c1      	bne.n	800a11e <_printf_float+0x342>
 800a19a:	e680      	b.n	8009e9e <_printf_float+0xc2>
 800a19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a19e:	2a01      	cmp	r2, #1
 800a1a0:	dc01      	bgt.n	800a1a6 <_printf_float+0x3ca>
 800a1a2:	07db      	lsls	r3, r3, #31
 800a1a4:	d538      	bpl.n	800a218 <_printf_float+0x43c>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	47b8      	blx	r7
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	f43f ae74 	beq.w	8009e9e <_printf_float+0xc2>
 800a1b6:	ee18 3a10 	vmov	r3, s16
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b8      	blx	r7
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f43f ae6b 	beq.w	8009e9e <_printf_float+0xc2>
 800a1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f7f6 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 800a1d4:	b9d8      	cbnz	r0, 800a20e <_printf_float+0x432>
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	f108 0201 	add.w	r2, r8, #1
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d10e      	bne.n	800a206 <_printf_float+0x42a>
 800a1e8:	e659      	b.n	8009e9e <_printf_float+0xc2>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b8      	blx	r7
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f43f ae52 	beq.w	8009e9e <_printf_float+0xc2>
 800a1fa:	f108 0801 	add.w	r8, r8, #1
 800a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a200:	3b01      	subs	r3, #1
 800a202:	4543      	cmp	r3, r8
 800a204:	dcf1      	bgt.n	800a1ea <_printf_float+0x40e>
 800a206:	464b      	mov	r3, r9
 800a208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a20c:	e6dc      	b.n	8009fc8 <_printf_float+0x1ec>
 800a20e:	f04f 0800 	mov.w	r8, #0
 800a212:	f104 0a1a 	add.w	sl, r4, #26
 800a216:	e7f2      	b.n	800a1fe <_printf_float+0x422>
 800a218:	2301      	movs	r3, #1
 800a21a:	4642      	mov	r2, r8
 800a21c:	e7df      	b.n	800a1de <_printf_float+0x402>
 800a21e:	2301      	movs	r3, #1
 800a220:	464a      	mov	r2, r9
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f ae38 	beq.w	8009e9e <_printf_float+0xc2>
 800a22e:	f108 0801 	add.w	r8, r8, #1
 800a232:	68e3      	ldr	r3, [r4, #12]
 800a234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a236:	1a5b      	subs	r3, r3, r1
 800a238:	4543      	cmp	r3, r8
 800a23a:	dcf0      	bgt.n	800a21e <_printf_float+0x442>
 800a23c:	e6fa      	b.n	800a034 <_printf_float+0x258>
 800a23e:	f04f 0800 	mov.w	r8, #0
 800a242:	f104 0919 	add.w	r9, r4, #25
 800a246:	e7f4      	b.n	800a232 <_printf_float+0x456>

0800a248 <_printf_common>:
 800a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	4616      	mov	r6, r2
 800a24e:	4699      	mov	r9, r3
 800a250:	688a      	ldr	r2, [r1, #8]
 800a252:	690b      	ldr	r3, [r1, #16]
 800a254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a258:	4293      	cmp	r3, r2
 800a25a:	bfb8      	it	lt
 800a25c:	4613      	movlt	r3, r2
 800a25e:	6033      	str	r3, [r6, #0]
 800a260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a264:	4607      	mov	r7, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b10a      	cbz	r2, 800a26e <_printf_common+0x26>
 800a26a:	3301      	adds	r3, #1
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	0699      	lsls	r1, r3, #26
 800a272:	bf42      	ittt	mi
 800a274:	6833      	ldrmi	r3, [r6, #0]
 800a276:	3302      	addmi	r3, #2
 800a278:	6033      	strmi	r3, [r6, #0]
 800a27a:	6825      	ldr	r5, [r4, #0]
 800a27c:	f015 0506 	ands.w	r5, r5, #6
 800a280:	d106      	bne.n	800a290 <_printf_common+0x48>
 800a282:	f104 0a19 	add.w	sl, r4, #25
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	6832      	ldr	r2, [r6, #0]
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc26      	bgt.n	800a2de <_printf_common+0x96>
 800a290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a294:	1e13      	subs	r3, r2, #0
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	bf18      	it	ne
 800a29a:	2301      	movne	r3, #1
 800a29c:	0692      	lsls	r2, r2, #26
 800a29e:	d42b      	bmi.n	800a2f8 <_printf_common+0xb0>
 800a2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	47c0      	blx	r8
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d01e      	beq.n	800a2ec <_printf_common+0xa4>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	68e5      	ldr	r5, [r4, #12]
 800a2b2:	6832      	ldr	r2, [r6, #0]
 800a2b4:	f003 0306 	and.w	r3, r3, #6
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	bf08      	it	eq
 800a2bc:	1aad      	subeq	r5, r5, r2
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	bf0c      	ite	eq
 800a2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c8:	2500      	movne	r5, #0
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bfc4      	itt	gt
 800a2ce:	1a9b      	subgt	r3, r3, r2
 800a2d0:	18ed      	addgt	r5, r5, r3
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	341a      	adds	r4, #26
 800a2d6:	42b5      	cmp	r5, r6
 800a2d8:	d11a      	bne.n	800a310 <_printf_common+0xc8>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e008      	b.n	800a2f0 <_printf_common+0xa8>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4652      	mov	r2, sl
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	47c0      	blx	r8
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d103      	bne.n	800a2f4 <_printf_common+0xac>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f4:	3501      	adds	r5, #1
 800a2f6:	e7c6      	b.n	800a286 <_printf_common+0x3e>
 800a2f8:	18e1      	adds	r1, r4, r3
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	2030      	movs	r0, #48	; 0x30
 800a2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a302:	4422      	add	r2, r4
 800a304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a30c:	3302      	adds	r3, #2
 800a30e:	e7c7      	b.n	800a2a0 <_printf_common+0x58>
 800a310:	2301      	movs	r3, #1
 800a312:	4622      	mov	r2, r4
 800a314:	4649      	mov	r1, r9
 800a316:	4638      	mov	r0, r7
 800a318:	47c0      	blx	r8
 800a31a:	3001      	adds	r0, #1
 800a31c:	d0e6      	beq.n	800a2ec <_printf_common+0xa4>
 800a31e:	3601      	adds	r6, #1
 800a320:	e7d9      	b.n	800a2d6 <_printf_common+0x8e>
	...

0800a324 <_printf_i>:
 800a324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	7e0f      	ldrb	r7, [r1, #24]
 800a32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a32c:	2f78      	cmp	r7, #120	; 0x78
 800a32e:	4691      	mov	r9, r2
 800a330:	4680      	mov	r8, r0
 800a332:	460c      	mov	r4, r1
 800a334:	469a      	mov	sl, r3
 800a336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a33a:	d807      	bhi.n	800a34c <_printf_i+0x28>
 800a33c:	2f62      	cmp	r7, #98	; 0x62
 800a33e:	d80a      	bhi.n	800a356 <_printf_i+0x32>
 800a340:	2f00      	cmp	r7, #0
 800a342:	f000 80d8 	beq.w	800a4f6 <_printf_i+0x1d2>
 800a346:	2f58      	cmp	r7, #88	; 0x58
 800a348:	f000 80a3 	beq.w	800a492 <_printf_i+0x16e>
 800a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a354:	e03a      	b.n	800a3cc <_printf_i+0xa8>
 800a356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a35a:	2b15      	cmp	r3, #21
 800a35c:	d8f6      	bhi.n	800a34c <_printf_i+0x28>
 800a35e:	a101      	add	r1, pc, #4	; (adr r1, 800a364 <_printf_i+0x40>)
 800a360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a364:	0800a3bd 	.word	0x0800a3bd
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a34d 	.word	0x0800a34d
 800a370:	0800a34d 	.word	0x0800a34d
 800a374:	0800a34d 	.word	0x0800a34d
 800a378:	0800a34d 	.word	0x0800a34d
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a34d 	.word	0x0800a34d
 800a384:	0800a34d 	.word	0x0800a34d
 800a388:	0800a34d 	.word	0x0800a34d
 800a38c:	0800a34d 	.word	0x0800a34d
 800a390:	0800a4dd 	.word	0x0800a4dd
 800a394:	0800a401 	.word	0x0800a401
 800a398:	0800a4bf 	.word	0x0800a4bf
 800a39c:	0800a34d 	.word	0x0800a34d
 800a3a0:	0800a34d 	.word	0x0800a34d
 800a3a4:	0800a4ff 	.word	0x0800a4ff
 800a3a8:	0800a34d 	.word	0x0800a34d
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a34d 	.word	0x0800a34d
 800a3b4:	0800a34d 	.word	0x0800a34d
 800a3b8:	0800a4c7 	.word	0x0800a4c7
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	602a      	str	r2, [r5, #0]
 800a3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e0a3      	b.n	800a518 <_printf_i+0x1f4>
 800a3d0:	6820      	ldr	r0, [r4, #0]
 800a3d2:	6829      	ldr	r1, [r5, #0]
 800a3d4:	0606      	lsls	r6, r0, #24
 800a3d6:	f101 0304 	add.w	r3, r1, #4
 800a3da:	d50a      	bpl.n	800a3f2 <_printf_i+0xce>
 800a3dc:	680e      	ldr	r6, [r1, #0]
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	da03      	bge.n	800a3ec <_printf_i+0xc8>
 800a3e4:	232d      	movs	r3, #45	; 0x2d
 800a3e6:	4276      	negs	r6, r6
 800a3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ec:	485e      	ldr	r0, [pc, #376]	; (800a568 <_printf_i+0x244>)
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	e019      	b.n	800a426 <_printf_i+0x102>
 800a3f2:	680e      	ldr	r6, [r1, #0]
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3fa:	bf18      	it	ne
 800a3fc:	b236      	sxthne	r6, r6
 800a3fe:	e7ef      	b.n	800a3e0 <_printf_i+0xbc>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	6820      	ldr	r0, [r4, #0]
 800a404:	1d19      	adds	r1, r3, #4
 800a406:	6029      	str	r1, [r5, #0]
 800a408:	0601      	lsls	r1, r0, #24
 800a40a:	d501      	bpl.n	800a410 <_printf_i+0xec>
 800a40c:	681e      	ldr	r6, [r3, #0]
 800a40e:	e002      	b.n	800a416 <_printf_i+0xf2>
 800a410:	0646      	lsls	r6, r0, #25
 800a412:	d5fb      	bpl.n	800a40c <_printf_i+0xe8>
 800a414:	881e      	ldrh	r6, [r3, #0]
 800a416:	4854      	ldr	r0, [pc, #336]	; (800a568 <_printf_i+0x244>)
 800a418:	2f6f      	cmp	r7, #111	; 0x6f
 800a41a:	bf0c      	ite	eq
 800a41c:	2308      	moveq	r3, #8
 800a41e:	230a      	movne	r3, #10
 800a420:	2100      	movs	r1, #0
 800a422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a426:	6865      	ldr	r5, [r4, #4]
 800a428:	60a5      	str	r5, [r4, #8]
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	bfa2      	ittt	ge
 800a42e:	6821      	ldrge	r1, [r4, #0]
 800a430:	f021 0104 	bicge.w	r1, r1, #4
 800a434:	6021      	strge	r1, [r4, #0]
 800a436:	b90e      	cbnz	r6, 800a43c <_printf_i+0x118>
 800a438:	2d00      	cmp	r5, #0
 800a43a:	d04d      	beq.n	800a4d8 <_printf_i+0x1b4>
 800a43c:	4615      	mov	r5, r2
 800a43e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a442:	fb03 6711 	mls	r7, r3, r1, r6
 800a446:	5dc7      	ldrb	r7, [r0, r7]
 800a448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a44c:	4637      	mov	r7, r6
 800a44e:	42bb      	cmp	r3, r7
 800a450:	460e      	mov	r6, r1
 800a452:	d9f4      	bls.n	800a43e <_printf_i+0x11a>
 800a454:	2b08      	cmp	r3, #8
 800a456:	d10b      	bne.n	800a470 <_printf_i+0x14c>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	07de      	lsls	r6, r3, #31
 800a45c:	d508      	bpl.n	800a470 <_printf_i+0x14c>
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	6861      	ldr	r1, [r4, #4]
 800a462:	4299      	cmp	r1, r3
 800a464:	bfde      	ittt	le
 800a466:	2330      	movle	r3, #48	; 0x30
 800a468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a46c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a470:	1b52      	subs	r2, r2, r5
 800a472:	6122      	str	r2, [r4, #16]
 800a474:	f8cd a000 	str.w	sl, [sp]
 800a478:	464b      	mov	r3, r9
 800a47a:	aa03      	add	r2, sp, #12
 800a47c:	4621      	mov	r1, r4
 800a47e:	4640      	mov	r0, r8
 800a480:	f7ff fee2 	bl	800a248 <_printf_common>
 800a484:	3001      	adds	r0, #1
 800a486:	d14c      	bne.n	800a522 <_printf_i+0x1fe>
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	b004      	add	sp, #16
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	4835      	ldr	r0, [pc, #212]	; (800a568 <_printf_i+0x244>)
 800a494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4a0:	6029      	str	r1, [r5, #0]
 800a4a2:	061d      	lsls	r5, r3, #24
 800a4a4:	d514      	bpl.n	800a4d0 <_printf_i+0x1ac>
 800a4a6:	07df      	lsls	r7, r3, #31
 800a4a8:	bf44      	itt	mi
 800a4aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ae:	6023      	strmi	r3, [r4, #0]
 800a4b0:	b91e      	cbnz	r6, 800a4ba <_printf_i+0x196>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f023 0320 	bic.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	2310      	movs	r3, #16
 800a4bc:	e7b0      	b.n	800a420 <_printf_i+0xfc>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	f043 0320 	orr.w	r3, r3, #32
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	2378      	movs	r3, #120	; 0x78
 800a4c8:	4828      	ldr	r0, [pc, #160]	; (800a56c <_printf_i+0x248>)
 800a4ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4ce:	e7e3      	b.n	800a498 <_printf_i+0x174>
 800a4d0:	0659      	lsls	r1, r3, #25
 800a4d2:	bf48      	it	mi
 800a4d4:	b2b6      	uxthmi	r6, r6
 800a4d6:	e7e6      	b.n	800a4a6 <_printf_i+0x182>
 800a4d8:	4615      	mov	r5, r2
 800a4da:	e7bb      	b.n	800a454 <_printf_i+0x130>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	6826      	ldr	r6, [r4, #0]
 800a4e0:	6961      	ldr	r1, [r4, #20]
 800a4e2:	1d18      	adds	r0, r3, #4
 800a4e4:	6028      	str	r0, [r5, #0]
 800a4e6:	0635      	lsls	r5, r6, #24
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	d501      	bpl.n	800a4f0 <_printf_i+0x1cc>
 800a4ec:	6019      	str	r1, [r3, #0]
 800a4ee:	e002      	b.n	800a4f6 <_printf_i+0x1d2>
 800a4f0:	0670      	lsls	r0, r6, #25
 800a4f2:	d5fb      	bpl.n	800a4ec <_printf_i+0x1c8>
 800a4f4:	8019      	strh	r1, [r3, #0]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6123      	str	r3, [r4, #16]
 800a4fa:	4615      	mov	r5, r2
 800a4fc:	e7ba      	b.n	800a474 <_printf_i+0x150>
 800a4fe:	682b      	ldr	r3, [r5, #0]
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	602a      	str	r2, [r5, #0]
 800a504:	681d      	ldr	r5, [r3, #0]
 800a506:	6862      	ldr	r2, [r4, #4]
 800a508:	2100      	movs	r1, #0
 800a50a:	4628      	mov	r0, r5
 800a50c:	f7f5 fe88 	bl	8000220 <memchr>
 800a510:	b108      	cbz	r0, 800a516 <_printf_i+0x1f2>
 800a512:	1b40      	subs	r0, r0, r5
 800a514:	6060      	str	r0, [r4, #4]
 800a516:	6863      	ldr	r3, [r4, #4]
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	2300      	movs	r3, #0
 800a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a520:	e7a8      	b.n	800a474 <_printf_i+0x150>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	462a      	mov	r2, r5
 800a526:	4649      	mov	r1, r9
 800a528:	4640      	mov	r0, r8
 800a52a:	47d0      	blx	sl
 800a52c:	3001      	adds	r0, #1
 800a52e:	d0ab      	beq.n	800a488 <_printf_i+0x164>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	079b      	lsls	r3, r3, #30
 800a534:	d413      	bmi.n	800a55e <_printf_i+0x23a>
 800a536:	68e0      	ldr	r0, [r4, #12]
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	4298      	cmp	r0, r3
 800a53c:	bfb8      	it	lt
 800a53e:	4618      	movlt	r0, r3
 800a540:	e7a4      	b.n	800a48c <_printf_i+0x168>
 800a542:	2301      	movs	r3, #1
 800a544:	4632      	mov	r2, r6
 800a546:	4649      	mov	r1, r9
 800a548:	4640      	mov	r0, r8
 800a54a:	47d0      	blx	sl
 800a54c:	3001      	adds	r0, #1
 800a54e:	d09b      	beq.n	800a488 <_printf_i+0x164>
 800a550:	3501      	adds	r5, #1
 800a552:	68e3      	ldr	r3, [r4, #12]
 800a554:	9903      	ldr	r1, [sp, #12]
 800a556:	1a5b      	subs	r3, r3, r1
 800a558:	42ab      	cmp	r3, r5
 800a55a:	dcf2      	bgt.n	800a542 <_printf_i+0x21e>
 800a55c:	e7eb      	b.n	800a536 <_printf_i+0x212>
 800a55e:	2500      	movs	r5, #0
 800a560:	f104 0619 	add.w	r6, r4, #25
 800a564:	e7f5      	b.n	800a552 <_printf_i+0x22e>
 800a566:	bf00      	nop
 800a568:	0800c766 	.word	0x0800c766
 800a56c:	0800c777 	.word	0x0800c777

0800a570 <quorem>:
 800a570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	6903      	ldr	r3, [r0, #16]
 800a576:	690c      	ldr	r4, [r1, #16]
 800a578:	42a3      	cmp	r3, r4
 800a57a:	4607      	mov	r7, r0
 800a57c:	f2c0 8081 	blt.w	800a682 <quorem+0x112>
 800a580:	3c01      	subs	r4, #1
 800a582:	f101 0814 	add.w	r8, r1, #20
 800a586:	f100 0514 	add.w	r5, r0, #20
 800a58a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a598:	3301      	adds	r3, #1
 800a59a:	429a      	cmp	r2, r3
 800a59c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5a8:	d331      	bcc.n	800a60e <quorem+0x9e>
 800a5aa:	f04f 0e00 	mov.w	lr, #0
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	46ac      	mov	ip, r5
 800a5b2:	46f2      	mov	sl, lr
 800a5b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5b8:	b293      	uxth	r3, r2
 800a5ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a5be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5c8:	f8dc a000 	ldr.w	sl, [ip]
 800a5cc:	0c12      	lsrs	r2, r2, #16
 800a5ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a5d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	9b00      	ldr	r3, [sp, #0]
 800a5da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5de:	b292      	uxth	r2, r2
 800a5e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5ec:	4581      	cmp	r9, r0
 800a5ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a5f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5fa:	d2db      	bcs.n	800a5b4 <quorem+0x44>
 800a5fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a600:	b92b      	cbnz	r3, 800a60e <quorem+0x9e>
 800a602:	9b01      	ldr	r3, [sp, #4]
 800a604:	3b04      	subs	r3, #4
 800a606:	429d      	cmp	r5, r3
 800a608:	461a      	mov	r2, r3
 800a60a:	d32e      	bcc.n	800a66a <quorem+0xfa>
 800a60c:	613c      	str	r4, [r7, #16]
 800a60e:	4638      	mov	r0, r7
 800a610:	f001 f8b6 	bl	800b780 <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	db24      	blt.n	800a662 <quorem+0xf2>
 800a618:	3601      	adds	r6, #1
 800a61a:	4628      	mov	r0, r5
 800a61c:	f04f 0c00 	mov.w	ip, #0
 800a620:	f858 2b04 	ldr.w	r2, [r8], #4
 800a624:	f8d0 e000 	ldr.w	lr, [r0]
 800a628:	b293      	uxth	r3, r2
 800a62a:	ebac 0303 	sub.w	r3, ip, r3
 800a62e:	0c12      	lsrs	r2, r2, #16
 800a630:	fa13 f38e 	uxtah	r3, r3, lr
 800a634:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a642:	45c1      	cmp	r9, r8
 800a644:	f840 3b04 	str.w	r3, [r0], #4
 800a648:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a64c:	d2e8      	bcs.n	800a620 <quorem+0xb0>
 800a64e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a656:	b922      	cbnz	r2, 800a662 <quorem+0xf2>
 800a658:	3b04      	subs	r3, #4
 800a65a:	429d      	cmp	r5, r3
 800a65c:	461a      	mov	r2, r3
 800a65e:	d30a      	bcc.n	800a676 <quorem+0x106>
 800a660:	613c      	str	r4, [r7, #16]
 800a662:	4630      	mov	r0, r6
 800a664:	b003      	add	sp, #12
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	3b04      	subs	r3, #4
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d1cc      	bne.n	800a60c <quorem+0x9c>
 800a672:	3c01      	subs	r4, #1
 800a674:	e7c7      	b.n	800a606 <quorem+0x96>
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	3b04      	subs	r3, #4
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	d1f0      	bne.n	800a660 <quorem+0xf0>
 800a67e:	3c01      	subs	r4, #1
 800a680:	e7eb      	b.n	800a65a <quorem+0xea>
 800a682:	2000      	movs	r0, #0
 800a684:	e7ee      	b.n	800a664 <quorem+0xf4>
	...

0800a688 <_dtoa_r>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ed2d 8b04 	vpush	{d8-d9}
 800a690:	ec57 6b10 	vmov	r6, r7, d0
 800a694:	b093      	sub	sp, #76	; 0x4c
 800a696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a69c:	9106      	str	r1, [sp, #24]
 800a69e:	ee10 aa10 	vmov	sl, s0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6a8:	46bb      	mov	fp, r7
 800a6aa:	b975      	cbnz	r5, 800a6ca <_dtoa_r+0x42>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f000 fddd 	bl	800b26c <malloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6b6:	b920      	cbnz	r0, 800a6c2 <_dtoa_r+0x3a>
 800a6b8:	4ba7      	ldr	r3, [pc, #668]	; (800a958 <_dtoa_r+0x2d0>)
 800a6ba:	21ea      	movs	r1, #234	; 0xea
 800a6bc:	48a7      	ldr	r0, [pc, #668]	; (800a95c <_dtoa_r+0x2d4>)
 800a6be:	f001 fa67 	bl	800bb90 <__assert_func>
 800a6c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6c6:	6005      	str	r5, [r0, #0]
 800a6c8:	60c5      	str	r5, [r0, #12]
 800a6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6cc:	6819      	ldr	r1, [r3, #0]
 800a6ce:	b151      	cbz	r1, 800a6e6 <_dtoa_r+0x5e>
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	604a      	str	r2, [r1, #4]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4093      	lsls	r3, r2
 800a6d8:	608b      	str	r3, [r1, #8]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fe0e 	bl	800b2fc <_Bfree>
 800a6e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	1e3b      	subs	r3, r7, #0
 800a6e8:	bfaa      	itet	ge
 800a6ea:	2300      	movge	r3, #0
 800a6ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a6f0:	f8c8 3000 	strge.w	r3, [r8]
 800a6f4:	4b9a      	ldr	r3, [pc, #616]	; (800a960 <_dtoa_r+0x2d8>)
 800a6f6:	bfbc      	itt	lt
 800a6f8:	2201      	movlt	r2, #1
 800a6fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a6fe:	ea33 030b 	bics.w	r3, r3, fp
 800a702:	d11b      	bne.n	800a73c <_dtoa_r+0xb4>
 800a704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a706:	f242 730f 	movw	r3, #9999	; 0x270f
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a710:	4333      	orrs	r3, r6
 800a712:	f000 8592 	beq.w	800b23a <_dtoa_r+0xbb2>
 800a716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a718:	b963      	cbnz	r3, 800a734 <_dtoa_r+0xac>
 800a71a:	4b92      	ldr	r3, [pc, #584]	; (800a964 <_dtoa_r+0x2dc>)
 800a71c:	e022      	b.n	800a764 <_dtoa_r+0xdc>
 800a71e:	4b92      	ldr	r3, [pc, #584]	; (800a968 <_dtoa_r+0x2e0>)
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	3308      	adds	r3, #8
 800a724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	9801      	ldr	r0, [sp, #4]
 800a72a:	b013      	add	sp, #76	; 0x4c
 800a72c:	ecbd 8b04 	vpop	{d8-d9}
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	4b8b      	ldr	r3, [pc, #556]	; (800a964 <_dtoa_r+0x2dc>)
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	3303      	adds	r3, #3
 800a73a:	e7f3      	b.n	800a724 <_dtoa_r+0x9c>
 800a73c:	2200      	movs	r2, #0
 800a73e:	2300      	movs	r3, #0
 800a740:	4650      	mov	r0, sl
 800a742:	4659      	mov	r1, fp
 800a744:	f7f6 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 800a748:	ec4b ab19 	vmov	d9, sl, fp
 800a74c:	4680      	mov	r8, r0
 800a74e:	b158      	cbz	r0, 800a768 <_dtoa_r+0xe0>
 800a750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a752:	2301      	movs	r3, #1
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 856b 	beq.w	800b234 <_dtoa_r+0xbac>
 800a75e:	4883      	ldr	r0, [pc, #524]	; (800a96c <_dtoa_r+0x2e4>)
 800a760:	6018      	str	r0, [r3, #0]
 800a762:	1e43      	subs	r3, r0, #1
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	e7df      	b.n	800a728 <_dtoa_r+0xa0>
 800a768:	ec4b ab10 	vmov	d0, sl, fp
 800a76c:	aa10      	add	r2, sp, #64	; 0x40
 800a76e:	a911      	add	r1, sp, #68	; 0x44
 800a770:	4620      	mov	r0, r4
 800a772:	f001 f8ab 	bl	800b8cc <__d2b>
 800a776:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a77a:	ee08 0a10 	vmov	s16, r0
 800a77e:	2d00      	cmp	r5, #0
 800a780:	f000 8084 	beq.w	800a88c <_dtoa_r+0x204>
 800a784:	ee19 3a90 	vmov	r3, s19
 800a788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a78c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a790:	4656      	mov	r6, sl
 800a792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a79a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a79e:	4b74      	ldr	r3, [pc, #464]	; (800a970 <_dtoa_r+0x2e8>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	f7f5 fd8f 	bl	80002c8 <__aeabi_dsub>
 800a7aa:	a365      	add	r3, pc, #404	; (adr r3, 800a940 <_dtoa_r+0x2b8>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 ff42 	bl	8000638 <__aeabi_dmul>
 800a7b4:	a364      	add	r3, pc, #400	; (adr r3, 800a948 <_dtoa_r+0x2c0>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fd87 	bl	80002cc <__adddf3>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	460f      	mov	r7, r1
 800a7c4:	f7f5 fece 	bl	8000564 <__aeabi_i2d>
 800a7c8:	a361      	add	r3, pc, #388	; (adr r3, 800a950 <_dtoa_r+0x2c8>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 ff33 	bl	8000638 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	f7f5 fd77 	bl	80002cc <__adddf3>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	f7f6 f9d9 	bl	8000b98 <__aeabi_d2iz>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	9000      	str	r0, [sp, #0]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f6 f994 	bl	8000b1c <__aeabi_dcmplt>
 800a7f4:	b150      	cbz	r0, 800a80c <_dtoa_r+0x184>
 800a7f6:	9800      	ldr	r0, [sp, #0]
 800a7f8:	f7f5 feb4 	bl	8000564 <__aeabi_i2d>
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	463b      	mov	r3, r7
 800a800:	f7f6 f982 	bl	8000b08 <__aeabi_dcmpeq>
 800a804:	b910      	cbnz	r0, 800a80c <_dtoa_r+0x184>
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	3b01      	subs	r3, #1
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	2b16      	cmp	r3, #22
 800a810:	d85a      	bhi.n	800a8c8 <_dtoa_r+0x240>
 800a812:	9a00      	ldr	r2, [sp, #0]
 800a814:	4b57      	ldr	r3, [pc, #348]	; (800a974 <_dtoa_r+0x2ec>)
 800a816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	ec51 0b19 	vmov	r0, r1, d9
 800a822:	f7f6 f97b 	bl	8000b1c <__aeabi_dcmplt>
 800a826:	2800      	cmp	r0, #0
 800a828:	d050      	beq.n	800a8cc <_dtoa_r+0x244>
 800a82a:	9b00      	ldr	r3, [sp, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2300      	movs	r3, #0
 800a832:	930b      	str	r3, [sp, #44]	; 0x2c
 800a834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a836:	1b5d      	subs	r5, r3, r5
 800a838:	1e6b      	subs	r3, r5, #1
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	bf45      	ittet	mi
 800a83e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a842:	9304      	strmi	r3, [sp, #16]
 800a844:	2300      	movpl	r3, #0
 800a846:	2300      	movmi	r3, #0
 800a848:	bf4c      	ite	mi
 800a84a:	9305      	strmi	r3, [sp, #20]
 800a84c:	9304      	strpl	r3, [sp, #16]
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	db3d      	blt.n	800a8d0 <_dtoa_r+0x248>
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	9a00      	ldr	r2, [sp, #0]
 800a858:	920a      	str	r2, [sp, #40]	; 0x28
 800a85a:	4413      	add	r3, r2
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	2300      	movs	r3, #0
 800a860:	9307      	str	r3, [sp, #28]
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	2b09      	cmp	r3, #9
 800a866:	f200 8089 	bhi.w	800a97c <_dtoa_r+0x2f4>
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	bfc4      	itt	gt
 800a86e:	3b04      	subgt	r3, #4
 800a870:	9306      	strgt	r3, [sp, #24]
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	f1a3 0302 	sub.w	r3, r3, #2
 800a878:	bfcc      	ite	gt
 800a87a:	2500      	movgt	r5, #0
 800a87c:	2501      	movle	r5, #1
 800a87e:	2b03      	cmp	r3, #3
 800a880:	f200 8087 	bhi.w	800a992 <_dtoa_r+0x30a>
 800a884:	e8df f003 	tbb	[pc, r3]
 800a888:	59383a2d 	.word	0x59383a2d
 800a88c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a890:	441d      	add	r5, r3
 800a892:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a896:	2b20      	cmp	r3, #32
 800a898:	bfc1      	itttt	gt
 800a89a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a89e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8aa:	bfda      	itte	le
 800a8ac:	f1c3 0320 	rsble	r3, r3, #32
 800a8b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8b4:	4318      	orrgt	r0, r3
 800a8b6:	f7f5 fe45 	bl	8000544 <__aeabi_ui2d>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4606      	mov	r6, r0
 800a8be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8c2:	3d01      	subs	r5, #1
 800a8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8c6:	e76a      	b.n	800a79e <_dtoa_r+0x116>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e7b2      	b.n	800a832 <_dtoa_r+0x1aa>
 800a8cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8ce:	e7b1      	b.n	800a834 <_dtoa_r+0x1ac>
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	9a00      	ldr	r2, [sp, #0]
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	4253      	negs	r3, r2
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e0:	e7bf      	b.n	800a862 <_dtoa_r+0x1da>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dc55      	bgt.n	800a998 <_dtoa_r+0x310>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f6:	e00c      	b.n	800a912 <_dtoa_r+0x28a>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e7f3      	b.n	800a8e4 <_dtoa_r+0x25c>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a900:	9308      	str	r3, [sp, #32]
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	4413      	add	r3, r2
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	3301      	adds	r3, #1
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	9303      	str	r3, [sp, #12]
 800a90e:	bfb8      	it	lt
 800a910:	2301      	movlt	r3, #1
 800a912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a914:	2200      	movs	r2, #0
 800a916:	6042      	str	r2, [r0, #4]
 800a918:	2204      	movs	r2, #4
 800a91a:	f102 0614 	add.w	r6, r2, #20
 800a91e:	429e      	cmp	r6, r3
 800a920:	6841      	ldr	r1, [r0, #4]
 800a922:	d93d      	bls.n	800a9a0 <_dtoa_r+0x318>
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fca9 	bl	800b27c <_Balloc>
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d13b      	bne.n	800a9a8 <_dtoa_r+0x320>
 800a930:	4b11      	ldr	r3, [pc, #68]	; (800a978 <_dtoa_r+0x2f0>)
 800a932:	4602      	mov	r2, r0
 800a934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a938:	e6c0      	b.n	800a6bc <_dtoa_r+0x34>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e7df      	b.n	800a8fe <_dtoa_r+0x276>
 800a93e:	bf00      	nop
 800a940:	636f4361 	.word	0x636f4361
 800a944:	3fd287a7 	.word	0x3fd287a7
 800a948:	8b60c8b3 	.word	0x8b60c8b3
 800a94c:	3fc68a28 	.word	0x3fc68a28
 800a950:	509f79fb 	.word	0x509f79fb
 800a954:	3fd34413 	.word	0x3fd34413
 800a958:	0800c795 	.word	0x0800c795
 800a95c:	0800c7ac 	.word	0x0800c7ac
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	0800c791 	.word	0x0800c791
 800a968:	0800c788 	.word	0x0800c788
 800a96c:	0800c765 	.word	0x0800c765
 800a970:	3ff80000 	.word	0x3ff80000
 800a974:	0800c8a0 	.word	0x0800c8a0
 800a978:	0800c807 	.word	0x0800c807
 800a97c:	2501      	movs	r5, #1
 800a97e:	2300      	movs	r3, #0
 800a980:	9306      	str	r3, [sp, #24]
 800a982:	9508      	str	r5, [sp, #32]
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a98c:	2200      	movs	r2, #0
 800a98e:	2312      	movs	r3, #18
 800a990:	e7b0      	b.n	800a8f4 <_dtoa_r+0x26c>
 800a992:	2301      	movs	r3, #1
 800a994:	9308      	str	r3, [sp, #32]
 800a996:	e7f5      	b.n	800a984 <_dtoa_r+0x2fc>
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a99e:	e7b8      	b.n	800a912 <_dtoa_r+0x28a>
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	6041      	str	r1, [r0, #4]
 800a9a4:	0052      	lsls	r2, r2, #1
 800a9a6:	e7b8      	b.n	800a91a <_dtoa_r+0x292>
 800a9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	2b0e      	cmp	r3, #14
 800a9b2:	f200 809d 	bhi.w	800aaf0 <_dtoa_r+0x468>
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	f000 809a 	beq.w	800aaf0 <_dtoa_r+0x468>
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dd32      	ble.n	800aa28 <_dtoa_r+0x3a0>
 800a9c2:	4ab7      	ldr	r2, [pc, #732]	; (800aca0 <_dtoa_r+0x618>)
 800a9c4:	f003 030f 	and.w	r3, r3, #15
 800a9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9d0:	9b00      	ldr	r3, [sp, #0]
 800a9d2:	05d8      	lsls	r0, r3, #23
 800a9d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a9d8:	d516      	bpl.n	800aa08 <_dtoa_r+0x380>
 800a9da:	4bb2      	ldr	r3, [pc, #712]	; (800aca4 <_dtoa_r+0x61c>)
 800a9dc:	ec51 0b19 	vmov	r0, r1, d9
 800a9e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e4:	f7f5 ff52 	bl	800088c <__aeabi_ddiv>
 800a9e8:	f007 070f 	and.w	r7, r7, #15
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	468b      	mov	fp, r1
 800a9f0:	2503      	movs	r5, #3
 800a9f2:	4eac      	ldr	r6, [pc, #688]	; (800aca4 <_dtoa_r+0x61c>)
 800a9f4:	b957      	cbnz	r7, 800aa0c <_dtoa_r+0x384>
 800a9f6:	4642      	mov	r2, r8
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	f7f5 ff45 	bl	800088c <__aeabi_ddiv>
 800aa02:	4682      	mov	sl, r0
 800aa04:	468b      	mov	fp, r1
 800aa06:	e028      	b.n	800aa5a <_dtoa_r+0x3d2>
 800aa08:	2502      	movs	r5, #2
 800aa0a:	e7f2      	b.n	800a9f2 <_dtoa_r+0x36a>
 800aa0c:	07f9      	lsls	r1, r7, #31
 800aa0e:	d508      	bpl.n	800aa22 <_dtoa_r+0x39a>
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa18:	f7f5 fe0e 	bl	8000638 <__aeabi_dmul>
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4689      	mov	r9, r1
 800aa22:	107f      	asrs	r7, r7, #1
 800aa24:	3608      	adds	r6, #8
 800aa26:	e7e5      	b.n	800a9f4 <_dtoa_r+0x36c>
 800aa28:	f000 809b 	beq.w	800ab62 <_dtoa_r+0x4da>
 800aa2c:	9b00      	ldr	r3, [sp, #0]
 800aa2e:	4f9d      	ldr	r7, [pc, #628]	; (800aca4 <_dtoa_r+0x61c>)
 800aa30:	425e      	negs	r6, r3
 800aa32:	4b9b      	ldr	r3, [pc, #620]	; (800aca0 <_dtoa_r+0x618>)
 800aa34:	f006 020f 	and.w	r2, r6, #15
 800aa38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	ec51 0b19 	vmov	r0, r1, d9
 800aa44:	f7f5 fdf8 	bl	8000638 <__aeabi_dmul>
 800aa48:	1136      	asrs	r6, r6, #4
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	468b      	mov	fp, r1
 800aa4e:	2300      	movs	r3, #0
 800aa50:	2502      	movs	r5, #2
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d17a      	bne.n	800ab4c <_dtoa_r+0x4c4>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1d3      	bne.n	800aa02 <_dtoa_r+0x37a>
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8082 	beq.w	800ab66 <_dtoa_r+0x4de>
 800aa62:	4b91      	ldr	r3, [pc, #580]	; (800aca8 <_dtoa_r+0x620>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	4650      	mov	r0, sl
 800aa68:	4659      	mov	r1, fp
 800aa6a:	f7f6 f857 	bl	8000b1c <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d079      	beq.n	800ab66 <_dtoa_r+0x4de>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d076      	beq.n	800ab66 <_dtoa_r+0x4de>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dd36      	ble.n	800aaec <_dtoa_r+0x464>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	4650      	mov	r0, sl
 800aa82:	4659      	mov	r1, fp
 800aa84:	1e5f      	subs	r7, r3, #1
 800aa86:	2200      	movs	r2, #0
 800aa88:	4b88      	ldr	r3, [pc, #544]	; (800acac <_dtoa_r+0x624>)
 800aa8a:	f7f5 fdd5 	bl	8000638 <__aeabi_dmul>
 800aa8e:	9e02      	ldr	r6, [sp, #8]
 800aa90:	4682      	mov	sl, r0
 800aa92:	468b      	mov	fp, r1
 800aa94:	3501      	adds	r5, #1
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7f5 fd64 	bl	8000564 <__aeabi_i2d>
 800aa9c:	4652      	mov	r2, sl
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	4b82      	ldr	r3, [pc, #520]	; (800acb0 <_dtoa_r+0x628>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fc10 	bl	80002cc <__adddf3>
 800aaac:	46d0      	mov	r8, sl
 800aaae:	46d9      	mov	r9, fp
 800aab0:	4682      	mov	sl, r0
 800aab2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d158      	bne.n	800ab6c <_dtoa_r+0x4e4>
 800aaba:	4b7e      	ldr	r3, [pc, #504]	; (800acb4 <_dtoa_r+0x62c>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	f7f5 fc01 	bl	80002c8 <__aeabi_dsub>
 800aac6:	4652      	mov	r2, sl
 800aac8:	465b      	mov	r3, fp
 800aaca:	4680      	mov	r8, r0
 800aacc:	4689      	mov	r9, r1
 800aace:	f7f6 f843 	bl	8000b58 <__aeabi_dcmpgt>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f040 8295 	bne.w	800b002 <_dtoa_r+0x97a>
 800aad8:	4652      	mov	r2, sl
 800aada:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aade:	4640      	mov	r0, r8
 800aae0:	4649      	mov	r1, r9
 800aae2:	f7f6 f81b 	bl	8000b1c <__aeabi_dcmplt>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f040 8289 	bne.w	800affe <_dtoa_r+0x976>
 800aaec:	ec5b ab19 	vmov	sl, fp, d9
 800aaf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f2c0 8148 	blt.w	800ad88 <_dtoa_r+0x700>
 800aaf8:	9a00      	ldr	r2, [sp, #0]
 800aafa:	2a0e      	cmp	r2, #14
 800aafc:	f300 8144 	bgt.w	800ad88 <_dtoa_r+0x700>
 800ab00:	4b67      	ldr	r3, [pc, #412]	; (800aca0 <_dtoa_r+0x618>)
 800ab02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f280 80d5 	bge.w	800acbc <_dtoa_r+0x634>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f300 80d1 	bgt.w	800acbc <_dtoa_r+0x634>
 800ab1a:	f040 826f 	bne.w	800affc <_dtoa_r+0x974>
 800ab1e:	4b65      	ldr	r3, [pc, #404]	; (800acb4 <_dtoa_r+0x62c>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	f7f5 fd87 	bl	8000638 <__aeabi_dmul>
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	f7f6 f809 	bl	8000b44 <__aeabi_dcmpge>
 800ab32:	9e03      	ldr	r6, [sp, #12]
 800ab34:	4637      	mov	r7, r6
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f040 8245 	bne.w	800afc6 <_dtoa_r+0x93e>
 800ab3c:	9d01      	ldr	r5, [sp, #4]
 800ab3e:	2331      	movs	r3, #49	; 0x31
 800ab40:	f805 3b01 	strb.w	r3, [r5], #1
 800ab44:	9b00      	ldr	r3, [sp, #0]
 800ab46:	3301      	adds	r3, #1
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	e240      	b.n	800afce <_dtoa_r+0x946>
 800ab4c:	07f2      	lsls	r2, r6, #31
 800ab4e:	d505      	bpl.n	800ab5c <_dtoa_r+0x4d4>
 800ab50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab54:	f7f5 fd70 	bl	8000638 <__aeabi_dmul>
 800ab58:	3501      	adds	r5, #1
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	1076      	asrs	r6, r6, #1
 800ab5e:	3708      	adds	r7, #8
 800ab60:	e777      	b.n	800aa52 <_dtoa_r+0x3ca>
 800ab62:	2502      	movs	r5, #2
 800ab64:	e779      	b.n	800aa5a <_dtoa_r+0x3d2>
 800ab66:	9f00      	ldr	r7, [sp, #0]
 800ab68:	9e03      	ldr	r6, [sp, #12]
 800ab6a:	e794      	b.n	800aa96 <_dtoa_r+0x40e>
 800ab6c:	9901      	ldr	r1, [sp, #4]
 800ab6e:	4b4c      	ldr	r3, [pc, #304]	; (800aca0 <_dtoa_r+0x618>)
 800ab70:	4431      	add	r1, r6
 800ab72:	910d      	str	r1, [sp, #52]	; 0x34
 800ab74:	9908      	ldr	r1, [sp, #32]
 800ab76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	d043      	beq.n	800ac0a <_dtoa_r+0x582>
 800ab82:	494d      	ldr	r1, [pc, #308]	; (800acb8 <_dtoa_r+0x630>)
 800ab84:	2000      	movs	r0, #0
 800ab86:	f7f5 fe81 	bl	800088c <__aeabi_ddiv>
 800ab8a:	4652      	mov	r2, sl
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	f7f5 fb9b 	bl	80002c8 <__aeabi_dsub>
 800ab92:	9d01      	ldr	r5, [sp, #4]
 800ab94:	4682      	mov	sl, r0
 800ab96:	468b      	mov	fp, r1
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f7f5 fffc 	bl	8000b98 <__aeabi_d2iz>
 800aba0:	4606      	mov	r6, r0
 800aba2:	f7f5 fcdf 	bl	8000564 <__aeabi_i2d>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fb8b 	bl	80002c8 <__aeabi_dsub>
 800abb2:	3630      	adds	r6, #48	; 0x30
 800abb4:	f805 6b01 	strb.w	r6, [r5], #1
 800abb8:	4652      	mov	r2, sl
 800abba:	465b      	mov	r3, fp
 800abbc:	4680      	mov	r8, r0
 800abbe:	4689      	mov	r9, r1
 800abc0:	f7f5 ffac 	bl	8000b1c <__aeabi_dcmplt>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d163      	bne.n	800ac90 <_dtoa_r+0x608>
 800abc8:	4642      	mov	r2, r8
 800abca:	464b      	mov	r3, r9
 800abcc:	4936      	ldr	r1, [pc, #216]	; (800aca8 <_dtoa_r+0x620>)
 800abce:	2000      	movs	r0, #0
 800abd0:	f7f5 fb7a 	bl	80002c8 <__aeabi_dsub>
 800abd4:	4652      	mov	r2, sl
 800abd6:	465b      	mov	r3, fp
 800abd8:	f7f5 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f040 80b5 	bne.w	800ad4c <_dtoa_r+0x6c4>
 800abe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe4:	429d      	cmp	r5, r3
 800abe6:	d081      	beq.n	800aaec <_dtoa_r+0x464>
 800abe8:	4b30      	ldr	r3, [pc, #192]	; (800acac <_dtoa_r+0x624>)
 800abea:	2200      	movs	r2, #0
 800abec:	4650      	mov	r0, sl
 800abee:	4659      	mov	r1, fp
 800abf0:	f7f5 fd22 	bl	8000638 <__aeabi_dmul>
 800abf4:	4b2d      	ldr	r3, [pc, #180]	; (800acac <_dtoa_r+0x624>)
 800abf6:	4682      	mov	sl, r0
 800abf8:	468b      	mov	fp, r1
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	2200      	movs	r2, #0
 800ac00:	f7f5 fd1a 	bl	8000638 <__aeabi_dmul>
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	e7c6      	b.n	800ab98 <_dtoa_r+0x510>
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	f7f5 fd13 	bl	8000638 <__aeabi_dmul>
 800ac12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac14:	9d01      	ldr	r5, [sp, #4]
 800ac16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac18:	4682      	mov	sl, r0
 800ac1a:	468b      	mov	fp, r1
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f7f5 ffba 	bl	8000b98 <__aeabi_d2iz>
 800ac24:	4606      	mov	r6, r0
 800ac26:	f7f5 fc9d 	bl	8000564 <__aeabi_i2d>
 800ac2a:	3630      	adds	r6, #48	; 0x30
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4640      	mov	r0, r8
 800ac32:	4649      	mov	r1, r9
 800ac34:	f7f5 fb48 	bl	80002c8 <__aeabi_dsub>
 800ac38:	f805 6b01 	strb.w	r6, [r5], #1
 800ac3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	4680      	mov	r8, r0
 800ac42:	4689      	mov	r9, r1
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	d124      	bne.n	800ac94 <_dtoa_r+0x60c>
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	; (800acb8 <_dtoa_r+0x630>)
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	4659      	mov	r1, fp
 800ac50:	f7f5 fb3c 	bl	80002cc <__adddf3>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d173      	bne.n	800ad4c <_dtoa_r+0x6c4>
 800ac64:	4652      	mov	r2, sl
 800ac66:	465b      	mov	r3, fp
 800ac68:	4913      	ldr	r1, [pc, #76]	; (800acb8 <_dtoa_r+0x630>)
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f af35 	beq.w	800aaec <_dtoa_r+0x464>
 800ac82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac84:	1e6b      	subs	r3, r5, #1
 800ac86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac8c:	2b30      	cmp	r3, #48	; 0x30
 800ac8e:	d0f8      	beq.n	800ac82 <_dtoa_r+0x5fa>
 800ac90:	9700      	str	r7, [sp, #0]
 800ac92:	e049      	b.n	800ad28 <_dtoa_r+0x6a0>
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <_dtoa_r+0x624>)
 800ac96:	f7f5 fccf 	bl	8000638 <__aeabi_dmul>
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	4689      	mov	r9, r1
 800ac9e:	e7bd      	b.n	800ac1c <_dtoa_r+0x594>
 800aca0:	0800c8a0 	.word	0x0800c8a0
 800aca4:	0800c878 	.word	0x0800c878
 800aca8:	3ff00000 	.word	0x3ff00000
 800acac:	40240000 	.word	0x40240000
 800acb0:	401c0000 	.word	0x401c0000
 800acb4:	40140000 	.word	0x40140000
 800acb8:	3fe00000 	.word	0x3fe00000
 800acbc:	9d01      	ldr	r5, [sp, #4]
 800acbe:	4656      	mov	r6, sl
 800acc0:	465f      	mov	r7, fp
 800acc2:	4642      	mov	r2, r8
 800acc4:	464b      	mov	r3, r9
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fddf 	bl	800088c <__aeabi_ddiv>
 800acce:	f7f5 ff63 	bl	8000b98 <__aeabi_d2iz>
 800acd2:	4682      	mov	sl, r0
 800acd4:	f7f5 fc46 	bl	8000564 <__aeabi_i2d>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800acec:	f7f5 faec 	bl	80002c8 <__aeabi_dsub>
 800acf0:	f805 6b01 	strb.w	r6, [r5], #1
 800acf4:	9e01      	ldr	r6, [sp, #4]
 800acf6:	9f03      	ldr	r7, [sp, #12]
 800acf8:	1bae      	subs	r6, r5, r6
 800acfa:	42b7      	cmp	r7, r6
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	d135      	bne.n	800ad6e <_dtoa_r+0x6e6>
 800ad02:	f7f5 fae3 	bl	80002cc <__adddf3>
 800ad06:	4642      	mov	r2, r8
 800ad08:	464b      	mov	r3, r9
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	f7f5 ff23 	bl	8000b58 <__aeabi_dcmpgt>
 800ad12:	b9d0      	cbnz	r0, 800ad4a <_dtoa_r+0x6c2>
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fef4 	bl	8000b08 <__aeabi_dcmpeq>
 800ad20:	b110      	cbz	r0, 800ad28 <_dtoa_r+0x6a0>
 800ad22:	f01a 0f01 	tst.w	sl, #1
 800ad26:	d110      	bne.n	800ad4a <_dtoa_r+0x6c2>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	ee18 1a10 	vmov	r1, s16
 800ad2e:	f000 fae5 	bl	800b2fc <_Bfree>
 800ad32:	2300      	movs	r3, #0
 800ad34:	9800      	ldr	r0, [sp, #0]
 800ad36:	702b      	strb	r3, [r5, #0]
 800ad38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	6018      	str	r0, [r3, #0]
 800ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f43f acf1 	beq.w	800a728 <_dtoa_r+0xa0>
 800ad46:	601d      	str	r5, [r3, #0]
 800ad48:	e4ee      	b.n	800a728 <_dtoa_r+0xa0>
 800ad4a:	9f00      	ldr	r7, [sp, #0]
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	461d      	mov	r5, r3
 800ad50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad54:	2a39      	cmp	r2, #57	; 0x39
 800ad56:	d106      	bne.n	800ad66 <_dtoa_r+0x6de>
 800ad58:	9a01      	ldr	r2, [sp, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d1f7      	bne.n	800ad4e <_dtoa_r+0x6c6>
 800ad5e:	9901      	ldr	r1, [sp, #4]
 800ad60:	2230      	movs	r2, #48	; 0x30
 800ad62:	3701      	adds	r7, #1
 800ad64:	700a      	strb	r2, [r1, #0]
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	3201      	adds	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e790      	b.n	800ac90 <_dtoa_r+0x608>
 800ad6e:	4ba6      	ldr	r3, [pc, #664]	; (800b008 <_dtoa_r+0x980>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	f7f5 fc61 	bl	8000638 <__aeabi_dmul>
 800ad76:	2200      	movs	r2, #0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	f7f5 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d09d      	beq.n	800acc2 <_dtoa_r+0x63a>
 800ad86:	e7cf      	b.n	800ad28 <_dtoa_r+0x6a0>
 800ad88:	9a08      	ldr	r2, [sp, #32]
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	f000 80d7 	beq.w	800af3e <_dtoa_r+0x8b6>
 800ad90:	9a06      	ldr	r2, [sp, #24]
 800ad92:	2a01      	cmp	r2, #1
 800ad94:	f300 80ba 	bgt.w	800af0c <_dtoa_r+0x884>
 800ad98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	f000 80b2 	beq.w	800af04 <_dtoa_r+0x87c>
 800ada0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ada4:	9e07      	ldr	r6, [sp, #28]
 800ada6:	9d04      	ldr	r5, [sp, #16]
 800ada8:	9a04      	ldr	r2, [sp, #16]
 800adaa:	441a      	add	r2, r3
 800adac:	9204      	str	r2, [sp, #16]
 800adae:	9a05      	ldr	r2, [sp, #20]
 800adb0:	2101      	movs	r1, #1
 800adb2:	441a      	add	r2, r3
 800adb4:	4620      	mov	r0, r4
 800adb6:	9205      	str	r2, [sp, #20]
 800adb8:	f000 fb58 	bl	800b46c <__i2b>
 800adbc:	4607      	mov	r7, r0
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	dd0c      	ble.n	800addc <_dtoa_r+0x754>
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dd09      	ble.n	800addc <_dtoa_r+0x754>
 800adc8:	42ab      	cmp	r3, r5
 800adca:	9a04      	ldr	r2, [sp, #16]
 800adcc:	bfa8      	it	ge
 800adce:	462b      	movge	r3, r5
 800add0:	1ad2      	subs	r2, r2, r3
 800add2:	9204      	str	r2, [sp, #16]
 800add4:	9a05      	ldr	r2, [sp, #20]
 800add6:	1aed      	subs	r5, r5, r3
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	9305      	str	r3, [sp, #20]
 800addc:	9b07      	ldr	r3, [sp, #28]
 800adde:	b31b      	cbz	r3, 800ae28 <_dtoa_r+0x7a0>
 800ade0:	9b08      	ldr	r3, [sp, #32]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80af 	beq.w	800af46 <_dtoa_r+0x8be>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	dd13      	ble.n	800ae14 <_dtoa_r+0x78c>
 800adec:	4639      	mov	r1, r7
 800adee:	4632      	mov	r2, r6
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fbfb 	bl	800b5ec <__pow5mult>
 800adf6:	ee18 2a10 	vmov	r2, s16
 800adfa:	4601      	mov	r1, r0
 800adfc:	4607      	mov	r7, r0
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 fb4a 	bl	800b498 <__multiply>
 800ae04:	ee18 1a10 	vmov	r1, s16
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fa76 	bl	800b2fc <_Bfree>
 800ae10:	ee08 8a10 	vmov	s16, r8
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	1b9a      	subs	r2, r3, r6
 800ae18:	d006      	beq.n	800ae28 <_dtoa_r+0x7a0>
 800ae1a:	ee18 1a10 	vmov	r1, s16
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fbe4 	bl	800b5ec <__pow5mult>
 800ae24:	ee08 0a10 	vmov	s16, r0
 800ae28:	2101      	movs	r1, #1
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fb1e 	bl	800b46c <__i2b>
 800ae30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	4606      	mov	r6, r0
 800ae36:	f340 8088 	ble.w	800af4a <_dtoa_r+0x8c2>
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fbd4 	bl	800b5ec <__pow5mult>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	4606      	mov	r6, r0
 800ae4a:	f340 8081 	ble.w	800af50 <_dtoa_r+0x8c8>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	6933      	ldr	r3, [r6, #16]
 800ae54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae58:	6918      	ldr	r0, [r3, #16]
 800ae5a:	f000 fab7 	bl	800b3cc <__hi0bits>
 800ae5e:	f1c0 0020 	rsb	r0, r0, #32
 800ae62:	9b05      	ldr	r3, [sp, #20]
 800ae64:	4418      	add	r0, r3
 800ae66:	f010 001f 	ands.w	r0, r0, #31
 800ae6a:	f000 8092 	beq.w	800af92 <_dtoa_r+0x90a>
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	f340 808a 	ble.w	800af8c <_dtoa_r+0x904>
 800ae78:	f1c0 001c 	rsb	r0, r0, #28
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	4403      	add	r3, r0
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	4403      	add	r3, r0
 800ae86:	4405      	add	r5, r0
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd07      	ble.n	800aea0 <_dtoa_r+0x818>
 800ae90:	ee18 1a10 	vmov	r1, s16
 800ae94:	461a      	mov	r2, r3
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fc02 	bl	800b6a0 <__lshift>
 800ae9c:	ee08 0a10 	vmov	s16, r0
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd05      	ble.n	800aeb2 <_dtoa_r+0x82a>
 800aea6:	4631      	mov	r1, r6
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fbf8 	bl	800b6a0 <__lshift>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d06e      	beq.n	800af96 <_dtoa_r+0x90e>
 800aeb8:	ee18 0a10 	vmov	r0, s16
 800aebc:	4631      	mov	r1, r6
 800aebe:	f000 fc5f 	bl	800b780 <__mcmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	da67      	bge.n	800af96 <_dtoa_r+0x90e>
 800aec6:	9b00      	ldr	r3, [sp, #0]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	ee18 1a10 	vmov	r1, s16
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	220a      	movs	r2, #10
 800aed2:	2300      	movs	r3, #0
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fa33 	bl	800b340 <__multadd>
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	ee08 0a10 	vmov	s16, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 81b1 	beq.w	800b248 <_dtoa_r+0xbc0>
 800aee6:	2300      	movs	r3, #0
 800aee8:	4639      	mov	r1, r7
 800aeea:	220a      	movs	r2, #10
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fa27 	bl	800b340 <__multadd>
 800aef2:	9b02      	ldr	r3, [sp, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	4607      	mov	r7, r0
 800aef8:	f300 808e 	bgt.w	800b018 <_dtoa_r+0x990>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	dc51      	bgt.n	800afa6 <_dtoa_r+0x91e>
 800af02:	e089      	b.n	800b018 <_dtoa_r+0x990>
 800af04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af0a:	e74b      	b.n	800ada4 <_dtoa_r+0x71c>
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	1e5e      	subs	r6, r3, #1
 800af10:	9b07      	ldr	r3, [sp, #28]
 800af12:	42b3      	cmp	r3, r6
 800af14:	bfbf      	itttt	lt
 800af16:	9b07      	ldrlt	r3, [sp, #28]
 800af18:	9607      	strlt	r6, [sp, #28]
 800af1a:	1af2      	sublt	r2, r6, r3
 800af1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af1e:	bfb6      	itet	lt
 800af20:	189b      	addlt	r3, r3, r2
 800af22:	1b9e      	subge	r6, r3, r6
 800af24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	bfb8      	it	lt
 800af2a:	2600      	movlt	r6, #0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bfb7      	itett	lt
 800af30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af38:	1a9d      	sublt	r5, r3, r2
 800af3a:	2300      	movlt	r3, #0
 800af3c:	e734      	b.n	800ada8 <_dtoa_r+0x720>
 800af3e:	9e07      	ldr	r6, [sp, #28]
 800af40:	9d04      	ldr	r5, [sp, #16]
 800af42:	9f08      	ldr	r7, [sp, #32]
 800af44:	e73b      	b.n	800adbe <_dtoa_r+0x736>
 800af46:	9a07      	ldr	r2, [sp, #28]
 800af48:	e767      	b.n	800ae1a <_dtoa_r+0x792>
 800af4a:	9b06      	ldr	r3, [sp, #24]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	dc18      	bgt.n	800af82 <_dtoa_r+0x8fa>
 800af50:	f1ba 0f00 	cmp.w	sl, #0
 800af54:	d115      	bne.n	800af82 <_dtoa_r+0x8fa>
 800af56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af5a:	b993      	cbnz	r3, 800af82 <_dtoa_r+0x8fa>
 800af5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af60:	0d1b      	lsrs	r3, r3, #20
 800af62:	051b      	lsls	r3, r3, #20
 800af64:	b183      	cbz	r3, 800af88 <_dtoa_r+0x900>
 800af66:	9b04      	ldr	r3, [sp, #16]
 800af68:	3301      	adds	r3, #1
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	3301      	adds	r3, #1
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	f04f 0801 	mov.w	r8, #1
 800af76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f af6a 	bne.w	800ae52 <_dtoa_r+0x7ca>
 800af7e:	2001      	movs	r0, #1
 800af80:	e76f      	b.n	800ae62 <_dtoa_r+0x7da>
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	e7f6      	b.n	800af76 <_dtoa_r+0x8ee>
 800af88:	4698      	mov	r8, r3
 800af8a:	e7f4      	b.n	800af76 <_dtoa_r+0x8ee>
 800af8c:	f43f af7d 	beq.w	800ae8a <_dtoa_r+0x802>
 800af90:	4618      	mov	r0, r3
 800af92:	301c      	adds	r0, #28
 800af94:	e772      	b.n	800ae7c <_dtoa_r+0x7f4>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	dc37      	bgt.n	800b00c <_dtoa_r+0x984>
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	dd34      	ble.n	800b00c <_dtoa_r+0x984>
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	9302      	str	r3, [sp, #8]
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	b96b      	cbnz	r3, 800afc6 <_dtoa_r+0x93e>
 800afaa:	4631      	mov	r1, r6
 800afac:	2205      	movs	r2, #5
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f9c6 	bl	800b340 <__multadd>
 800afb4:	4601      	mov	r1, r0
 800afb6:	4606      	mov	r6, r0
 800afb8:	ee18 0a10 	vmov	r0, s16
 800afbc:	f000 fbe0 	bl	800b780 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f73f adbb 	bgt.w	800ab3c <_dtoa_r+0x4b4>
 800afc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc8:	9d01      	ldr	r5, [sp, #4]
 800afca:	43db      	mvns	r3, r3
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	4631      	mov	r1, r6
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 f991 	bl	800b2fc <_Bfree>
 800afda:	2f00      	cmp	r7, #0
 800afdc:	f43f aea4 	beq.w	800ad28 <_dtoa_r+0x6a0>
 800afe0:	f1b8 0f00 	cmp.w	r8, #0
 800afe4:	d005      	beq.n	800aff2 <_dtoa_r+0x96a>
 800afe6:	45b8      	cmp	r8, r7
 800afe8:	d003      	beq.n	800aff2 <_dtoa_r+0x96a>
 800afea:	4641      	mov	r1, r8
 800afec:	4620      	mov	r0, r4
 800afee:	f000 f985 	bl	800b2fc <_Bfree>
 800aff2:	4639      	mov	r1, r7
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 f981 	bl	800b2fc <_Bfree>
 800affa:	e695      	b.n	800ad28 <_dtoa_r+0x6a0>
 800affc:	2600      	movs	r6, #0
 800affe:	4637      	mov	r7, r6
 800b000:	e7e1      	b.n	800afc6 <_dtoa_r+0x93e>
 800b002:	9700      	str	r7, [sp, #0]
 800b004:	4637      	mov	r7, r6
 800b006:	e599      	b.n	800ab3c <_dtoa_r+0x4b4>
 800b008:	40240000 	.word	0x40240000
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80ca 	beq.w	800b1a8 <_dtoa_r+0xb20>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	2d00      	cmp	r5, #0
 800b01a:	dd05      	ble.n	800b028 <_dtoa_r+0x9a0>
 800b01c:	4639      	mov	r1, r7
 800b01e:	462a      	mov	r2, r5
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fb3d 	bl	800b6a0 <__lshift>
 800b026:	4607      	mov	r7, r0
 800b028:	f1b8 0f00 	cmp.w	r8, #0
 800b02c:	d05b      	beq.n	800b0e6 <_dtoa_r+0xa5e>
 800b02e:	6879      	ldr	r1, [r7, #4]
 800b030:	4620      	mov	r0, r4
 800b032:	f000 f923 	bl	800b27c <_Balloc>
 800b036:	4605      	mov	r5, r0
 800b038:	b928      	cbnz	r0, 800b046 <_dtoa_r+0x9be>
 800b03a:	4b87      	ldr	r3, [pc, #540]	; (800b258 <_dtoa_r+0xbd0>)
 800b03c:	4602      	mov	r2, r0
 800b03e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b042:	f7ff bb3b 	b.w	800a6bc <_dtoa_r+0x34>
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	3202      	adds	r2, #2
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	f107 010c 	add.w	r1, r7, #12
 800b050:	300c      	adds	r0, #12
 800b052:	f7fe fe0d 	bl	8009c70 <memcpy>
 800b056:	2201      	movs	r2, #1
 800b058:	4629      	mov	r1, r5
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fb20 	bl	800b6a0 <__lshift>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	f103 0901 	add.w	r9, r3, #1
 800b066:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	f00a 0301 	and.w	r3, sl, #1
 800b072:	46b8      	mov	r8, r7
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	4607      	mov	r7, r0
 800b078:	4631      	mov	r1, r6
 800b07a:	ee18 0a10 	vmov	r0, s16
 800b07e:	f7ff fa77 	bl	800a570 <quorem>
 800b082:	4641      	mov	r1, r8
 800b084:	9002      	str	r0, [sp, #8]
 800b086:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b08a:	ee18 0a10 	vmov	r0, s16
 800b08e:	f000 fb77 	bl	800b780 <__mcmp>
 800b092:	463a      	mov	r2, r7
 800b094:	9003      	str	r0, [sp, #12]
 800b096:	4631      	mov	r1, r6
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 fb8d 	bl	800b7b8 <__mdiff>
 800b09e:	68c2      	ldr	r2, [r0, #12]
 800b0a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	bb02      	cbnz	r2, 800b0ea <_dtoa_r+0xa62>
 800b0a8:	4601      	mov	r1, r0
 800b0aa:	ee18 0a10 	vmov	r0, s16
 800b0ae:	f000 fb67 	bl	800b780 <__mcmp>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	9207      	str	r2, [sp, #28]
 800b0ba:	f000 f91f 	bl	800b2fc <_Bfree>
 800b0be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b0c2:	ea43 0102 	orr.w	r1, r3, r2
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	464d      	mov	r5, r9
 800b0cc:	d10f      	bne.n	800b0ee <_dtoa_r+0xa66>
 800b0ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0d2:	d02a      	beq.n	800b12a <_dtoa_r+0xaa2>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd02      	ble.n	800b0e0 <_dtoa_r+0xa58>
 800b0da:	9b02      	ldr	r3, [sp, #8]
 800b0dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b0e0:	f88b a000 	strb.w	sl, [fp]
 800b0e4:	e775      	b.n	800afd2 <_dtoa_r+0x94a>
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	e7ba      	b.n	800b060 <_dtoa_r+0x9d8>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	e7e2      	b.n	800b0b4 <_dtoa_r+0xa2c>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db04      	blt.n	800b0fe <_dtoa_r+0xa76>
 800b0f4:	9906      	ldr	r1, [sp, #24]
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	9904      	ldr	r1, [sp, #16]
 800b0fa:	430b      	orrs	r3, r1
 800b0fc:	d122      	bne.n	800b144 <_dtoa_r+0xabc>
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	ddee      	ble.n	800b0e0 <_dtoa_r+0xa58>
 800b102:	ee18 1a10 	vmov	r1, s16
 800b106:	2201      	movs	r2, #1
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fac9 	bl	800b6a0 <__lshift>
 800b10e:	4631      	mov	r1, r6
 800b110:	ee08 0a10 	vmov	s16, r0
 800b114:	f000 fb34 	bl	800b780 <__mcmp>
 800b118:	2800      	cmp	r0, #0
 800b11a:	dc03      	bgt.n	800b124 <_dtoa_r+0xa9c>
 800b11c:	d1e0      	bne.n	800b0e0 <_dtoa_r+0xa58>
 800b11e:	f01a 0f01 	tst.w	sl, #1
 800b122:	d0dd      	beq.n	800b0e0 <_dtoa_r+0xa58>
 800b124:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b128:	d1d7      	bne.n	800b0da <_dtoa_r+0xa52>
 800b12a:	2339      	movs	r3, #57	; 0x39
 800b12c:	f88b 3000 	strb.w	r3, [fp]
 800b130:	462b      	mov	r3, r5
 800b132:	461d      	mov	r5, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b13a:	2a39      	cmp	r2, #57	; 0x39
 800b13c:	d071      	beq.n	800b222 <_dtoa_r+0xb9a>
 800b13e:	3201      	adds	r2, #1
 800b140:	701a      	strb	r2, [r3, #0]
 800b142:	e746      	b.n	800afd2 <_dtoa_r+0x94a>
 800b144:	2a00      	cmp	r2, #0
 800b146:	dd07      	ble.n	800b158 <_dtoa_r+0xad0>
 800b148:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b14c:	d0ed      	beq.n	800b12a <_dtoa_r+0xaa2>
 800b14e:	f10a 0301 	add.w	r3, sl, #1
 800b152:	f88b 3000 	strb.w	r3, [fp]
 800b156:	e73c      	b.n	800afd2 <_dtoa_r+0x94a>
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b15e:	4599      	cmp	r9, r3
 800b160:	d047      	beq.n	800b1f2 <_dtoa_r+0xb6a>
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2300      	movs	r3, #0
 800b168:	220a      	movs	r2, #10
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f8e8 	bl	800b340 <__multadd>
 800b170:	45b8      	cmp	r8, r7
 800b172:	ee08 0a10 	vmov	s16, r0
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	f04f 020a 	mov.w	r2, #10
 800b17e:	4641      	mov	r1, r8
 800b180:	4620      	mov	r0, r4
 800b182:	d106      	bne.n	800b192 <_dtoa_r+0xb0a>
 800b184:	f000 f8dc 	bl	800b340 <__multadd>
 800b188:	4680      	mov	r8, r0
 800b18a:	4607      	mov	r7, r0
 800b18c:	f109 0901 	add.w	r9, r9, #1
 800b190:	e772      	b.n	800b078 <_dtoa_r+0x9f0>
 800b192:	f000 f8d5 	bl	800b340 <__multadd>
 800b196:	4639      	mov	r1, r7
 800b198:	4680      	mov	r8, r0
 800b19a:	2300      	movs	r3, #0
 800b19c:	220a      	movs	r2, #10
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f8ce 	bl	800b340 <__multadd>
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	e7f1      	b.n	800b18c <_dtoa_r+0xb04>
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	9302      	str	r3, [sp, #8]
 800b1ac:	9d01      	ldr	r5, [sp, #4]
 800b1ae:	ee18 0a10 	vmov	r0, s16
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	f7ff f9dc 	bl	800a570 <quorem>
 800b1b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	f805 ab01 	strb.w	sl, [r5], #1
 800b1c2:	1aea      	subs	r2, r5, r3
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	dd09      	ble.n	800b1de <_dtoa_r+0xb56>
 800b1ca:	ee18 1a10 	vmov	r1, s16
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	220a      	movs	r2, #10
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 f8b4 	bl	800b340 <__multadd>
 800b1d8:	ee08 0a10 	vmov	s16, r0
 800b1dc:	e7e7      	b.n	800b1ae <_dtoa_r+0xb26>
 800b1de:	9b02      	ldr	r3, [sp, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bfc8      	it	gt
 800b1e4:	461d      	movgt	r5, r3
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	bfd8      	it	le
 800b1ea:	2501      	movle	r5, #1
 800b1ec:	441d      	add	r5, r3
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	ee18 1a10 	vmov	r1, s16
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fa51 	bl	800b6a0 <__lshift>
 800b1fe:	4631      	mov	r1, r6
 800b200:	ee08 0a10 	vmov	s16, r0
 800b204:	f000 fabc 	bl	800b780 <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	dc91      	bgt.n	800b130 <_dtoa_r+0xaa8>
 800b20c:	d102      	bne.n	800b214 <_dtoa_r+0xb8c>
 800b20e:	f01a 0f01 	tst.w	sl, #1
 800b212:	d18d      	bne.n	800b130 <_dtoa_r+0xaa8>
 800b214:	462b      	mov	r3, r5
 800b216:	461d      	mov	r5, r3
 800b218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b21c:	2a30      	cmp	r2, #48	; 0x30
 800b21e:	d0fa      	beq.n	800b216 <_dtoa_r+0xb8e>
 800b220:	e6d7      	b.n	800afd2 <_dtoa_r+0x94a>
 800b222:	9a01      	ldr	r2, [sp, #4]
 800b224:	429a      	cmp	r2, r3
 800b226:	d184      	bne.n	800b132 <_dtoa_r+0xaaa>
 800b228:	9b00      	ldr	r3, [sp, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	2331      	movs	r3, #49	; 0x31
 800b230:	7013      	strb	r3, [r2, #0]
 800b232:	e6ce      	b.n	800afd2 <_dtoa_r+0x94a>
 800b234:	4b09      	ldr	r3, [pc, #36]	; (800b25c <_dtoa_r+0xbd4>)
 800b236:	f7ff ba95 	b.w	800a764 <_dtoa_r+0xdc>
 800b23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f47f aa6e 	bne.w	800a71e <_dtoa_r+0x96>
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <_dtoa_r+0xbd8>)
 800b244:	f7ff ba8e 	b.w	800a764 <_dtoa_r+0xdc>
 800b248:	9b02      	ldr	r3, [sp, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dcae      	bgt.n	800b1ac <_dtoa_r+0xb24>
 800b24e:	9b06      	ldr	r3, [sp, #24]
 800b250:	2b02      	cmp	r3, #2
 800b252:	f73f aea8 	bgt.w	800afa6 <_dtoa_r+0x91e>
 800b256:	e7a9      	b.n	800b1ac <_dtoa_r+0xb24>
 800b258:	0800c807 	.word	0x0800c807
 800b25c:	0800c764 	.word	0x0800c764
 800b260:	0800c788 	.word	0x0800c788

0800b264 <_localeconv_r>:
 800b264:	4800      	ldr	r0, [pc, #0]	; (800b268 <_localeconv_r+0x4>)
 800b266:	4770      	bx	lr
 800b268:	20000314 	.word	0x20000314

0800b26c <malloc>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <malloc+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f000 bc09 	b.w	800ba88 <_malloc_r>
 800b276:	bf00      	nop
 800b278:	200001c0 	.word	0x200001c0

0800b27c <_Balloc>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	b976      	cbnz	r6, 800b2a4 <_Balloc+0x28>
 800b286:	2010      	movs	r0, #16
 800b288:	f7ff fff0 	bl	800b26c <malloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6260      	str	r0, [r4, #36]	; 0x24
 800b290:	b920      	cbnz	r0, 800b29c <_Balloc+0x20>
 800b292:	4b18      	ldr	r3, [pc, #96]	; (800b2f4 <_Balloc+0x78>)
 800b294:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <_Balloc+0x7c>)
 800b296:	2166      	movs	r1, #102	; 0x66
 800b298:	f000 fc7a 	bl	800bb90 <__assert_func>
 800b29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a0:	6006      	str	r6, [r0, #0]
 800b2a2:	60c6      	str	r6, [r0, #12]
 800b2a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2a6:	68f3      	ldr	r3, [r6, #12]
 800b2a8:	b183      	cbz	r3, 800b2cc <_Balloc+0x50>
 800b2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <_Balloc+0x68>
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ba:	1d72      	adds	r2, r6, #5
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 fb60 	bl	800b984 <_calloc_r>
 800b2c4:	b160      	cbz	r0, 800b2e0 <_Balloc+0x64>
 800b2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ca:	e00e      	b.n	800b2ea <_Balloc+0x6e>
 800b2cc:	2221      	movs	r2, #33	; 0x21
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb57 	bl	800b984 <_calloc_r>
 800b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d8:	60f0      	str	r0, [r6, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <_Balloc+0x2e>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	6802      	ldr	r2, [r0, #0]
 800b2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f0:	e7f7      	b.n	800b2e2 <_Balloc+0x66>
 800b2f2:	bf00      	nop
 800b2f4:	0800c795 	.word	0x0800c795
 800b2f8:	0800c818 	.word	0x0800c818

0800b2fc <_Bfree>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Bfree+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ffb0 	bl	800b26c <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6268      	str	r0, [r5, #36]	; 0x24
 800b310:	b920      	cbnz	r0, 800b31c <_Bfree+0x20>
 800b312:	4b09      	ldr	r3, [pc, #36]	; (800b338 <_Bfree+0x3c>)
 800b314:	4809      	ldr	r0, [pc, #36]	; (800b33c <_Bfree+0x40>)
 800b316:	218a      	movs	r1, #138	; 0x8a
 800b318:	f000 fc3a 	bl	800bb90 <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	b13c      	cbz	r4, 800b336 <_Bfree+0x3a>
 800b326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b330:	6021      	str	r1, [r4, #0]
 800b332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	0800c795 	.word	0x0800c795
 800b33c:	0800c818 	.word	0x0800c818

0800b340 <__multadd>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	690d      	ldr	r5, [r1, #16]
 800b346:	4607      	mov	r7, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	461e      	mov	r6, r3
 800b34c:	f101 0c14 	add.w	ip, r1, #20
 800b350:	2000      	movs	r0, #0
 800b352:	f8dc 3000 	ldr.w	r3, [ip]
 800b356:	b299      	uxth	r1, r3
 800b358:	fb02 6101 	mla	r1, r2, r1, r6
 800b35c:	0c1e      	lsrs	r6, r3, #16
 800b35e:	0c0b      	lsrs	r3, r1, #16
 800b360:	fb02 3306 	mla	r3, r2, r6, r3
 800b364:	b289      	uxth	r1, r1
 800b366:	3001      	adds	r0, #1
 800b368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b36c:	4285      	cmp	r5, r0
 800b36e:	f84c 1b04 	str.w	r1, [ip], #4
 800b372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b376:	dcec      	bgt.n	800b352 <__multadd+0x12>
 800b378:	b30e      	cbz	r6, 800b3be <__multadd+0x7e>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dc19      	bgt.n	800b3b4 <__multadd+0x74>
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	4638      	mov	r0, r7
 800b384:	3101      	adds	r1, #1
 800b386:	f7ff ff79 	bl	800b27c <_Balloc>
 800b38a:	4680      	mov	r8, r0
 800b38c:	b928      	cbnz	r0, 800b39a <__multadd+0x5a>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <__multadd+0x84>)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <__multadd+0x88>)
 800b394:	21b5      	movs	r1, #181	; 0xb5
 800b396:	f000 fbfb 	bl	800bb90 <__assert_func>
 800b39a:	6922      	ldr	r2, [r4, #16]
 800b39c:	3202      	adds	r2, #2
 800b39e:	f104 010c 	add.w	r1, r4, #12
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f7fe fc63 	bl	8009c70 <memcpy>
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff ffa5 	bl	800b2fc <_Bfree>
 800b3b2:	4644      	mov	r4, r8
 800b3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	615e      	str	r6, [r3, #20]
 800b3bc:	6125      	str	r5, [r4, #16]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	0800c807 	.word	0x0800c807
 800b3c8:	0800c818 	.word	0x0800c818

0800b3cc <__hi0bits>:
 800b3cc:	0c03      	lsrs	r3, r0, #16
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	b9d3      	cbnz	r3, 800b408 <__hi0bits+0x3c>
 800b3d2:	0400      	lsls	r0, r0, #16
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3da:	bf04      	itt	eq
 800b3dc:	0200      	lsleq	r0, r0, #8
 800b3de:	3308      	addeq	r3, #8
 800b3e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3e4:	bf04      	itt	eq
 800b3e6:	0100      	lsleq	r0, r0, #4
 800b3e8:	3304      	addeq	r3, #4
 800b3ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	0080      	lsleq	r0, r0, #2
 800b3f2:	3302      	addeq	r3, #2
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	db05      	blt.n	800b404 <__hi0bits+0x38>
 800b3f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3fc:	f103 0301 	add.w	r3, r3, #1
 800b400:	bf08      	it	eq
 800b402:	2320      	moveq	r3, #32
 800b404:	4618      	mov	r0, r3
 800b406:	4770      	bx	lr
 800b408:	2300      	movs	r3, #0
 800b40a:	e7e4      	b.n	800b3d6 <__hi0bits+0xa>

0800b40c <__lo0bits>:
 800b40c:	6803      	ldr	r3, [r0, #0]
 800b40e:	f013 0207 	ands.w	r2, r3, #7
 800b412:	4601      	mov	r1, r0
 800b414:	d00b      	beq.n	800b42e <__lo0bits+0x22>
 800b416:	07da      	lsls	r2, r3, #31
 800b418:	d423      	bmi.n	800b462 <__lo0bits+0x56>
 800b41a:	0798      	lsls	r0, r3, #30
 800b41c:	bf49      	itett	mi
 800b41e:	085b      	lsrmi	r3, r3, #1
 800b420:	089b      	lsrpl	r3, r3, #2
 800b422:	2001      	movmi	r0, #1
 800b424:	600b      	strmi	r3, [r1, #0]
 800b426:	bf5c      	itt	pl
 800b428:	600b      	strpl	r3, [r1, #0]
 800b42a:	2002      	movpl	r0, #2
 800b42c:	4770      	bx	lr
 800b42e:	b298      	uxth	r0, r3
 800b430:	b9a8      	cbnz	r0, 800b45e <__lo0bits+0x52>
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	2010      	movs	r0, #16
 800b436:	b2da      	uxtb	r2, r3
 800b438:	b90a      	cbnz	r2, 800b43e <__lo0bits+0x32>
 800b43a:	3008      	adds	r0, #8
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	071a      	lsls	r2, r3, #28
 800b440:	bf04      	itt	eq
 800b442:	091b      	lsreq	r3, r3, #4
 800b444:	3004      	addeq	r0, #4
 800b446:	079a      	lsls	r2, r3, #30
 800b448:	bf04      	itt	eq
 800b44a:	089b      	lsreq	r3, r3, #2
 800b44c:	3002      	addeq	r0, #2
 800b44e:	07da      	lsls	r2, r3, #31
 800b450:	d403      	bmi.n	800b45a <__lo0bits+0x4e>
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	f100 0001 	add.w	r0, r0, #1
 800b458:	d005      	beq.n	800b466 <__lo0bits+0x5a>
 800b45a:	600b      	str	r3, [r1, #0]
 800b45c:	4770      	bx	lr
 800b45e:	4610      	mov	r0, r2
 800b460:	e7e9      	b.n	800b436 <__lo0bits+0x2a>
 800b462:	2000      	movs	r0, #0
 800b464:	4770      	bx	lr
 800b466:	2020      	movs	r0, #32
 800b468:	4770      	bx	lr
	...

0800b46c <__i2b>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	2101      	movs	r1, #1
 800b472:	f7ff ff03 	bl	800b27c <_Balloc>
 800b476:	4602      	mov	r2, r0
 800b478:	b928      	cbnz	r0, 800b486 <__i2b+0x1a>
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <__i2b+0x24>)
 800b47c:	4805      	ldr	r0, [pc, #20]	; (800b494 <__i2b+0x28>)
 800b47e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b482:	f000 fb85 	bl	800bb90 <__assert_func>
 800b486:	2301      	movs	r3, #1
 800b488:	6144      	str	r4, [r0, #20]
 800b48a:	6103      	str	r3, [r0, #16]
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	bf00      	nop
 800b490:	0800c807 	.word	0x0800c807
 800b494:	0800c818 	.word	0x0800c818

0800b498 <__multiply>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4691      	mov	r9, r2
 800b49e:	690a      	ldr	r2, [r1, #16]
 800b4a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	bfb8      	it	lt
 800b4a8:	460b      	movlt	r3, r1
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	bfbc      	itt	lt
 800b4ae:	464c      	movlt	r4, r9
 800b4b0:	4699      	movlt	r9, r3
 800b4b2:	6927      	ldr	r7, [r4, #16]
 800b4b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4b8:	68a3      	ldr	r3, [r4, #8]
 800b4ba:	6861      	ldr	r1, [r4, #4]
 800b4bc:	eb07 060a 	add.w	r6, r7, sl
 800b4c0:	42b3      	cmp	r3, r6
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	bfb8      	it	lt
 800b4c6:	3101      	addlt	r1, #1
 800b4c8:	f7ff fed8 	bl	800b27c <_Balloc>
 800b4cc:	b930      	cbnz	r0, 800b4dc <__multiply+0x44>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	4b44      	ldr	r3, [pc, #272]	; (800b5e4 <__multiply+0x14c>)
 800b4d2:	4845      	ldr	r0, [pc, #276]	; (800b5e8 <__multiply+0x150>)
 800b4d4:	f240 115d 	movw	r1, #349	; 0x15d
 800b4d8:	f000 fb5a 	bl	800bb90 <__assert_func>
 800b4dc:	f100 0514 	add.w	r5, r0, #20
 800b4e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4543      	cmp	r3, r8
 800b4ea:	d321      	bcc.n	800b530 <__multiply+0x98>
 800b4ec:	f104 0314 	add.w	r3, r4, #20
 800b4f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4f4:	f109 0314 	add.w	r3, r9, #20
 800b4f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4fc:	9202      	str	r2, [sp, #8]
 800b4fe:	1b3a      	subs	r2, r7, r4
 800b500:	3a15      	subs	r2, #21
 800b502:	f022 0203 	bic.w	r2, r2, #3
 800b506:	3204      	adds	r2, #4
 800b508:	f104 0115 	add.w	r1, r4, #21
 800b50c:	428f      	cmp	r7, r1
 800b50e:	bf38      	it	cc
 800b510:	2204      	movcc	r2, #4
 800b512:	9201      	str	r2, [sp, #4]
 800b514:	9a02      	ldr	r2, [sp, #8]
 800b516:	9303      	str	r3, [sp, #12]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d80c      	bhi.n	800b536 <__multiply+0x9e>
 800b51c:	2e00      	cmp	r6, #0
 800b51e:	dd03      	ble.n	800b528 <__multiply+0x90>
 800b520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b524:	2b00      	cmp	r3, #0
 800b526:	d05a      	beq.n	800b5de <__multiply+0x146>
 800b528:	6106      	str	r6, [r0, #16]
 800b52a:	b005      	add	sp, #20
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b530:	f843 2b04 	str.w	r2, [r3], #4
 800b534:	e7d8      	b.n	800b4e8 <__multiply+0x50>
 800b536:	f8b3 a000 	ldrh.w	sl, [r3]
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	d024      	beq.n	800b58a <__multiply+0xf2>
 800b540:	f104 0e14 	add.w	lr, r4, #20
 800b544:	46a9      	mov	r9, r5
 800b546:	f04f 0c00 	mov.w	ip, #0
 800b54a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b54e:	f8d9 1000 	ldr.w	r1, [r9]
 800b552:	fa1f fb82 	uxth.w	fp, r2
 800b556:	b289      	uxth	r1, r1
 800b558:	fb0a 110b 	mla	r1, sl, fp, r1
 800b55c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b560:	f8d9 2000 	ldr.w	r2, [r9]
 800b564:	4461      	add	r1, ip
 800b566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b56a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b56e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b572:	b289      	uxth	r1, r1
 800b574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b578:	4577      	cmp	r7, lr
 800b57a:	f849 1b04 	str.w	r1, [r9], #4
 800b57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b582:	d8e2      	bhi.n	800b54a <__multiply+0xb2>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	f845 c002 	str.w	ip, [r5, r2]
 800b58a:	9a03      	ldr	r2, [sp, #12]
 800b58c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b590:	3304      	adds	r3, #4
 800b592:	f1b9 0f00 	cmp.w	r9, #0
 800b596:	d020      	beq.n	800b5da <__multiply+0x142>
 800b598:	6829      	ldr	r1, [r5, #0]
 800b59a:	f104 0c14 	add.w	ip, r4, #20
 800b59e:	46ae      	mov	lr, r5
 800b5a0:	f04f 0a00 	mov.w	sl, #0
 800b5a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b5a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5ac:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b0:	4492      	add	sl, r2
 800b5b2:	b289      	uxth	r1, r1
 800b5b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5b8:	f84e 1b04 	str.w	r1, [lr], #4
 800b5bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b5c4:	0c12      	lsrs	r2, r2, #16
 800b5c6:	fb09 1102 	mla	r1, r9, r2, r1
 800b5ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5ce:	4567      	cmp	r7, ip
 800b5d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5d4:	d8e6      	bhi.n	800b5a4 <__multiply+0x10c>
 800b5d6:	9a01      	ldr	r2, [sp, #4]
 800b5d8:	50a9      	str	r1, [r5, r2]
 800b5da:	3504      	adds	r5, #4
 800b5dc:	e79a      	b.n	800b514 <__multiply+0x7c>
 800b5de:	3e01      	subs	r6, #1
 800b5e0:	e79c      	b.n	800b51c <__multiply+0x84>
 800b5e2:	bf00      	nop
 800b5e4:	0800c807 	.word	0x0800c807
 800b5e8:	0800c818 	.word	0x0800c818

0800b5ec <__pow5mult>:
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	f012 0203 	ands.w	r2, r2, #3
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	d007      	beq.n	800b60c <__pow5mult+0x20>
 800b5fc:	4c25      	ldr	r4, [pc, #148]	; (800b694 <__pow5mult+0xa8>)
 800b5fe:	3a01      	subs	r2, #1
 800b600:	2300      	movs	r3, #0
 800b602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b606:	f7ff fe9b 	bl	800b340 <__multadd>
 800b60a:	4607      	mov	r7, r0
 800b60c:	10ad      	asrs	r5, r5, #2
 800b60e:	d03d      	beq.n	800b68c <__pow5mult+0xa0>
 800b610:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b612:	b97c      	cbnz	r4, 800b634 <__pow5mult+0x48>
 800b614:	2010      	movs	r0, #16
 800b616:	f7ff fe29 	bl	800b26c <malloc>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6270      	str	r0, [r6, #36]	; 0x24
 800b61e:	b928      	cbnz	r0, 800b62c <__pow5mult+0x40>
 800b620:	4b1d      	ldr	r3, [pc, #116]	; (800b698 <__pow5mult+0xac>)
 800b622:	481e      	ldr	r0, [pc, #120]	; (800b69c <__pow5mult+0xb0>)
 800b624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b628:	f000 fab2 	bl	800bb90 <__assert_func>
 800b62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b630:	6004      	str	r4, [r0, #0]
 800b632:	60c4      	str	r4, [r0, #12]
 800b634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b63c:	b94c      	cbnz	r4, 800b652 <__pow5mult+0x66>
 800b63e:	f240 2171 	movw	r1, #625	; 0x271
 800b642:	4630      	mov	r0, r6
 800b644:	f7ff ff12 	bl	800b46c <__i2b>
 800b648:	2300      	movs	r3, #0
 800b64a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b64e:	4604      	mov	r4, r0
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	07eb      	lsls	r3, r5, #31
 800b658:	d50a      	bpl.n	800b670 <__pow5mult+0x84>
 800b65a:	4639      	mov	r1, r7
 800b65c:	4622      	mov	r2, r4
 800b65e:	4630      	mov	r0, r6
 800b660:	f7ff ff1a 	bl	800b498 <__multiply>
 800b664:	4639      	mov	r1, r7
 800b666:	4680      	mov	r8, r0
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff fe47 	bl	800b2fc <_Bfree>
 800b66e:	4647      	mov	r7, r8
 800b670:	106d      	asrs	r5, r5, #1
 800b672:	d00b      	beq.n	800b68c <__pow5mult+0xa0>
 800b674:	6820      	ldr	r0, [r4, #0]
 800b676:	b938      	cbnz	r0, 800b688 <__pow5mult+0x9c>
 800b678:	4622      	mov	r2, r4
 800b67a:	4621      	mov	r1, r4
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7ff ff0b 	bl	800b498 <__multiply>
 800b682:	6020      	str	r0, [r4, #0]
 800b684:	f8c0 9000 	str.w	r9, [r0]
 800b688:	4604      	mov	r4, r0
 800b68a:	e7e4      	b.n	800b656 <__pow5mult+0x6a>
 800b68c:	4638      	mov	r0, r7
 800b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b692:	bf00      	nop
 800b694:	0800c968 	.word	0x0800c968
 800b698:	0800c795 	.word	0x0800c795
 800b69c:	0800c818 	.word	0x0800c818

0800b6a0 <__lshift>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	6849      	ldr	r1, [r1, #4]
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4691      	mov	r9, r2
 800b6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b8:	f108 0601 	add.w	r6, r8, #1
 800b6bc:	42b3      	cmp	r3, r6
 800b6be:	db0b      	blt.n	800b6d8 <__lshift+0x38>
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff fddb 	bl	800b27c <_Balloc>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	b948      	cbnz	r0, 800b6de <__lshift+0x3e>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	4b2a      	ldr	r3, [pc, #168]	; (800b778 <__lshift+0xd8>)
 800b6ce:	482b      	ldr	r0, [pc, #172]	; (800b77c <__lshift+0xdc>)
 800b6d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6d4:	f000 fa5c 	bl	800bb90 <__assert_func>
 800b6d8:	3101      	adds	r1, #1
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	e7ee      	b.n	800b6bc <__lshift+0x1c>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f100 0114 	add.w	r1, r0, #20
 800b6e4:	f100 0210 	add.w	r2, r0, #16
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	4553      	cmp	r3, sl
 800b6ec:	db37      	blt.n	800b75e <__lshift+0xbe>
 800b6ee:	6920      	ldr	r0, [r4, #16]
 800b6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f4:	f104 0314 	add.w	r3, r4, #20
 800b6f8:	f019 091f 	ands.w	r9, r9, #31
 800b6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b700:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b704:	d02f      	beq.n	800b766 <__lshift+0xc6>
 800b706:	f1c9 0e20 	rsb	lr, r9, #32
 800b70a:	468a      	mov	sl, r1
 800b70c:	f04f 0c00 	mov.w	ip, #0
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	fa02 f209 	lsl.w	r2, r2, r9
 800b716:	ea42 020c 	orr.w	r2, r2, ip
 800b71a:	f84a 2b04 	str.w	r2, [sl], #4
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	4298      	cmp	r0, r3
 800b724:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b728:	d8f2      	bhi.n	800b710 <__lshift+0x70>
 800b72a:	1b03      	subs	r3, r0, r4
 800b72c:	3b15      	subs	r3, #21
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	3304      	adds	r3, #4
 800b734:	f104 0215 	add.w	r2, r4, #21
 800b738:	4290      	cmp	r0, r2
 800b73a:	bf38      	it	cc
 800b73c:	2304      	movcc	r3, #4
 800b73e:	f841 c003 	str.w	ip, [r1, r3]
 800b742:	f1bc 0f00 	cmp.w	ip, #0
 800b746:	d001      	beq.n	800b74c <__lshift+0xac>
 800b748:	f108 0602 	add.w	r6, r8, #2
 800b74c:	3e01      	subs	r6, #1
 800b74e:	4638      	mov	r0, r7
 800b750:	612e      	str	r6, [r5, #16]
 800b752:	4621      	mov	r1, r4
 800b754:	f7ff fdd2 	bl	800b2fc <_Bfree>
 800b758:	4628      	mov	r0, r5
 800b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b762:	3301      	adds	r3, #1
 800b764:	e7c1      	b.n	800b6ea <__lshift+0x4a>
 800b766:	3904      	subs	r1, #4
 800b768:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b770:	4298      	cmp	r0, r3
 800b772:	d8f9      	bhi.n	800b768 <__lshift+0xc8>
 800b774:	e7ea      	b.n	800b74c <__lshift+0xac>
 800b776:	bf00      	nop
 800b778:	0800c807 	.word	0x0800c807
 800b77c:	0800c818 	.word	0x0800c818

0800b780 <__mcmp>:
 800b780:	b530      	push	{r4, r5, lr}
 800b782:	6902      	ldr	r2, [r0, #16]
 800b784:	690c      	ldr	r4, [r1, #16]
 800b786:	1b12      	subs	r2, r2, r4
 800b788:	d10e      	bne.n	800b7a8 <__mcmp+0x28>
 800b78a:	f100 0314 	add.w	r3, r0, #20
 800b78e:	3114      	adds	r1, #20
 800b790:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b794:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b798:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b79c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7a0:	42a5      	cmp	r5, r4
 800b7a2:	d003      	beq.n	800b7ac <__mcmp+0x2c>
 800b7a4:	d305      	bcc.n	800b7b2 <__mcmp+0x32>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	bd30      	pop	{r4, r5, pc}
 800b7ac:	4283      	cmp	r3, r0
 800b7ae:	d3f3      	bcc.n	800b798 <__mcmp+0x18>
 800b7b0:	e7fa      	b.n	800b7a8 <__mcmp+0x28>
 800b7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b6:	e7f7      	b.n	800b7a8 <__mcmp+0x28>

0800b7b8 <__mdiff>:
 800b7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	4606      	mov	r6, r0
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4690      	mov	r8, r2
 800b7c6:	f7ff ffdb 	bl	800b780 <__mcmp>
 800b7ca:	1e05      	subs	r5, r0, #0
 800b7cc:	d110      	bne.n	800b7f0 <__mdiff+0x38>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff fd53 	bl	800b27c <_Balloc>
 800b7d6:	b930      	cbnz	r0, 800b7e6 <__mdiff+0x2e>
 800b7d8:	4b3a      	ldr	r3, [pc, #232]	; (800b8c4 <__mdiff+0x10c>)
 800b7da:	4602      	mov	r2, r0
 800b7dc:	f240 2132 	movw	r1, #562	; 0x232
 800b7e0:	4839      	ldr	r0, [pc, #228]	; (800b8c8 <__mdiff+0x110>)
 800b7e2:	f000 f9d5 	bl	800bb90 <__assert_func>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	bfa4      	itt	ge
 800b7f2:	4643      	movge	r3, r8
 800b7f4:	46a0      	movge	r8, r4
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7fc:	bfa6      	itte	ge
 800b7fe:	461c      	movge	r4, r3
 800b800:	2500      	movge	r5, #0
 800b802:	2501      	movlt	r5, #1
 800b804:	f7ff fd3a 	bl	800b27c <_Balloc>
 800b808:	b920      	cbnz	r0, 800b814 <__mdiff+0x5c>
 800b80a:	4b2e      	ldr	r3, [pc, #184]	; (800b8c4 <__mdiff+0x10c>)
 800b80c:	4602      	mov	r2, r0
 800b80e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b812:	e7e5      	b.n	800b7e0 <__mdiff+0x28>
 800b814:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b818:	6926      	ldr	r6, [r4, #16]
 800b81a:	60c5      	str	r5, [r0, #12]
 800b81c:	f104 0914 	add.w	r9, r4, #20
 800b820:	f108 0514 	add.w	r5, r8, #20
 800b824:	f100 0e14 	add.w	lr, r0, #20
 800b828:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b82c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b830:	f108 0210 	add.w	r2, r8, #16
 800b834:	46f2      	mov	sl, lr
 800b836:	2100      	movs	r1, #0
 800b838:	f859 3b04 	ldr.w	r3, [r9], #4
 800b83c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b840:	fa1f f883 	uxth.w	r8, r3
 800b844:	fa11 f18b 	uxtah	r1, r1, fp
 800b848:	0c1b      	lsrs	r3, r3, #16
 800b84a:	eba1 0808 	sub.w	r8, r1, r8
 800b84e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b852:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b856:	fa1f f888 	uxth.w	r8, r8
 800b85a:	1419      	asrs	r1, r3, #16
 800b85c:	454e      	cmp	r6, r9
 800b85e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b862:	f84a 3b04 	str.w	r3, [sl], #4
 800b866:	d8e7      	bhi.n	800b838 <__mdiff+0x80>
 800b868:	1b33      	subs	r3, r6, r4
 800b86a:	3b15      	subs	r3, #21
 800b86c:	f023 0303 	bic.w	r3, r3, #3
 800b870:	3304      	adds	r3, #4
 800b872:	3415      	adds	r4, #21
 800b874:	42a6      	cmp	r6, r4
 800b876:	bf38      	it	cc
 800b878:	2304      	movcc	r3, #4
 800b87a:	441d      	add	r5, r3
 800b87c:	4473      	add	r3, lr
 800b87e:	469e      	mov	lr, r3
 800b880:	462e      	mov	r6, r5
 800b882:	4566      	cmp	r6, ip
 800b884:	d30e      	bcc.n	800b8a4 <__mdiff+0xec>
 800b886:	f10c 0203 	add.w	r2, ip, #3
 800b88a:	1b52      	subs	r2, r2, r5
 800b88c:	f022 0203 	bic.w	r2, r2, #3
 800b890:	3d03      	subs	r5, #3
 800b892:	45ac      	cmp	ip, r5
 800b894:	bf38      	it	cc
 800b896:	2200      	movcc	r2, #0
 800b898:	441a      	add	r2, r3
 800b89a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b89e:	b17b      	cbz	r3, 800b8c0 <__mdiff+0x108>
 800b8a0:	6107      	str	r7, [r0, #16]
 800b8a2:	e7a3      	b.n	800b7ec <__mdiff+0x34>
 800b8a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8a8:	fa11 f288 	uxtah	r2, r1, r8
 800b8ac:	1414      	asrs	r4, r2, #16
 800b8ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8b2:	b292      	uxth	r2, r2
 800b8b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8b8:	f84e 2b04 	str.w	r2, [lr], #4
 800b8bc:	1421      	asrs	r1, r4, #16
 800b8be:	e7e0      	b.n	800b882 <__mdiff+0xca>
 800b8c0:	3f01      	subs	r7, #1
 800b8c2:	e7ea      	b.n	800b89a <__mdiff+0xe2>
 800b8c4:	0800c807 	.word	0x0800c807
 800b8c8:	0800c818 	.word	0x0800c818

0800b8cc <__d2b>:
 800b8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	ec57 6b10 	vmov	r6, r7, d0
 800b8d8:	4690      	mov	r8, r2
 800b8da:	f7ff fccf 	bl	800b27c <_Balloc>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	b930      	cbnz	r0, 800b8f0 <__d2b+0x24>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4b25      	ldr	r3, [pc, #148]	; (800b97c <__d2b+0xb0>)
 800b8e6:	4826      	ldr	r0, [pc, #152]	; (800b980 <__d2b+0xb4>)
 800b8e8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8ec:	f000 f950 	bl	800bb90 <__assert_func>
 800b8f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8f8:	bb35      	cbnz	r5, 800b948 <__d2b+0x7c>
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	d028      	beq.n	800b952 <__d2b+0x86>
 800b900:	4668      	mov	r0, sp
 800b902:	9600      	str	r6, [sp, #0]
 800b904:	f7ff fd82 	bl	800b40c <__lo0bits>
 800b908:	9900      	ldr	r1, [sp, #0]
 800b90a:	b300      	cbz	r0, 800b94e <__d2b+0x82>
 800b90c:	9a01      	ldr	r2, [sp, #4]
 800b90e:	f1c0 0320 	rsb	r3, r0, #32
 800b912:	fa02 f303 	lsl.w	r3, r2, r3
 800b916:	430b      	orrs	r3, r1
 800b918:	40c2      	lsrs	r2, r0
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	9201      	str	r2, [sp, #4]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	61a3      	str	r3, [r4, #24]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bf14      	ite	ne
 800b926:	2202      	movne	r2, #2
 800b928:	2201      	moveq	r2, #1
 800b92a:	6122      	str	r2, [r4, #16]
 800b92c:	b1d5      	cbz	r5, 800b964 <__d2b+0x98>
 800b92e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b932:	4405      	add	r5, r0
 800b934:	f8c9 5000 	str.w	r5, [r9]
 800b938:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b93c:	f8c8 0000 	str.w	r0, [r8]
 800b940:	4620      	mov	r0, r4
 800b942:	b003      	add	sp, #12
 800b944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b94c:	e7d5      	b.n	800b8fa <__d2b+0x2e>
 800b94e:	6161      	str	r1, [r4, #20]
 800b950:	e7e5      	b.n	800b91e <__d2b+0x52>
 800b952:	a801      	add	r0, sp, #4
 800b954:	f7ff fd5a 	bl	800b40c <__lo0bits>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	6163      	str	r3, [r4, #20]
 800b95c:	2201      	movs	r2, #1
 800b95e:	6122      	str	r2, [r4, #16]
 800b960:	3020      	adds	r0, #32
 800b962:	e7e3      	b.n	800b92c <__d2b+0x60>
 800b964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b96c:	f8c9 0000 	str.w	r0, [r9]
 800b970:	6918      	ldr	r0, [r3, #16]
 800b972:	f7ff fd2b 	bl	800b3cc <__hi0bits>
 800b976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97a:	e7df      	b.n	800b93c <__d2b+0x70>
 800b97c:	0800c807 	.word	0x0800c807
 800b980:	0800c818 	.word	0x0800c818

0800b984 <_calloc_r>:
 800b984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b986:	fba1 2402 	umull	r2, r4, r1, r2
 800b98a:	b94c      	cbnz	r4, 800b9a0 <_calloc_r+0x1c>
 800b98c:	4611      	mov	r1, r2
 800b98e:	9201      	str	r2, [sp, #4]
 800b990:	f000 f87a 	bl	800ba88 <_malloc_r>
 800b994:	9a01      	ldr	r2, [sp, #4]
 800b996:	4605      	mov	r5, r0
 800b998:	b930      	cbnz	r0, 800b9a8 <_calloc_r+0x24>
 800b99a:	4628      	mov	r0, r5
 800b99c:	b003      	add	sp, #12
 800b99e:	bd30      	pop	{r4, r5, pc}
 800b9a0:	220c      	movs	r2, #12
 800b9a2:	6002      	str	r2, [r0, #0]
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	e7f8      	b.n	800b99a <_calloc_r+0x16>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	f7fe f96f 	bl	8009c8c <memset>
 800b9ae:	e7f4      	b.n	800b99a <_calloc_r+0x16>

0800b9b0 <_free_r>:
 800b9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	d044      	beq.n	800ba40 <_free_r+0x90>
 800b9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ba:	9001      	str	r0, [sp, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f1a1 0404 	sub.w	r4, r1, #4
 800b9c2:	bfb8      	it	lt
 800b9c4:	18e4      	addlt	r4, r4, r3
 800b9c6:	f000 f925 	bl	800bc14 <__malloc_lock>
 800b9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ba44 <_free_r+0x94>)
 800b9cc:	9801      	ldr	r0, [sp, #4]
 800b9ce:	6813      	ldr	r3, [r2, #0]
 800b9d0:	b933      	cbnz	r3, 800b9e0 <_free_r+0x30>
 800b9d2:	6063      	str	r3, [r4, #4]
 800b9d4:	6014      	str	r4, [r2, #0]
 800b9d6:	b003      	add	sp, #12
 800b9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9dc:	f000 b920 	b.w	800bc20 <__malloc_unlock>
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d908      	bls.n	800b9f6 <_free_r+0x46>
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf01      	itttt	eq
 800b9ec:	6819      	ldreq	r1, [r3, #0]
 800b9ee:	685b      	ldreq	r3, [r3, #4]
 800b9f0:	1949      	addeq	r1, r1, r5
 800b9f2:	6021      	streq	r1, [r4, #0]
 800b9f4:	e7ed      	b.n	800b9d2 <_free_r+0x22>
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	b10b      	cbz	r3, 800ba00 <_free_r+0x50>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	d9fa      	bls.n	800b9f6 <_free_r+0x46>
 800ba00:	6811      	ldr	r1, [r2, #0]
 800ba02:	1855      	adds	r5, r2, r1
 800ba04:	42a5      	cmp	r5, r4
 800ba06:	d10b      	bne.n	800ba20 <_free_r+0x70>
 800ba08:	6824      	ldr	r4, [r4, #0]
 800ba0a:	4421      	add	r1, r4
 800ba0c:	1854      	adds	r4, r2, r1
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6011      	str	r1, [r2, #0]
 800ba12:	d1e0      	bne.n	800b9d6 <_free_r+0x26>
 800ba14:	681c      	ldr	r4, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	6053      	str	r3, [r2, #4]
 800ba1a:	4421      	add	r1, r4
 800ba1c:	6011      	str	r1, [r2, #0]
 800ba1e:	e7da      	b.n	800b9d6 <_free_r+0x26>
 800ba20:	d902      	bls.n	800ba28 <_free_r+0x78>
 800ba22:	230c      	movs	r3, #12
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	e7d6      	b.n	800b9d6 <_free_r+0x26>
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf04      	itt	eq
 800ba30:	6819      	ldreq	r1, [r3, #0]
 800ba32:	685b      	ldreq	r3, [r3, #4]
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	bf04      	itt	eq
 800ba38:	1949      	addeq	r1, r1, r5
 800ba3a:	6021      	streq	r1, [r4, #0]
 800ba3c:	6054      	str	r4, [r2, #4]
 800ba3e:	e7ca      	b.n	800b9d6 <_free_r+0x26>
 800ba40:	b003      	add	sp, #12
 800ba42:	bd30      	pop	{r4, r5, pc}
 800ba44:	20005774 	.word	0x20005774

0800ba48 <sbrk_aligned>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4e0e      	ldr	r6, [pc, #56]	; (800ba84 <sbrk_aligned+0x3c>)
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	6831      	ldr	r1, [r6, #0]
 800ba50:	4605      	mov	r5, r0
 800ba52:	b911      	cbnz	r1, 800ba5a <sbrk_aligned+0x12>
 800ba54:	f000 f88c 	bl	800bb70 <_sbrk_r>
 800ba58:	6030      	str	r0, [r6, #0]
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f887 	bl	800bb70 <_sbrk_r>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d00a      	beq.n	800ba7c <sbrk_aligned+0x34>
 800ba66:	1cc4      	adds	r4, r0, #3
 800ba68:	f024 0403 	bic.w	r4, r4, #3
 800ba6c:	42a0      	cmp	r0, r4
 800ba6e:	d007      	beq.n	800ba80 <sbrk_aligned+0x38>
 800ba70:	1a21      	subs	r1, r4, r0
 800ba72:	4628      	mov	r0, r5
 800ba74:	f000 f87c 	bl	800bb70 <_sbrk_r>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d101      	bne.n	800ba80 <sbrk_aligned+0x38>
 800ba7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ba80:	4620      	mov	r0, r4
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	20005778 	.word	0x20005778

0800ba88 <_malloc_r>:
 800ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	1ccd      	adds	r5, r1, #3
 800ba8e:	f025 0503 	bic.w	r5, r5, #3
 800ba92:	3508      	adds	r5, #8
 800ba94:	2d0c      	cmp	r5, #12
 800ba96:	bf38      	it	cc
 800ba98:	250c      	movcc	r5, #12
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	db01      	blt.n	800baa4 <_malloc_r+0x1c>
 800baa0:	42a9      	cmp	r1, r5
 800baa2:	d905      	bls.n	800bab0 <_malloc_r+0x28>
 800baa4:	230c      	movs	r3, #12
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	2600      	movs	r6, #0
 800baaa:	4630      	mov	r0, r6
 800baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab0:	4e2e      	ldr	r6, [pc, #184]	; (800bb6c <_malloc_r+0xe4>)
 800bab2:	f000 f8af 	bl	800bc14 <__malloc_lock>
 800bab6:	6833      	ldr	r3, [r6, #0]
 800bab8:	461c      	mov	r4, r3
 800baba:	bb34      	cbnz	r4, 800bb0a <_malloc_r+0x82>
 800babc:	4629      	mov	r1, r5
 800babe:	4638      	mov	r0, r7
 800bac0:	f7ff ffc2 	bl	800ba48 <sbrk_aligned>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	4604      	mov	r4, r0
 800bac8:	d14d      	bne.n	800bb66 <_malloc_r+0xde>
 800baca:	6834      	ldr	r4, [r6, #0]
 800bacc:	4626      	mov	r6, r4
 800bace:	2e00      	cmp	r6, #0
 800bad0:	d140      	bne.n	800bb54 <_malloc_r+0xcc>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4631      	mov	r1, r6
 800bad6:	4638      	mov	r0, r7
 800bad8:	eb04 0803 	add.w	r8, r4, r3
 800badc:	f000 f848 	bl	800bb70 <_sbrk_r>
 800bae0:	4580      	cmp	r8, r0
 800bae2:	d13a      	bne.n	800bb5a <_malloc_r+0xd2>
 800bae4:	6821      	ldr	r1, [r4, #0]
 800bae6:	3503      	adds	r5, #3
 800bae8:	1a6d      	subs	r5, r5, r1
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	4629      	mov	r1, r5
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7ff ffa5 	bl	800ba48 <sbrk_aligned>
 800bafe:	3001      	adds	r0, #1
 800bb00:	d02b      	beq.n	800bb5a <_malloc_r+0xd2>
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	442b      	add	r3, r5
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	e00e      	b.n	800bb28 <_malloc_r+0xa0>
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	1b52      	subs	r2, r2, r5
 800bb0e:	d41e      	bmi.n	800bb4e <_malloc_r+0xc6>
 800bb10:	2a0b      	cmp	r2, #11
 800bb12:	d916      	bls.n	800bb42 <_malloc_r+0xba>
 800bb14:	1961      	adds	r1, r4, r5
 800bb16:	42a3      	cmp	r3, r4
 800bb18:	6025      	str	r5, [r4, #0]
 800bb1a:	bf18      	it	ne
 800bb1c:	6059      	strne	r1, [r3, #4]
 800bb1e:	6863      	ldr	r3, [r4, #4]
 800bb20:	bf08      	it	eq
 800bb22:	6031      	streq	r1, [r6, #0]
 800bb24:	5162      	str	r2, [r4, r5]
 800bb26:	604b      	str	r3, [r1, #4]
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f104 060b 	add.w	r6, r4, #11
 800bb2e:	f000 f877 	bl	800bc20 <__malloc_unlock>
 800bb32:	f026 0607 	bic.w	r6, r6, #7
 800bb36:	1d23      	adds	r3, r4, #4
 800bb38:	1af2      	subs	r2, r6, r3
 800bb3a:	d0b6      	beq.n	800baaa <_malloc_r+0x22>
 800bb3c:	1b9b      	subs	r3, r3, r6
 800bb3e:	50a3      	str	r3, [r4, r2]
 800bb40:	e7b3      	b.n	800baaa <_malloc_r+0x22>
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	bf0c      	ite	eq
 800bb48:	6032      	streq	r2, [r6, #0]
 800bb4a:	605a      	strne	r2, [r3, #4]
 800bb4c:	e7ec      	b.n	800bb28 <_malloc_r+0xa0>
 800bb4e:	4623      	mov	r3, r4
 800bb50:	6864      	ldr	r4, [r4, #4]
 800bb52:	e7b2      	b.n	800baba <_malloc_r+0x32>
 800bb54:	4634      	mov	r4, r6
 800bb56:	6876      	ldr	r6, [r6, #4]
 800bb58:	e7b9      	b.n	800bace <_malloc_r+0x46>
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	603b      	str	r3, [r7, #0]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	f000 f85e 	bl	800bc20 <__malloc_unlock>
 800bb64:	e7a1      	b.n	800baaa <_malloc_r+0x22>
 800bb66:	6025      	str	r5, [r4, #0]
 800bb68:	e7de      	b.n	800bb28 <_malloc_r+0xa0>
 800bb6a:	bf00      	nop
 800bb6c:	20005774 	.word	0x20005774

0800bb70 <_sbrk_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d06      	ldr	r5, [pc, #24]	; (800bb8c <_sbrk_r+0x1c>)
 800bb74:	2300      	movs	r3, #0
 800bb76:	4604      	mov	r4, r0
 800bb78:	4608      	mov	r0, r1
 800bb7a:	602b      	str	r3, [r5, #0]
 800bb7c:	f7f7 f97a 	bl	8002e74 <_sbrk>
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	d102      	bne.n	800bb8a <_sbrk_r+0x1a>
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	b103      	cbz	r3, 800bb8a <_sbrk_r+0x1a>
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	bd38      	pop	{r3, r4, r5, pc}
 800bb8c:	2000577c 	.word	0x2000577c

0800bb90 <__assert_func>:
 800bb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb92:	4614      	mov	r4, r2
 800bb94:	461a      	mov	r2, r3
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <__assert_func+0x2c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	68d8      	ldr	r0, [r3, #12]
 800bb9e:	b14c      	cbz	r4, 800bbb4 <__assert_func+0x24>
 800bba0:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <__assert_func+0x30>)
 800bba2:	9100      	str	r1, [sp, #0]
 800bba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba8:	4906      	ldr	r1, [pc, #24]	; (800bbc4 <__assert_func+0x34>)
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f000 f80e 	bl	800bbcc <fiprintf>
 800bbb0:	f000 fa64 	bl	800c07c <abort>
 800bbb4:	4b04      	ldr	r3, [pc, #16]	; (800bbc8 <__assert_func+0x38>)
 800bbb6:	461c      	mov	r4, r3
 800bbb8:	e7f3      	b.n	800bba2 <__assert_func+0x12>
 800bbba:	bf00      	nop
 800bbbc:	200001c0 	.word	0x200001c0
 800bbc0:	0800c974 	.word	0x0800c974
 800bbc4:	0800c981 	.word	0x0800c981
 800bbc8:	0800c9af 	.word	0x0800c9af

0800bbcc <fiprintf>:
 800bbcc:	b40e      	push	{r1, r2, r3}
 800bbce:	b503      	push	{r0, r1, lr}
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	ab03      	add	r3, sp, #12
 800bbd4:	4805      	ldr	r0, [pc, #20]	; (800bbec <fiprintf+0x20>)
 800bbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f000 f84f 	bl	800bc80 <_vfiprintf_r>
 800bbe2:	b002      	add	sp, #8
 800bbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe8:	b003      	add	sp, #12
 800bbea:	4770      	bx	lr
 800bbec:	200001c0 	.word	0x200001c0

0800bbf0 <__ascii_mbtowc>:
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	b901      	cbnz	r1, 800bbf6 <__ascii_mbtowc+0x6>
 800bbf4:	a901      	add	r1, sp, #4
 800bbf6:	b142      	cbz	r2, 800bc0a <__ascii_mbtowc+0x1a>
 800bbf8:	b14b      	cbz	r3, 800bc0e <__ascii_mbtowc+0x1e>
 800bbfa:	7813      	ldrb	r3, [r2, #0]
 800bbfc:	600b      	str	r3, [r1, #0]
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	1e10      	subs	r0, r2, #0
 800bc02:	bf18      	it	ne
 800bc04:	2001      	movne	r0, #1
 800bc06:	b002      	add	sp, #8
 800bc08:	4770      	bx	lr
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	e7fb      	b.n	800bc06 <__ascii_mbtowc+0x16>
 800bc0e:	f06f 0001 	mvn.w	r0, #1
 800bc12:	e7f8      	b.n	800bc06 <__ascii_mbtowc+0x16>

0800bc14 <__malloc_lock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <__malloc_lock+0x8>)
 800bc16:	f000 bbf1 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	20005780 	.word	0x20005780

0800bc20 <__malloc_unlock>:
 800bc20:	4801      	ldr	r0, [pc, #4]	; (800bc28 <__malloc_unlock+0x8>)
 800bc22:	f000 bbec 	b.w	800c3fe <__retarget_lock_release_recursive>
 800bc26:	bf00      	nop
 800bc28:	20005780 	.word	0x20005780

0800bc2c <__sfputc_r>:
 800bc2c:	6893      	ldr	r3, [r2, #8]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	b410      	push	{r4}
 800bc34:	6093      	str	r3, [r2, #8]
 800bc36:	da08      	bge.n	800bc4a <__sfputc_r+0x1e>
 800bc38:	6994      	ldr	r4, [r2, #24]
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	db01      	blt.n	800bc42 <__sfputc_r+0x16>
 800bc3e:	290a      	cmp	r1, #10
 800bc40:	d103      	bne.n	800bc4a <__sfputc_r+0x1e>
 800bc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc46:	f000 b94b 	b.w	800bee0 <__swbuf_r>
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	1c58      	adds	r0, r3, #1
 800bc4e:	6010      	str	r0, [r2, #0]
 800bc50:	7019      	strb	r1, [r3, #0]
 800bc52:	4608      	mov	r0, r1
 800bc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <__sfputs_r>:
 800bc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4614      	mov	r4, r2
 800bc62:	18d5      	adds	r5, r2, r3
 800bc64:	42ac      	cmp	r4, r5
 800bc66:	d101      	bne.n	800bc6c <__sfputs_r+0x12>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e007      	b.n	800bc7c <__sfputs_r+0x22>
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	463a      	mov	r2, r7
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ffda 	bl	800bc2c <__sfputc_r>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d1f3      	bne.n	800bc64 <__sfputs_r+0xa>
 800bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc80 <_vfiprintf_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	460d      	mov	r5, r1
 800bc86:	b09d      	sub	sp, #116	; 0x74
 800bc88:	4614      	mov	r4, r2
 800bc8a:	4698      	mov	r8, r3
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	b118      	cbz	r0, 800bc98 <_vfiprintf_r+0x18>
 800bc90:	6983      	ldr	r3, [r0, #24]
 800bc92:	b90b      	cbnz	r3, 800bc98 <_vfiprintf_r+0x18>
 800bc94:	f000 fb14 	bl	800c2c0 <__sinit>
 800bc98:	4b89      	ldr	r3, [pc, #548]	; (800bec0 <_vfiprintf_r+0x240>)
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	d11b      	bne.n	800bcd6 <_vfiprintf_r+0x56>
 800bc9e:	6875      	ldr	r5, [r6, #4]
 800bca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca2:	07d9      	lsls	r1, r3, #31
 800bca4:	d405      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	059a      	lsls	r2, r3, #22
 800bcaa:	d402      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcae:	f000 fba5 	bl	800c3fc <__retarget_lock_acquire_recursive>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	071b      	lsls	r3, r3, #28
 800bcb6:	d501      	bpl.n	800bcbc <_vfiprintf_r+0x3c>
 800bcb8:	692b      	ldr	r3, [r5, #16]
 800bcba:	b9eb      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x78>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f000 f96e 	bl	800bfa0 <__swsetup_r>
 800bcc4:	b1c0      	cbz	r0, 800bcf8 <_vfiprintf_r+0x78>
 800bcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc8:	07dc      	lsls	r4, r3, #31
 800bcca:	d50e      	bpl.n	800bcea <_vfiprintf_r+0x6a>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	b01d      	add	sp, #116	; 0x74
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	4b7b      	ldr	r3, [pc, #492]	; (800bec4 <_vfiprintf_r+0x244>)
 800bcd8:	429d      	cmp	r5, r3
 800bcda:	d101      	bne.n	800bce0 <_vfiprintf_r+0x60>
 800bcdc:	68b5      	ldr	r5, [r6, #8]
 800bcde:	e7df      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bce0:	4b79      	ldr	r3, [pc, #484]	; (800bec8 <_vfiprintf_r+0x248>)
 800bce2:	429d      	cmp	r5, r3
 800bce4:	bf08      	it	eq
 800bce6:	68f5      	ldreq	r5, [r6, #12]
 800bce8:	e7da      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	0598      	lsls	r0, r3, #22
 800bcee:	d4ed      	bmi.n	800bccc <_vfiprintf_r+0x4c>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf2:	f000 fb84 	bl	800c3fe <__retarget_lock_release_recursive>
 800bcf6:	e7e9      	b.n	800bccc <_vfiprintf_r+0x4c>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd06:	2330      	movs	r3, #48	; 0x30
 800bd08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800becc <_vfiprintf_r+0x24c>
 800bd0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd10:	f04f 0901 	mov.w	r9, #1
 800bd14:	4623      	mov	r3, r4
 800bd16:	469a      	mov	sl, r3
 800bd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1c:	b10a      	cbz	r2, 800bd22 <_vfiprintf_r+0xa2>
 800bd1e:	2a25      	cmp	r2, #37	; 0x25
 800bd20:	d1f9      	bne.n	800bd16 <_vfiprintf_r+0x96>
 800bd22:	ebba 0b04 	subs.w	fp, sl, r4
 800bd26:	d00b      	beq.n	800bd40 <_vfiprintf_r+0xc0>
 800bd28:	465b      	mov	r3, fp
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ff93 	bl	800bc5a <__sfputs_r>
 800bd34:	3001      	adds	r0, #1
 800bd36:	f000 80aa 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3c:	445a      	add	r2, fp
 800bd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd40:	f89a 3000 	ldrb.w	r3, [sl]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 80a2 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd60:	931a      	str	r3, [sp, #104]	; 0x68
 800bd62:	4654      	mov	r4, sl
 800bd64:	2205      	movs	r2, #5
 800bd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6a:	4858      	ldr	r0, [pc, #352]	; (800becc <_vfiprintf_r+0x24c>)
 800bd6c:	f7f4 fa58 	bl	8000220 <memchr>
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	b9d8      	cbnz	r0, 800bdac <_vfiprintf_r+0x12c>
 800bd74:	06d1      	lsls	r1, r2, #27
 800bd76:	bf44      	itt	mi
 800bd78:	2320      	movmi	r3, #32
 800bd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7e:	0713      	lsls	r3, r2, #28
 800bd80:	bf44      	itt	mi
 800bd82:	232b      	movmi	r3, #43	; 0x2b
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd88:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8e:	d015      	beq.n	800bdbc <_vfiprintf_r+0x13c>
 800bd90:	9a07      	ldr	r2, [sp, #28]
 800bd92:	4654      	mov	r4, sl
 800bd94:	2000      	movs	r0, #0
 800bd96:	f04f 0c0a 	mov.w	ip, #10
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda0:	3b30      	subs	r3, #48	; 0x30
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d94e      	bls.n	800be44 <_vfiprintf_r+0x1c4>
 800bda6:	b1b0      	cbz	r0, 800bdd6 <_vfiprintf_r+0x156>
 800bda8:	9207      	str	r2, [sp, #28]
 800bdaa:	e014      	b.n	800bdd6 <_vfiprintf_r+0x156>
 800bdac:	eba0 0308 	sub.w	r3, r0, r8
 800bdb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	46a2      	mov	sl, r4
 800bdba:	e7d2      	b.n	800bd62 <_vfiprintf_r+0xe2>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	1d19      	adds	r1, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bfbb      	ittet	lt
 800bdc8:	425b      	neglt	r3, r3
 800bdca:	f042 0202 	orrlt.w	r2, r2, #2
 800bdce:	9307      	strge	r3, [sp, #28]
 800bdd0:	9307      	strlt	r3, [sp, #28]
 800bdd2:	bfb8      	it	lt
 800bdd4:	9204      	strlt	r2, [sp, #16]
 800bdd6:	7823      	ldrb	r3, [r4, #0]
 800bdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdda:	d10c      	bne.n	800bdf6 <_vfiprintf_r+0x176>
 800bddc:	7863      	ldrb	r3, [r4, #1]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d135      	bne.n	800be4e <_vfiprintf_r+0x1ce>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	1d1a      	adds	r2, r3, #4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	9203      	str	r2, [sp, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bfb8      	it	lt
 800bdee:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdf2:	3402      	adds	r4, #2
 800bdf4:	9305      	str	r3, [sp, #20]
 800bdf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bedc <_vfiprintf_r+0x25c>
 800bdfa:	7821      	ldrb	r1, [r4, #0]
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	4650      	mov	r0, sl
 800be00:	f7f4 fa0e 	bl	8000220 <memchr>
 800be04:	b140      	cbz	r0, 800be18 <_vfiprintf_r+0x198>
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	eba0 000a 	sub.w	r0, r0, sl
 800be0c:	fa03 f000 	lsl.w	r0, r3, r0
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	4303      	orrs	r3, r0
 800be14:	3401      	adds	r4, #1
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	482c      	ldr	r0, [pc, #176]	; (800bed0 <_vfiprintf_r+0x250>)
 800be1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be22:	2206      	movs	r2, #6
 800be24:	f7f4 f9fc 	bl	8000220 <memchr>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d03f      	beq.n	800beac <_vfiprintf_r+0x22c>
 800be2c:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <_vfiprintf_r+0x254>)
 800be2e:	bb1b      	cbnz	r3, 800be78 <_vfiprintf_r+0x1f8>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	3307      	adds	r3, #7
 800be34:	f023 0307 	bic.w	r3, r3, #7
 800be38:	3308      	adds	r3, #8
 800be3a:	9303      	str	r3, [sp, #12]
 800be3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3e:	443b      	add	r3, r7
 800be40:	9309      	str	r3, [sp, #36]	; 0x24
 800be42:	e767      	b.n	800bd14 <_vfiprintf_r+0x94>
 800be44:	fb0c 3202 	mla	r2, ip, r2, r3
 800be48:	460c      	mov	r4, r1
 800be4a:	2001      	movs	r0, #1
 800be4c:	e7a5      	b.n	800bd9a <_vfiprintf_r+0x11a>
 800be4e:	2300      	movs	r3, #0
 800be50:	3401      	adds	r4, #1
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	4619      	mov	r1, r3
 800be56:	f04f 0c0a 	mov.w	ip, #10
 800be5a:	4620      	mov	r0, r4
 800be5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be60:	3a30      	subs	r2, #48	; 0x30
 800be62:	2a09      	cmp	r2, #9
 800be64:	d903      	bls.n	800be6e <_vfiprintf_r+0x1ee>
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0c5      	beq.n	800bdf6 <_vfiprintf_r+0x176>
 800be6a:	9105      	str	r1, [sp, #20]
 800be6c:	e7c3      	b.n	800bdf6 <_vfiprintf_r+0x176>
 800be6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be72:	4604      	mov	r4, r0
 800be74:	2301      	movs	r3, #1
 800be76:	e7f0      	b.n	800be5a <_vfiprintf_r+0x1da>
 800be78:	ab03      	add	r3, sp, #12
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	462a      	mov	r2, r5
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <_vfiprintf_r+0x258>)
 800be80:	a904      	add	r1, sp, #16
 800be82:	4630      	mov	r0, r6
 800be84:	f7fd ffaa 	bl	8009ddc <_printf_float>
 800be88:	4607      	mov	r7, r0
 800be8a:	1c78      	adds	r0, r7, #1
 800be8c:	d1d6      	bne.n	800be3c <_vfiprintf_r+0x1bc>
 800be8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d405      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be94:	89ab      	ldrh	r3, [r5, #12]
 800be96:	059a      	lsls	r2, r3, #22
 800be98:	d402      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9c:	f000 faaf 	bl	800c3fe <__retarget_lock_release_recursive>
 800bea0:	89ab      	ldrh	r3, [r5, #12]
 800bea2:	065b      	lsls	r3, r3, #25
 800bea4:	f53f af12 	bmi.w	800bccc <_vfiprintf_r+0x4c>
 800bea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beaa:	e711      	b.n	800bcd0 <_vfiprintf_r+0x50>
 800beac:	ab03      	add	r3, sp, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <_vfiprintf_r+0x258>)
 800beb4:	a904      	add	r1, sp, #16
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7fe fa34 	bl	800a324 <_printf_i>
 800bebc:	e7e4      	b.n	800be88 <_vfiprintf_r+0x208>
 800bebe:	bf00      	nop
 800bec0:	0800caec 	.word	0x0800caec
 800bec4:	0800cb0c 	.word	0x0800cb0c
 800bec8:	0800cacc 	.word	0x0800cacc
 800becc:	0800c9ba 	.word	0x0800c9ba
 800bed0:	0800c9c4 	.word	0x0800c9c4
 800bed4:	08009ddd 	.word	0x08009ddd
 800bed8:	0800bc5b 	.word	0x0800bc5b
 800bedc:	0800c9c0 	.word	0x0800c9c0

0800bee0 <__swbuf_r>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	460e      	mov	r6, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	4605      	mov	r5, r0
 800bee8:	b118      	cbz	r0, 800bef2 <__swbuf_r+0x12>
 800beea:	6983      	ldr	r3, [r0, #24]
 800beec:	b90b      	cbnz	r3, 800bef2 <__swbuf_r+0x12>
 800beee:	f000 f9e7 	bl	800c2c0 <__sinit>
 800bef2:	4b21      	ldr	r3, [pc, #132]	; (800bf78 <__swbuf_r+0x98>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d12b      	bne.n	800bf50 <__swbuf_r+0x70>
 800bef8:	686c      	ldr	r4, [r5, #4]
 800befa:	69a3      	ldr	r3, [r4, #24]
 800befc:	60a3      	str	r3, [r4, #8]
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	071a      	lsls	r2, r3, #28
 800bf02:	d52f      	bpl.n	800bf64 <__swbuf_r+0x84>
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	b36b      	cbz	r3, 800bf64 <__swbuf_r+0x84>
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	6820      	ldr	r0, [r4, #0]
 800bf0c:	1ac0      	subs	r0, r0, r3
 800bf0e:	6963      	ldr	r3, [r4, #20]
 800bf10:	b2f6      	uxtb	r6, r6
 800bf12:	4283      	cmp	r3, r0
 800bf14:	4637      	mov	r7, r6
 800bf16:	dc04      	bgt.n	800bf22 <__swbuf_r+0x42>
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f000 f93c 	bl	800c198 <_fflush_r>
 800bf20:	bb30      	cbnz	r0, 800bf70 <__swbuf_r+0x90>
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	60a3      	str	r3, [r4, #8]
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	6022      	str	r2, [r4, #0]
 800bf2e:	701e      	strb	r6, [r3, #0]
 800bf30:	6963      	ldr	r3, [r4, #20]
 800bf32:	3001      	adds	r0, #1
 800bf34:	4283      	cmp	r3, r0
 800bf36:	d004      	beq.n	800bf42 <__swbuf_r+0x62>
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	07db      	lsls	r3, r3, #31
 800bf3c:	d506      	bpl.n	800bf4c <__swbuf_r+0x6c>
 800bf3e:	2e0a      	cmp	r6, #10
 800bf40:	d104      	bne.n	800bf4c <__swbuf_r+0x6c>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4628      	mov	r0, r5
 800bf46:	f000 f927 	bl	800c198 <_fflush_r>
 800bf4a:	b988      	cbnz	r0, 800bf70 <__swbuf_r+0x90>
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <__swbuf_r+0x9c>)
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d101      	bne.n	800bf5a <__swbuf_r+0x7a>
 800bf56:	68ac      	ldr	r4, [r5, #8]
 800bf58:	e7cf      	b.n	800befa <__swbuf_r+0x1a>
 800bf5a:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <__swbuf_r+0xa0>)
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	bf08      	it	eq
 800bf60:	68ec      	ldreq	r4, [r5, #12]
 800bf62:	e7ca      	b.n	800befa <__swbuf_r+0x1a>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f81a 	bl	800bfa0 <__swsetup_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d0cb      	beq.n	800bf08 <__swbuf_r+0x28>
 800bf70:	f04f 37ff 	mov.w	r7, #4294967295
 800bf74:	e7ea      	b.n	800bf4c <__swbuf_r+0x6c>
 800bf76:	bf00      	nop
 800bf78:	0800caec 	.word	0x0800caec
 800bf7c:	0800cb0c 	.word	0x0800cb0c
 800bf80:	0800cacc 	.word	0x0800cacc

0800bf84 <__ascii_wctomb>:
 800bf84:	b149      	cbz	r1, 800bf9a <__ascii_wctomb+0x16>
 800bf86:	2aff      	cmp	r2, #255	; 0xff
 800bf88:	bf85      	ittet	hi
 800bf8a:	238a      	movhi	r3, #138	; 0x8a
 800bf8c:	6003      	strhi	r3, [r0, #0]
 800bf8e:	700a      	strbls	r2, [r1, #0]
 800bf90:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf94:	bf98      	it	ls
 800bf96:	2001      	movls	r0, #1
 800bf98:	4770      	bx	lr
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <__swsetup_r>:
 800bfa0:	4b32      	ldr	r3, [pc, #200]	; (800c06c <__swsetup_r+0xcc>)
 800bfa2:	b570      	push	{r4, r5, r6, lr}
 800bfa4:	681d      	ldr	r5, [r3, #0]
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	b125      	cbz	r5, 800bfb6 <__swsetup_r+0x16>
 800bfac:	69ab      	ldr	r3, [r5, #24]
 800bfae:	b913      	cbnz	r3, 800bfb6 <__swsetup_r+0x16>
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f000 f985 	bl	800c2c0 <__sinit>
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <__swsetup_r+0xd0>)
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	d10f      	bne.n	800bfdc <__swsetup_r+0x3c>
 800bfbc:	686c      	ldr	r4, [r5, #4]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfc4:	0719      	lsls	r1, r3, #28
 800bfc6:	d42c      	bmi.n	800c022 <__swsetup_r+0x82>
 800bfc8:	06dd      	lsls	r5, r3, #27
 800bfca:	d411      	bmi.n	800bff0 <__swsetup_r+0x50>
 800bfcc:	2309      	movs	r3, #9
 800bfce:	6033      	str	r3, [r6, #0]
 800bfd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfda:	e03e      	b.n	800c05a <__swsetup_r+0xba>
 800bfdc:	4b25      	ldr	r3, [pc, #148]	; (800c074 <__swsetup_r+0xd4>)
 800bfde:	429c      	cmp	r4, r3
 800bfe0:	d101      	bne.n	800bfe6 <__swsetup_r+0x46>
 800bfe2:	68ac      	ldr	r4, [r5, #8]
 800bfe4:	e7eb      	b.n	800bfbe <__swsetup_r+0x1e>
 800bfe6:	4b24      	ldr	r3, [pc, #144]	; (800c078 <__swsetup_r+0xd8>)
 800bfe8:	429c      	cmp	r4, r3
 800bfea:	bf08      	it	eq
 800bfec:	68ec      	ldreq	r4, [r5, #12]
 800bfee:	e7e6      	b.n	800bfbe <__swsetup_r+0x1e>
 800bff0:	0758      	lsls	r0, r3, #29
 800bff2:	d512      	bpl.n	800c01a <__swsetup_r+0x7a>
 800bff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bff6:	b141      	cbz	r1, 800c00a <__swsetup_r+0x6a>
 800bff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <__swsetup_r+0x66>
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff fcd5 	bl	800b9b0 <_free_r>
 800c006:	2300      	movs	r3, #0
 800c008:	6363      	str	r3, [r4, #52]	; 0x34
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f043 0308 	orr.w	r3, r3, #8
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	b94b      	cbnz	r3, 800c03a <__swsetup_r+0x9a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c030:	d003      	beq.n	800c03a <__swsetup_r+0x9a>
 800c032:	4621      	mov	r1, r4
 800c034:	4630      	mov	r0, r6
 800c036:	f000 fa09 	bl	800c44c <__smakebuf_r>
 800c03a:	89a0      	ldrh	r0, [r4, #12]
 800c03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c040:	f010 0301 	ands.w	r3, r0, #1
 800c044:	d00a      	beq.n	800c05c <__swsetup_r+0xbc>
 800c046:	2300      	movs	r3, #0
 800c048:	60a3      	str	r3, [r4, #8]
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	425b      	negs	r3, r3
 800c04e:	61a3      	str	r3, [r4, #24]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	b943      	cbnz	r3, 800c066 <__swsetup_r+0xc6>
 800c054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c058:	d1ba      	bne.n	800bfd0 <__swsetup_r+0x30>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	0781      	lsls	r1, r0, #30
 800c05e:	bf58      	it	pl
 800c060:	6963      	ldrpl	r3, [r4, #20]
 800c062:	60a3      	str	r3, [r4, #8]
 800c064:	e7f4      	b.n	800c050 <__swsetup_r+0xb0>
 800c066:	2000      	movs	r0, #0
 800c068:	e7f7      	b.n	800c05a <__swsetup_r+0xba>
 800c06a:	bf00      	nop
 800c06c:	200001c0 	.word	0x200001c0
 800c070:	0800caec 	.word	0x0800caec
 800c074:	0800cb0c 	.word	0x0800cb0c
 800c078:	0800cacc 	.word	0x0800cacc

0800c07c <abort>:
 800c07c:	b508      	push	{r3, lr}
 800c07e:	2006      	movs	r0, #6
 800c080:	f000 fa4c 	bl	800c51c <raise>
 800c084:	2001      	movs	r0, #1
 800c086:	f7f6 fe7d 	bl	8002d84 <_exit>
	...

0800c08c <__sflush_r>:
 800c08c:	898a      	ldrh	r2, [r1, #12]
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	0710      	lsls	r0, r2, #28
 800c096:	460c      	mov	r4, r1
 800c098:	d458      	bmi.n	800c14c <__sflush_r+0xc0>
 800c09a:	684b      	ldr	r3, [r1, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc05      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc02      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d0f9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	d032      	beq.n	800c124 <__sflush_r+0x98>
 800c0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	075a      	lsls	r2, r3, #29
 800c0c4:	d505      	bpl.n	800c0d2 <__sflush_r+0x46>
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	1ac0      	subs	r0, r0, r3
 800c0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0cc:	b10b      	cbz	r3, 800c0d2 <__sflush_r+0x46>
 800c0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0d0:	1ac0      	subs	r0, r0, r3
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0d8:	6a21      	ldr	r1, [r4, #32]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	47b0      	blx	r6
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	d106      	bne.n	800c0f2 <__sflush_r+0x66>
 800c0e4:	6829      	ldr	r1, [r5, #0]
 800c0e6:	291d      	cmp	r1, #29
 800c0e8:	d82c      	bhi.n	800c144 <__sflush_r+0xb8>
 800c0ea:	4a2a      	ldr	r2, [pc, #168]	; (800c194 <__sflush_r+0x108>)
 800c0ec:	40ca      	lsrs	r2, r1
 800c0ee:	07d6      	lsls	r6, r2, #31
 800c0f0:	d528      	bpl.n	800c144 <__sflush_r+0xb8>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	04d9      	lsls	r1, r3, #19
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	d504      	bpl.n	800c108 <__sflush_r+0x7c>
 800c0fe:	1c42      	adds	r2, r0, #1
 800c100:	d101      	bne.n	800c106 <__sflush_r+0x7a>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b903      	cbnz	r3, 800c108 <__sflush_r+0x7c>
 800c106:	6560      	str	r0, [r4, #84]	; 0x54
 800c108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10a:	602f      	str	r7, [r5, #0]
 800c10c:	2900      	cmp	r1, #0
 800c10e:	d0ca      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c114:	4299      	cmp	r1, r3
 800c116:	d002      	beq.n	800c11e <__sflush_r+0x92>
 800c118:	4628      	mov	r0, r5
 800c11a:	f7ff fc49 	bl	800b9b0 <_free_r>
 800c11e:	2000      	movs	r0, #0
 800c120:	6360      	str	r0, [r4, #52]	; 0x34
 800c122:	e7c1      	b.n	800c0a8 <__sflush_r+0x1c>
 800c124:	6a21      	ldr	r1, [r4, #32]
 800c126:	2301      	movs	r3, #1
 800c128:	4628      	mov	r0, r5
 800c12a:	47b0      	blx	r6
 800c12c:	1c41      	adds	r1, r0, #1
 800c12e:	d1c7      	bne.n	800c0c0 <__sflush_r+0x34>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0c4      	beq.n	800c0c0 <__sflush_r+0x34>
 800c136:	2b1d      	cmp	r3, #29
 800c138:	d001      	beq.n	800c13e <__sflush_r+0xb2>
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	d101      	bne.n	800c142 <__sflush_r+0xb6>
 800c13e:	602f      	str	r7, [r5, #0]
 800c140:	e7b1      	b.n	800c0a6 <__sflush_r+0x1a>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7ad      	b.n	800c0a8 <__sflush_r+0x1c>
 800c14c:	690f      	ldr	r7, [r1, #16]
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d0a9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c152:	0793      	lsls	r3, r2, #30
 800c154:	680e      	ldr	r6, [r1, #0]
 800c156:	bf08      	it	eq
 800c158:	694b      	ldreq	r3, [r1, #20]
 800c15a:	600f      	str	r7, [r1, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2300      	movne	r3, #0
 800c160:	eba6 0807 	sub.w	r8, r6, r7
 800c164:	608b      	str	r3, [r1, #8]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	dd9c      	ble.n	800c0a6 <__sflush_r+0x1a>
 800c16c:	6a21      	ldr	r1, [r4, #32]
 800c16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c170:	4643      	mov	r3, r8
 800c172:	463a      	mov	r2, r7
 800c174:	4628      	mov	r0, r5
 800c176:	47b0      	blx	r6
 800c178:	2800      	cmp	r0, #0
 800c17a:	dc06      	bgt.n	800c18a <__sflush_r+0xfe>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e78e      	b.n	800c0a8 <__sflush_r+0x1c>
 800c18a:	4407      	add	r7, r0
 800c18c:	eba8 0800 	sub.w	r8, r8, r0
 800c190:	e7e9      	b.n	800c166 <__sflush_r+0xda>
 800c192:	bf00      	nop
 800c194:	20400001 	.word	0x20400001

0800c198 <_fflush_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b913      	cbnz	r3, 800c1a8 <_fflush_r+0x10>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	b118      	cbz	r0, 800c1b2 <_fflush_r+0x1a>
 800c1aa:	6983      	ldr	r3, [r0, #24]
 800c1ac:	b90b      	cbnz	r3, 800c1b2 <_fflush_r+0x1a>
 800c1ae:	f000 f887 	bl	800c2c0 <__sinit>
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <_fflush_r+0x6c>)
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	d11b      	bne.n	800c1f0 <_fflush_r+0x58>
 800c1b8:	686c      	ldr	r4, [r5, #4]
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0ef      	beq.n	800c1a2 <_fflush_r+0xa>
 800c1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1c4:	07d0      	lsls	r0, r2, #31
 800c1c6:	d404      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1c8:	0599      	lsls	r1, r3, #22
 800c1ca:	d402      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ce:	f000 f915 	bl	800c3fc <__retarget_lock_acquire_recursive>
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	f7ff ff59 	bl	800c08c <__sflush_r>
 800c1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1dc:	07da      	lsls	r2, r3, #31
 800c1de:	4605      	mov	r5, r0
 800c1e0:	d4e0      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	059b      	lsls	r3, r3, #22
 800c1e6:	d4dd      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ea:	f000 f908 	bl	800c3fe <__retarget_lock_release_recursive>
 800c1ee:	e7d9      	b.n	800c1a4 <_fflush_r+0xc>
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <_fflush_r+0x70>)
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d101      	bne.n	800c1fa <_fflush_r+0x62>
 800c1f6:	68ac      	ldr	r4, [r5, #8]
 800c1f8:	e7df      	b.n	800c1ba <_fflush_r+0x22>
 800c1fa:	4b04      	ldr	r3, [pc, #16]	; (800c20c <_fflush_r+0x74>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	bf08      	it	eq
 800c200:	68ec      	ldreq	r4, [r5, #12]
 800c202:	e7da      	b.n	800c1ba <_fflush_r+0x22>
 800c204:	0800caec 	.word	0x0800caec
 800c208:	0800cb0c 	.word	0x0800cb0c
 800c20c:	0800cacc 	.word	0x0800cacc

0800c210 <std>:
 800c210:	2300      	movs	r3, #0
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	e9c0 3300 	strd	r3, r3, [r0]
 800c21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21e:	6083      	str	r3, [r0, #8]
 800c220:	8181      	strh	r1, [r0, #12]
 800c222:	6643      	str	r3, [r0, #100]	; 0x64
 800c224:	81c2      	strh	r2, [r0, #14]
 800c226:	6183      	str	r3, [r0, #24]
 800c228:	4619      	mov	r1, r3
 800c22a:	2208      	movs	r2, #8
 800c22c:	305c      	adds	r0, #92	; 0x5c
 800c22e:	f7fd fd2d 	bl	8009c8c <memset>
 800c232:	4b05      	ldr	r3, [pc, #20]	; (800c248 <std+0x38>)
 800c234:	6263      	str	r3, [r4, #36]	; 0x24
 800c236:	4b05      	ldr	r3, [pc, #20]	; (800c24c <std+0x3c>)
 800c238:	62a3      	str	r3, [r4, #40]	; 0x28
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <std+0x40>)
 800c23c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <std+0x44>)
 800c240:	6224      	str	r4, [r4, #32]
 800c242:	6323      	str	r3, [r4, #48]	; 0x30
 800c244:	bd10      	pop	{r4, pc}
 800c246:	bf00      	nop
 800c248:	0800c555 	.word	0x0800c555
 800c24c:	0800c577 	.word	0x0800c577
 800c250:	0800c5af 	.word	0x0800c5af
 800c254:	0800c5d3 	.word	0x0800c5d3

0800c258 <_cleanup_r>:
 800c258:	4901      	ldr	r1, [pc, #4]	; (800c260 <_cleanup_r+0x8>)
 800c25a:	f000 b8af 	b.w	800c3bc <_fwalk_reent>
 800c25e:	bf00      	nop
 800c260:	0800c199 	.word	0x0800c199

0800c264 <__sfmoreglue>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	2268      	movs	r2, #104	; 0x68
 800c268:	1e4d      	subs	r5, r1, #1
 800c26a:	4355      	muls	r5, r2
 800c26c:	460e      	mov	r6, r1
 800c26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c272:	f7ff fc09 	bl	800ba88 <_malloc_r>
 800c276:	4604      	mov	r4, r0
 800c278:	b140      	cbz	r0, 800c28c <__sfmoreglue+0x28>
 800c27a:	2100      	movs	r1, #0
 800c27c:	e9c0 1600 	strd	r1, r6, [r0]
 800c280:	300c      	adds	r0, #12
 800c282:	60a0      	str	r0, [r4, #8]
 800c284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c288:	f7fd fd00 	bl	8009c8c <memset>
 800c28c:	4620      	mov	r0, r4
 800c28e:	bd70      	pop	{r4, r5, r6, pc}

0800c290 <__sfp_lock_acquire>:
 800c290:	4801      	ldr	r0, [pc, #4]	; (800c298 <__sfp_lock_acquire+0x8>)
 800c292:	f000 b8b3 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800c296:	bf00      	nop
 800c298:	20005781 	.word	0x20005781

0800c29c <__sfp_lock_release>:
 800c29c:	4801      	ldr	r0, [pc, #4]	; (800c2a4 <__sfp_lock_release+0x8>)
 800c29e:	f000 b8ae 	b.w	800c3fe <__retarget_lock_release_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	20005781 	.word	0x20005781

0800c2a8 <__sinit_lock_acquire>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__sinit_lock_acquire+0x8>)
 800c2aa:	f000 b8a7 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	20005782 	.word	0x20005782

0800c2b4 <__sinit_lock_release>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__sinit_lock_release+0x8>)
 800c2b6:	f000 b8a2 	b.w	800c3fe <__retarget_lock_release_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	20005782 	.word	0x20005782

0800c2c0 <__sinit>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	f7ff fff0 	bl	800c2a8 <__sinit_lock_acquire>
 800c2c8:	69a3      	ldr	r3, [r4, #24]
 800c2ca:	b11b      	cbz	r3, 800c2d4 <__sinit+0x14>
 800c2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d0:	f7ff bff0 	b.w	800c2b4 <__sinit_lock_release>
 800c2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <__sinit+0x68>)
 800c2dc:	4a13      	ldr	r2, [pc, #76]	; (800c32c <__sinit+0x6c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2e2:	42a3      	cmp	r3, r4
 800c2e4:	bf04      	itt	eq
 800c2e6:	2301      	moveq	r3, #1
 800c2e8:	61a3      	streq	r3, [r4, #24]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 f820 	bl	800c330 <__sfp>
 800c2f0:	6060      	str	r0, [r4, #4]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 f81c 	bl	800c330 <__sfp>
 800c2f8:	60a0      	str	r0, [r4, #8]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 f818 	bl	800c330 <__sfp>
 800c300:	2200      	movs	r2, #0
 800c302:	60e0      	str	r0, [r4, #12]
 800c304:	2104      	movs	r1, #4
 800c306:	6860      	ldr	r0, [r4, #4]
 800c308:	f7ff ff82 	bl	800c210 <std>
 800c30c:	68a0      	ldr	r0, [r4, #8]
 800c30e:	2201      	movs	r2, #1
 800c310:	2109      	movs	r1, #9
 800c312:	f7ff ff7d 	bl	800c210 <std>
 800c316:	68e0      	ldr	r0, [r4, #12]
 800c318:	2202      	movs	r2, #2
 800c31a:	2112      	movs	r1, #18
 800c31c:	f7ff ff78 	bl	800c210 <std>
 800c320:	2301      	movs	r3, #1
 800c322:	61a3      	str	r3, [r4, #24]
 800c324:	e7d2      	b.n	800c2cc <__sinit+0xc>
 800c326:	bf00      	nop
 800c328:	0800c750 	.word	0x0800c750
 800c32c:	0800c259 	.word	0x0800c259

0800c330 <__sfp>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	4607      	mov	r7, r0
 800c334:	f7ff ffac 	bl	800c290 <__sfp_lock_acquire>
 800c338:	4b1e      	ldr	r3, [pc, #120]	; (800c3b4 <__sfp+0x84>)
 800c33a:	681e      	ldr	r6, [r3, #0]
 800c33c:	69b3      	ldr	r3, [r6, #24]
 800c33e:	b913      	cbnz	r3, 800c346 <__sfp+0x16>
 800c340:	4630      	mov	r0, r6
 800c342:	f7ff ffbd 	bl	800c2c0 <__sinit>
 800c346:	3648      	adds	r6, #72	; 0x48
 800c348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	d503      	bpl.n	800c358 <__sfp+0x28>
 800c350:	6833      	ldr	r3, [r6, #0]
 800c352:	b30b      	cbz	r3, 800c398 <__sfp+0x68>
 800c354:	6836      	ldr	r6, [r6, #0]
 800c356:	e7f7      	b.n	800c348 <__sfp+0x18>
 800c358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c35c:	b9d5      	cbnz	r5, 800c394 <__sfp+0x64>
 800c35e:	4b16      	ldr	r3, [pc, #88]	; (800c3b8 <__sfp+0x88>)
 800c360:	60e3      	str	r3, [r4, #12]
 800c362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c366:	6665      	str	r5, [r4, #100]	; 0x64
 800c368:	f000 f847 	bl	800c3fa <__retarget_lock_init_recursive>
 800c36c:	f7ff ff96 	bl	800c29c <__sfp_lock_release>
 800c370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c378:	6025      	str	r5, [r4, #0]
 800c37a:	61a5      	str	r5, [r4, #24]
 800c37c:	2208      	movs	r2, #8
 800c37e:	4629      	mov	r1, r5
 800c380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c384:	f7fd fc82 	bl	8009c8c <memset>
 800c388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c390:	4620      	mov	r0, r4
 800c392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c394:	3468      	adds	r4, #104	; 0x68
 800c396:	e7d9      	b.n	800c34c <__sfp+0x1c>
 800c398:	2104      	movs	r1, #4
 800c39a:	4638      	mov	r0, r7
 800c39c:	f7ff ff62 	bl	800c264 <__sfmoreglue>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	6030      	str	r0, [r6, #0]
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1d5      	bne.n	800c354 <__sfp+0x24>
 800c3a8:	f7ff ff78 	bl	800c29c <__sfp_lock_release>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	e7ee      	b.n	800c390 <__sfp+0x60>
 800c3b2:	bf00      	nop
 800c3b4:	0800c750 	.word	0x0800c750
 800c3b8:	ffff0001 	.word	0xffff0001

0800c3bc <_fwalk_reent>:
 800c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	4688      	mov	r8, r1
 800c3c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3c8:	2700      	movs	r7, #0
 800c3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c3d2:	d505      	bpl.n	800c3e0 <_fwalk_reent+0x24>
 800c3d4:	6824      	ldr	r4, [r4, #0]
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	d1f7      	bne.n	800c3ca <_fwalk_reent+0xe>
 800c3da:	4638      	mov	r0, r7
 800c3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e0:	89ab      	ldrh	r3, [r5, #12]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d907      	bls.n	800c3f6 <_fwalk_reent+0x3a>
 800c3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	d003      	beq.n	800c3f6 <_fwalk_reent+0x3a>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	47c0      	blx	r8
 800c3f4:	4307      	orrs	r7, r0
 800c3f6:	3568      	adds	r5, #104	; 0x68
 800c3f8:	e7e9      	b.n	800c3ce <_fwalk_reent+0x12>

0800c3fa <__retarget_lock_init_recursive>:
 800c3fa:	4770      	bx	lr

0800c3fc <__retarget_lock_acquire_recursive>:
 800c3fc:	4770      	bx	lr

0800c3fe <__retarget_lock_release_recursive>:
 800c3fe:	4770      	bx	lr

0800c400 <__swhatbuf_r>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	460e      	mov	r6, r1
 800c404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c408:	2900      	cmp	r1, #0
 800c40a:	b096      	sub	sp, #88	; 0x58
 800c40c:	4614      	mov	r4, r2
 800c40e:	461d      	mov	r5, r3
 800c410:	da08      	bge.n	800c424 <__swhatbuf_r+0x24>
 800c412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	061a      	lsls	r2, r3, #24
 800c41c:	d410      	bmi.n	800c440 <__swhatbuf_r+0x40>
 800c41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c422:	e00e      	b.n	800c442 <__swhatbuf_r+0x42>
 800c424:	466a      	mov	r2, sp
 800c426:	f000 f8fb 	bl	800c620 <_fstat_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	dbf1      	blt.n	800c412 <__swhatbuf_r+0x12>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c438:	425a      	negs	r2, r3
 800c43a:	415a      	adcs	r2, r3
 800c43c:	602a      	str	r2, [r5, #0]
 800c43e:	e7ee      	b.n	800c41e <__swhatbuf_r+0x1e>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	2000      	movs	r0, #0
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	b016      	add	sp, #88	; 0x58
 800c448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c44c <__smakebuf_r>:
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c450:	079d      	lsls	r5, r3, #30
 800c452:	4606      	mov	r6, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d507      	bpl.n	800c468 <__smakebuf_r+0x1c>
 800c458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	6123      	str	r3, [r4, #16]
 800c460:	2301      	movs	r3, #1
 800c462:	6163      	str	r3, [r4, #20]
 800c464:	b002      	add	sp, #8
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	ab01      	add	r3, sp, #4
 800c46a:	466a      	mov	r2, sp
 800c46c:	f7ff ffc8 	bl	800c400 <__swhatbuf_r>
 800c470:	9900      	ldr	r1, [sp, #0]
 800c472:	4605      	mov	r5, r0
 800c474:	4630      	mov	r0, r6
 800c476:	f7ff fb07 	bl	800ba88 <_malloc_r>
 800c47a:	b948      	cbnz	r0, 800c490 <__smakebuf_r+0x44>
 800c47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d4ef      	bmi.n	800c464 <__smakebuf_r+0x18>
 800c484:	f023 0303 	bic.w	r3, r3, #3
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	e7e3      	b.n	800c458 <__smakebuf_r+0xc>
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <__smakebuf_r+0x7c>)
 800c492:	62b3      	str	r3, [r6, #40]	; 0x28
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	6163      	str	r3, [r4, #20]
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	6120      	str	r0, [r4, #16]
 800c4a6:	b15b      	cbz	r3, 800c4c0 <__smakebuf_r+0x74>
 800c4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f000 f8c9 	bl	800c644 <_isatty_r>
 800c4b2:	b128      	cbz	r0, 800c4c0 <__smakebuf_r+0x74>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	f043 0301 	orr.w	r3, r3, #1
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	89a0      	ldrh	r0, [r4, #12]
 800c4c2:	4305      	orrs	r5, r0
 800c4c4:	81a5      	strh	r5, [r4, #12]
 800c4c6:	e7cd      	b.n	800c464 <__smakebuf_r+0x18>
 800c4c8:	0800c259 	.word	0x0800c259

0800c4cc <_raise_r>:
 800c4cc:	291f      	cmp	r1, #31
 800c4ce:	b538      	push	{r3, r4, r5, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	d904      	bls.n	800c4e0 <_raise_r+0x14>
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	6003      	str	r3, [r0, #0]
 800c4da:	f04f 30ff 	mov.w	r0, #4294967295
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4e2:	b112      	cbz	r2, 800c4ea <_raise_r+0x1e>
 800c4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4e8:	b94b      	cbnz	r3, 800c4fe <_raise_r+0x32>
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 f830 	bl	800c550 <_getpid_r>
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4fa:	f000 b817 	b.w	800c52c <_kill_r>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d00a      	beq.n	800c518 <_raise_r+0x4c>
 800c502:	1c59      	adds	r1, r3, #1
 800c504:	d103      	bne.n	800c50e <_raise_r+0x42>
 800c506:	2316      	movs	r3, #22
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7e7      	b.n	800c4de <_raise_r+0x12>
 800c50e:	2400      	movs	r4, #0
 800c510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c514:	4628      	mov	r0, r5
 800c516:	4798      	blx	r3
 800c518:	2000      	movs	r0, #0
 800c51a:	e7e0      	b.n	800c4de <_raise_r+0x12>

0800c51c <raise>:
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <raise+0xc>)
 800c51e:	4601      	mov	r1, r0
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f7ff bfd3 	b.w	800c4cc <_raise_r>
 800c526:	bf00      	nop
 800c528:	200001c0 	.word	0x200001c0

0800c52c <_kill_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_kill_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f6 fc13 	bl	8002d64 <_kill>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_kill_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_kill_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	2000577c 	.word	0x2000577c

0800c550 <_getpid_r>:
 800c550:	f7f6 bc00 	b.w	8002d54 <_getpid>

0800c554 <__sread>:
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	f000 f894 	bl	800c688 <_read_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	bfab      	itete	ge
 800c564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c566:	89a3      	ldrhlt	r3, [r4, #12]
 800c568:	181b      	addge	r3, r3, r0
 800c56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c56e:	bfac      	ite	ge
 800c570:	6563      	strge	r3, [r4, #84]	; 0x54
 800c572:	81a3      	strhlt	r3, [r4, #12]
 800c574:	bd10      	pop	{r4, pc}

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 f868 	bl	800c664 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b817 	b.w	800c5dc <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f855 	bl	800c664 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b813 	b.w	800c600 <_close_r>
	...

0800c5dc <_write_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_write_r+0x20>)
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f6 fbf1 	bl	8002dd2 <_write>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_write_r+0x1e>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_write_r+0x1e>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	2000577c 	.word	0x2000577c

0800c600 <_close_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_close_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f6 fbfd 	bl	8002e0a <_close>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_close_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_close_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	2000577c 	.word	0x2000577c

0800c620 <_fstat_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d07      	ldr	r5, [pc, #28]	; (800c640 <_fstat_r+0x20>)
 800c624:	2300      	movs	r3, #0
 800c626:	4604      	mov	r4, r0
 800c628:	4608      	mov	r0, r1
 800c62a:	4611      	mov	r1, r2
 800c62c:	602b      	str	r3, [r5, #0]
 800c62e:	f7f6 fbf8 	bl	8002e22 <_fstat>
 800c632:	1c43      	adds	r3, r0, #1
 800c634:	d102      	bne.n	800c63c <_fstat_r+0x1c>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	b103      	cbz	r3, 800c63c <_fstat_r+0x1c>
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	bd38      	pop	{r3, r4, r5, pc}
 800c63e:	bf00      	nop
 800c640:	2000577c 	.word	0x2000577c

0800c644 <_isatty_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d06      	ldr	r5, [pc, #24]	; (800c660 <_isatty_r+0x1c>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	602b      	str	r3, [r5, #0]
 800c650:	f7f6 fbf7 	bl	8002e42 <_isatty>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_isatty_r+0x1a>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_isatty_r+0x1a>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	2000577c 	.word	0x2000577c

0800c664 <_lseek_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	; (800c684 <_lseek_r+0x20>)
 800c668:	4604      	mov	r4, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	4611      	mov	r1, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f7f6 fbf0 	bl	8002e58 <_lseek>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_lseek_r+0x1e>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_lseek_r+0x1e>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	2000577c 	.word	0x2000577c

0800c688 <_read_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d07      	ldr	r5, [pc, #28]	; (800c6a8 <_read_r+0x20>)
 800c68c:	4604      	mov	r4, r0
 800c68e:	4608      	mov	r0, r1
 800c690:	4611      	mov	r1, r2
 800c692:	2200      	movs	r2, #0
 800c694:	602a      	str	r2, [r5, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	f7f6 fb7e 	bl	8002d98 <_read>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	d102      	bne.n	800c6a6 <_read_r+0x1e>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	b103      	cbz	r3, 800c6a6 <_read_r+0x1e>
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	bd38      	pop	{r3, r4, r5, pc}
 800c6a8:	2000577c 	.word	0x2000577c

0800c6ac <_init>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	bf00      	nop
 800c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b2:	bc08      	pop	{r3}
 800c6b4:	469e      	mov	lr, r3
 800c6b6:	4770      	bx	lr

0800c6b8 <_fini>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr
